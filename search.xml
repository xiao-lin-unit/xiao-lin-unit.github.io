<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2025/07/09/gradle/Gradle/"/>
      <url>/2025/07/09/gradle/Gradle/</url>
      
        <content type="html"><![CDATA[<p>一.<code>Gradle</code>构建生命周期</p><ol><li>初始化阶段<ul><li>检测<code>settings.gradle</code>文件</li><li>创建一个<code>Settings</code>实例</li><li>评估设置文件以确定那些项目（和包含的构建）构成构建</li><li>为每个项目创建一个<code>Project</code>实例</li></ul></li><li>配置阶段<ul><li>评估参与构建的每个项目的构建脚本<code>build.gradle</code></li><li>为请求的任务创建任务图</li></ul></li><li>执行阶段<ul><li>调度并执行选定的任务</li><li>任务之间的依赖项决定执行顺序</li><li>任务的执行可以并行执行</li></ul></li></ol><blockquote><ol><li><p><code>settings.gradle</code>中的配置在初始化阶段使用</p></li><li><p><code>build.gradle</code>中的配置在配置阶段使用</p><ul><li><p>公共配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line">println <span class="string">&#x27;配置阶段执行&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>任务注册配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task(<span class="string">&#x27;myTask&#x27;</span>) &#123;</span><br><span class="line">    println <span class="string">&#x27;配置阶段执行&#x27;</span></span><br><span class="line">    doFirest &#123;</span><br><span class="line">        println <span class="string">&#x27;执行阶段执行&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;执行阶段执行&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>tasks.register</code>注册一个名为<code>myTask</code>的任务，这个任务在配置阶段就已经注册配置，但是直到执行阶段才会执行相关操作。执行操作通过<code>doFirst</code>和<code>doLast</code>添加</p></li></ul></li></ol></blockquote><p>二.<code>settings.gradle</code></p><ol><li><p><code>settings.gradle</code>是每个<code>Gradle</code>构建的入口，初始化阶段会在项目根目录中找到<code>settings.gradle</code>文件，并根据内容实例化一个<code>Settings</code>对象。由此，<code>settings.gradle</code>文件中可以做那些配置可以直接通过<code>Settings</code>类获得</p></li><li><p>常用属性</p><ul><li><p><code>pluginManagement</code>: 定义插件位置</p><blockquote><p>管理构建的插件版本和仓库，提供了一种方式来定义项目应使用那些插件以及应从那些仓库解析它们。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pluginManagement &#123;  </span><br><span class="line">    repositories &#123;</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>plugins</code>: 应用<code>settings</code>插件</p><blockquote><p>选择性的应用插件，这些插件对于配置项目的<code>settings</code>是必需品。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;   </span><br><span class="line">    id(<span class="string">&quot;org.gradle.toolchains.foojay-resolver-convention&quot;</span>) version <span class="string">&quot;0.10.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>rootProject.name</code>: 定义跟项目名称</p><blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rootProject.name = <span class="string">&#x27;simple-project&#x27;</span>     </span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>dependencyResolutionManagement</code>: 定义依赖解析策略</p><blockquote><p>可以选择性的为项目定义依赖解析的规则和配置。提供了集中管理和自定义依赖解析的方式</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencyResolutionManagement &#123;    </span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>include</code>: 将子项目添加到构建中</p><blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">include(<span class="string">&quot;sub-project-a&quot;</span>)    </span><br><span class="line">include(<span class="string">&quot;sub-project-b&quot;</span>)</span><br><span class="line">include(<span class="string">&quot;sub-project-c&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果是多级项目，通过<code>:</code>进行区分</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">include(<span class="string">&quot;sub-project-a&quot;</span>)</span><br><span class="line"><span class="comment">// sub-project-a项目下的level-three-a项目</span></span><br><span class="line">include(<span class="string">&quot;:sub-project-a:level-three-a&quot;</span>) </span><br></pre></td></tr></table></figure><p>更优的可以使用迭代项目跟文件夹中的目录列表并自动包含</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> names(File file, String pN) &#123;</span><br><span class="line">    List ns = []</span><br><span class="line">    Arrays.stream(file.listFiles()).filter &#123; it.isDirectory() &amp;&amp; it.name != <span class="string">&quot;buildSrc&quot;</span> &amp;&amp; (<span class="keyword">new</span> File(it, <span class="string">&quot;build.gradle&quot;</span>).exists())&#125;.forEach &#123;</span><br><span class="line">        String name = <span class="string">&quot;$&#123;pN&#125;:$&#123;it.name&#125;&quot;</span></span><br><span class="line">        ns.add(name)</span><br><span class="line">        ns.addAll(names(it, name))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ns;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">names(rootDir, <span class="string">&#x27;&#x27;</span>).forEach &#123;</span><br><span class="line">    include(it)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li></ol><p>三. <code>build.gradle</code></p><ol><li><p><code>Gradel</code>为<code>settings.gradle</code>文件中包含的项目根项目和子项目创建一个<code>Project</code>实例，根据相应项目的<code>build.gradel</code>文件进行配置，<code>build.gradel</code>在配置阶段使用。由此，<code>build.gradle</code>文件中可以做那些配置可以直接通过<code>Project</code>类获得</p></li><li><p>常用属性</p><ul><li><p><code>plugins</code>: 应用插件到构建</p><blockquote><p>用户扩展<code>Gradle</code>，也用于模块化和重用项目配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;   </span><br><span class="line">    id <span class="string">&#x27;application&#x27;</span> <span class="comment">// application插件</span></span><br><span class="line">    id <span class="string">&#x27;groovy&#x27;</span> <span class="comment">// groovy插件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>repositories</code>: 定义可以找到依赖的位置</p><blockquote><p>定义查找依赖项的二进制文件，可以提供多个位置，<code>maven</code>中定义仓库源的地方</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;  </span><br><span class="line">    mavenCentral() <span class="comment">// 从中心仓库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>dependencies</code>: 添加依赖</p><blockquote><p>添加项目使用的依赖项</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;  </span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.9.3&#x27;</span><span class="comment">// 测试时引入依赖</span></span><br><span class="line">    testRuntimeOnly <span class="string">&#x27;org.junit.platform:junit-platform-launcher&#x27;</span><span class="comment">// 仅测试运行时有依赖</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.guava:guava:32.1.1-jre&#x27;</span><span class="comment">// 引入外部依赖</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>application</code>: 设置属性</p><blockquote><p>插件可以使用扩展向项目添加属性和方法。<code>Project</code>对象有一个关联的 <code>ExtensionContainer</code>对象，其中包含已应用于项目的所有插件的设置和属性。<code>build.gradle</code>可以对这些属性进行设置和修改</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;   </span><br><span class="line">    id <span class="string">&#x27;application&#x27;</span> <span class="comment">// application插件</span></span><br><span class="line">    id <span class="string">&#x27;groovy&#x27;</span> <span class="comment">// groovy插件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对application插件进行属性修改</span></span><br><span class="line">application &#123;   </span><br><span class="line">    mainClass = <span class="string">&#x27;com.example.Main&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>tasks.named()</code>、<code>tasks.register()</code>、<code>task()</code>: 注册和配置任务</p><blockquote><p>任务执行一些基本工作，例如编译类、运行单元测试或压缩 WAR 文件。</p><p>任务通常在插件中定义，也可以在构建脚本中注册或配置任务。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册任务</span></span><br><span class="line">tasks.register(<span class="string">&#x27;name&#x27;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 配置已有的任务</span></span><br><span class="line">tasks.named(<span class="string">&#x27;test&#x27;</span>, Test) &#123; </span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/06/19/zookeeper/Zookeeper%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%8E%9F%E7%90%86/The%20Part-Time%20Parliament%20CN/"/>
      <url>/2025/06/19/zookeeper/Zookeeper%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%8E%9F%E7%90%86/The%20Part-Time%20Parliament%20CN/</url>
      
        <content type="html"><![CDATA[<p>最近的考古发现表明，在Paxos小岛上，尽管兼职议会成员都有逍遥癖，但议会模式仍然起作用。他们依旧保持了一致的会议记录，尽管他们频繁的进出会议室并且他们的信使还很健忘。Paxon议会协议提供了一种新方法去实现设计分布式系统的状态机。</p><hr /><p><strong>1 问题</strong></p><p><strong>1.1 Paxos小岛</strong></p><p>公元十世纪初，爱情海上的Paxos小岛是一个繁荣的商业中心。财富导致了政治的复杂化，Paxon的公民采用了议会形式的政府代替了古代的神权政治。但是商业在公民义务之上，在Paxon，没有人愿意将其一生投入到议会当中。Paxon议会需要在议员们不断出入议会的情况下保持工作。</p><p>兼职议会面对的问题和当今的容错分布式系统是非常相似的，议员对应于进程，议员离开会议室则对应于分布式系统中的失败（故障）。因此，Paxon的解决方案也许对计算机科学会有借鉴意义。这里简短的介绍Paxon议会协议，然后更简短的介绍它和分布式系统的相关性。</p><p>Paxon文明被外国文明入侵破坏，最近考古学家才发掘它的历史。因此，我们对Paxon议会的了解是支离破碎的。尽管我们了解基础的协议，但是并不清楚细节。出于兴趣，我将冒昧的推测Paxons可能做些什么。</p><p><strong>1.2 要求（Requirements）</strong></p><p>议会的核心任务是决定岛上的法律，这是由它通过的一系列法案组成的。现代议会会雇佣一个专职秘书来做会议记录，但在Paxon，没有人愿意把自己所有时间投入到议会当中作为一个议会秘书。作为替代方案，每个Paxon的议员会维护一个律簿，用来记录已经通过的法令，每个法令都有一个序列号。例如议员A的律簿上会有这样一条法案：</p><blockquote><p>155：橄榄油的税率是3个银币每吨</p></blockquote><p>如果他相应155法令被议会表决通过。议员们采用不会被擦掉的墨水来记录法令，法案内容不会发生变更。</p><p>议会协议的第一个要求是***律簿之间的一致性***，这意味着任何两个律簿之间不能有相互冲突的内容。比如议员B在他的律簿上记录了：</p><blockquote><p>132：油灯必须使用橄榄油</p></blockquote><p>那么其他议员的律簿上的132法令不能出现不同的内容。但是另一个议员的律簿上的132号法令可以是空白的，因为他可能缺席了议会，还不知道议会已经通过了132号法令。</p><p>律簿之间的一致性还是不够的，因为保持所有律簿空白就可以轻易的保持律簿间的一致性。需要一些其他要求来保证法令最终被通过并记录在律簿中。在现代议会中，议员们之间的分歧阻止了法令的通过。在Paxon，情况并非如此，议员会同意所有提出的法令。但是他们的“逍遥癖”会成为一个问题。一致性会丢失，如果一组议员通过了：</p><blockquote><p>37：禁止在圣殿墙上图画</p></blockquote><p>之后离开了会议，而另一组议员进入了会议，并且对之前的通过的法令一无所知，然后通过了：</p><blockquote><p>37：允许自由的艺术表达</p></blockquote><p>那么一致性就失去了保证，除非足够多的议员长时间的呆在会议室中。因为Paxon议员不愿意取消他们的外出活动，那么不可能保证所有的法令都会被通过。但是无论如何，议员和他们的助理保证，只要他们在会议中，他们会快速的处理议会相关的议会事务。这保证了Paxon公民能设计出一个保证***进展性***的议会协议，只要满足：</p><blockquote><p>如果大多数的议员在会议室中，并且在一段足够长的时间内没有议员进入或者离开会议室，那么任何一个议员提出的法案都会在会议室中被通过，并且被会议室中的所有议员记录在他们的律簿中。</p></blockquote><p><strong>1.3 假设（Assumptions）</strong></p><p>通过给议员提供必要的资源，议会协议的要求（requirements）是可以达成的。每个议员需要一本坚固的律簿来记录法令，一支笔以及不可擦拭的墨水。议员们在离开会议室，在回来后可能会忘记之前在做什么，所以他们会把一些重要的备注记录在律簿的背面。律簿上的法令永远不会改变，但是背面的备注（notes）可能会被划掉。为了满足要求，议员们需要能知道时间的流逝，所以他们都拥有一个简单的计时器。</p><p>议员们无时无刻不带着他们的律簿，并且总是能够读取律簿上的法令和未被划掉的备注。律簿是用最好的羊皮纸做的，只用来记录最重要的备注。议员用其他纸条来记录其他的备注，这些纸条可能会在他们离开会议室的时候丢失。</p><p>会议室的环境是吵杂的，议员们只能通过信使（Messenger）来通信。信使们不会修改信息，但是可能会忘记他们已经传递过信息而重复的传递。和议员一样，信使也只是投入他们的一部分时间到议会的工作中（兼职的）。信使们可能会在传递信息前离开会议室——休一段时间的假期。也许他们也可能一去不复返，那么消息可能永远不被传递。</p><p>尽管议员和信使都可以在任何时刻离开和进入会议室，但是只要他们身处会议室，他们就会进到他们在议会中的职责。当他们在会议中，信使及时的传递信息，议员们对他们收到的信息立即做出响应。</p><p>官方声称信使和议员都是非常非常诚实的执行议会协议，但是很多学者认为这是一种宣传，为了突出Paxos在道德上由于东方的领国。但是因为官方文档中没有描述如何这种情况，我们也不知道议会会如何处理不诚实的信使和议员的情况。</p><p><strong>2 单一法令圣会（The Single-Decree Synod）</strong></p><p>Paxon议会是由早期的每19年执行一次的，为了选出一项具有象征意义的法令的圣会演化而来的。几个世纪以来，圣会通过要求牧师出席的传统程序来进行法令的选择。但是随着经济的繁荣，牧师们开始在圣会进行时进出会议室。最终，原来的协议失败了，圣会没有选择出任何法令。为了防止这种神学上的灾难，虔诚的人们请求数学家设计一套新的协议来选择圣会的法令。该协议（Synod-Protocol）的要求（requirements）和假设（assumptions）与后来的议会协议（Parliament-Protocol）是一样的，除了律簿只能记录一条单一的法令，而不是一系列的法令。议会协议（Parliament-Protocol）将在第3章中说明。</p><p>数学家们分多个步骤来推演Synod协议。他们首先证明了满足一定约束的协议能保证一致性，且同时可以推进。一个初步协议直接从约束条件中被推演出来，一个受限制的初步协议保证一致性，但是没有进展性。最终的Synod协议通过限制初始协议来达到可进展的目的。</p><p>数学家们的结论在2.1节中，协议的非正式描述在2.2-2.4节中。在附录中有更正式的描述和正确性证明。</p><p><strong>2.1 数学结果</strong></p><p>Synod法令通过一系列的有编号的选票来表决，一张选票是对单一的一个法令的表决。在一轮投票表决中，牧师只能选择投票或者不投票。和表决相关的是一群牧师的集合，称为quorum（法定人数）。一轮表决是否成功只取决于法定人数的牧师给该法令投票。正式的，一轮表决<em>B</em>包含下面四个部分：</p><p>B<sub>dec</sub> 被表决的一条法令</p><p>B<sub>qrm</sub> 非空的牧师集合，表决的法定人数集，一般指多数派</p><p>B<sub>vot</sub> 投票给该法令的牧师集合</p><p>B<sub>bal</sub> 选票序号</p><p>一轮表决B被认为是成功的，当且仅当B<sub>qrm</sub>⊆B<sub>vot</sub>（多数派赞成）。</p><p>表决的序号取于无界有序的数字。如果B’<sub>bal</sub> &gt; B<sub>bal</sub>，那么表决B’在B之后。然而这并没有标明表决之间的执行顺序，后面的表决可能实际上比之前的表决更早进行。</p><p>Paxon的数学家们在一个由多轮表决构成的集合上定义了3个条件，证明如果这个集合β的表决满足这些条件，那么一致性将会被满足并且是可进展的。前两个条件非常简单，他们的非正式表述如下：</p><p>B1(β) 每一轮表决都有唯一的编号</p><p>B2(β) 任意两轮表决中的多数派都至少有一个相同的牧师。</p><p>第三个条件更为复杂，Paxon手稿中包含令人费解的描述：</p><p>B3(β) 对于 β 中每一轮表决B，如果B的法定人数集中的任何一个牧师在β中一个更小轮的表决中投过(赞成)票，那么B的法令与所有这些更小轮表决中最大那次表决法令相同。</p><p>为了对上面隐晦的文字加以说明，手稿中补充了图1，它通过一个拥有A、B、Γ、∆、E五个牧师的五轮表决对B3(β)进行说明。</p><p><img src="https://img2018.cnblogs.com/blog/471426/201901/471426-20190102170650421-2108267838.png" alt="img" /></p><p>举个例子，标号为14的表决法令为α，多数派需要三个牧师，只有两个赞成的牧师。图1中对条件B3(β) 的描述如下：</p><ul><li>编号为2的表决是最早的表决，所以条件B3(β)是显然满足的</li><li>编号为5的表决中，四个参与者中没有任何一个在编号为2的表决中投过赞成票，所以也满足条件B3(β)</li><li>编号为14的表决中，只有∆在之前的表决中投了赞成票，所以表决14和表决2的法令必须是相同的，图1中2和14的表决的法令都必须是α</li><li>（这是一轮成功的表决）编号为27的表决中，之前投过赞成票的是Γ、∆，∆在表决2中投了赞成票，Γ在表决5中投了赞成票，所以表决27的法令必须和表决5的法令一致，即必须为β</li><li>编号为29的表决中，参与者是B、Γ、∆，B在表决14中投了赞成票，Γ在表决5、27中投了赞成票，∆在表决2、27中投了赞成票，所以表决29的法令必须和表决27的法令相同，即必须为β</li></ul><p>B1(β) -B3(β) 正式的表述需要更多的符号。我们定义v为一次投票，它包含3个部分：v<sub>pst</sub>表示牧师，v<sub>bal</sub>表示表决编号，已经表决的法令v<sub>dec</sub>。Paxon同样定义了v<sub>bal</sub>=-∞并且v<sub>dec</sub>=BLANK的投票为null。对于任何-∞&lt;b&lt;∞的表决编号b，不会以BLANK作为表决的法令。对于任意牧师p，他们也定义了null<sub>p</sub>作为牧师p的null投票。</p><p>Paxon的数学家定义了投票的全局顺序，对于任意的投票v和v’，如果v<sub>bal</sub>&lt;v<sub>bal</sub>’，那么v&lt;v’。但是没有定义v<sub>bal</sub>=v<sub>bal</sub>’的情况下v和v’的顺序关系。</p><p>对于任意的表决集合β，定义集合Votes(β)为所有满足如下条件的投票v的集合：对于任意的B∈β，v满足v<sub>pst</sub> ∈ B<sub>vot</sub>，v<sub>bal</sub> = B<sub>bal</sub>，并且v<sub>dec</sub> = B<sub>dec</sub>。如果p是一个牧师，b是一个表决编号或者±∞，那么Max(b,p,β)定义为β中由p投出的表决编号小于b的最大的投票v或者null<sub>p</sub>。 因为null<sub>p</sub>比所有p实际投出的票都要小，这就意味着MaxVote(b,p,β)是下面集合中的最大投票：</p><p><img src="https://img2018.cnblogs.com/blog/471426/201901/471426-20190102170712856-322018662.png" alt="img" /></p><p>对于任意非空的牧师集合Q，MaxVote(b,Q,β) 定义为Q中编号小于b的最大的投票。 于是，条件B1(β) - B3(β) 正式表述如下：</p><p><img src="https://img2018.cnblogs.com/blog/471426/201901/471426-20190102170734844-1933678891.png" alt="img" /></p><p><strong>定理1：</strong> <strong>如果β 中的表决 B 是成功的，那么β 中更大编号的表决和 B 的法令相同</strong></p><p><img src="https://img2018.cnblogs.com/blog/471426/201901/471426-20190102170745819-578869799.png" alt="img" /></p><p><strong>定理1的证明</strong></p><p>对于β中的任意表决B，有：</p><p><img src="https://img2018.cnblogs.com/blog/471426/201901/471426-20190102170758008-2050147064.png" alt="img" /></p><p>表示β中编号比B大并且法令不同的表决的集合。为了证明引理，只需要证明如果B<sub>qrm</sub>⊆B<sub>vot</sub>那么Ψ(B, β) 是一个空集合。</p><p>Paxos通过矛盾法证明引理。他们假设存在B<sub>qrm</sub>⊆B<sub>vot</sub>，并且Ψ(B, β) 不是一个空集合，那么显而易见的会得到如下的矛盾：</p><ol><li><p>C是Ψ(B, β) 中编号最小的那轮表决</p></li><li><p>由C的定义可知，C的编号一定大于B的编号，（因为Ψ(B, β)表示的是编号比B大的法令不同的表决集合）</p></li><li><p>根据B2(β)条件，B表决的投票牧师和C的表决的多数派一定会有交集</p></li><li><p>MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)表示C的多数派中编号小于C<sub>bal</sub>的最大的投票，因为C<sub>qrm</sub>和B的投票者一定有交集，所以MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)的编号一定大于等于B的编号</p></li><li><p>由4可知MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)一定产生了一次投票，所以MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)∈Votes(β)</p></li><li><p>根据B3(β)条件和上面的5可以得出MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)<sub>dec</sub>=C<sub>dec</sub>，即MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)的法令和C的是相同的</p></li><li><p>因为MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)的法令和C的是相同的，而C的法令和B不同，那么MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)的法令和B的法令不同</p></li><li><p>已知4，即MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)的编号一定大于等于B的编号，并且他们的法令是不同的（7的证明），假设他们的编号相等，那么法令一定是相同的（B1(β)的条件），所以为了满足7，4中的大于等于可以推导为一定是大于的，即MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)<sub>bal</sub>&gt;B<sub>bal</sub></p></li><li><p>由7、8和Ψ(B, β)的定义可以得出MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)∈Votes(Ψ(B, β))</p></li><li><p>由定义可知MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)一定是小于C<sub>bal</sub>的</p></li><li><p>这里产生了矛盾：</p></li><li><ol><li>9中得出了MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)∈Votes(Ψ(B, β))，那么Votes(Ψ(B, β))不能为空</li><li>10中得出了MaxVote(C<sub>bal</sub>,C<sub>qrm</sub>,β)一定是小于小于C<sub>bal</sub>的</li><li>而C<sub>bal</sub>又是Ψ(B, β)中的最小值，这是矛盾的</li></ol></li></ol><p>根据上面的引理，显而易见的，如果B1(β)-B3(β)成立，那么任何两个成功的表决，法令一定是相同的。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/G6xepZmzIMd2ibHjo6F6rldBOknD1Yyqa7vIXiabBmOnoKQh8kwhk76EBu6w4k5ia7eA5MBrRqdAvveiaGz9vPiaVcw/640?wx_fmt=png" alt="img" /></p><p>更直观的表述是，如果满足B1(β)-B3(β)，那么任意两轮成功的表决，都是对相同的法令的表决。</p><p><strong>定理2：令b为一个表决标号，Q为牧师的集合，对于β中的任意表决B，如果b和Q满足b&gt;B<sub>bal</sub>并且Q∩B<sub>qrm</sub>不为空，如果条件B1(β)、B2(β)、B3(β)都成立，那么存在一轮表决B’，B’<sub>bal</sub>=b同时B’<sub>qrm</sub>=B’<sub>vot</sub>=Q使得B1(β∪{B’})、B2(β∪{B’})、B3(β∪{B’})成立。</strong></p><p><strong>定理2的证明</strong></p><p>首先翻译一下定理2：一定存在编号更大的表决满足三个条件使协议运行下去。对于投票集合β，如果B1(β)、B2(β)、B3(β)都成立，那么在β之后一定能找到一次成功的投票B’使B1(β∪{B’})、B2(β∪{B’})、B3(β∪{B’})成立。</p><p>证明：</p><ol><li>因为B’<sub>bal</sub>=b，b&gt;B<sub>bal</sub>所以B’<sub>bal</sub>&gt;B<sub>bal</sub>成立，B1(β∪{B’})成立（条件1：每轮表决由唯一的编号）</li><li>Q∩B<sub>qrm</sub>不为空，B<sub>qrm</sub>=Q，所以B2(β∪{B’})成立（条件2：成功的两轮表决中多数派由交集）</li><li>如果MaxVote(b,Q,β)=-∞，那么B’<sub>dec</sub>可以是任意法令，否则令B’<sub>dec</sub>为MaxVote(b,Q,β)，B3(β∪{B’})成立。（条件3：对于 β 中每一轮表决B，如果B的法定人数集中的任何一个牧师在β中一个更小轮的表决中投过(赞成)票，那么B的法令与所有这些更小轮表决中最大那次表决法令相同。）</li></ol><p>（如果β只包含一轮投票，显然三个条件都能满足；如果β不知包含一轮投票，那么根据上面的理论，协议是可以进行下去的）</p><p><strong>2.2 The Preliminary Protocol（初步协议）</strong></p><p>Paxons根据条件B1(β)-B3(β)为true的要求得出了初步协议，其中β是已经完成或者正在进行的表决的集合。协议的定义指明了β集合如何变更，但是从未说明如何计算出β。Paxons认为β只为神灵所理解，永远不被凡人所知。</p><p>每次表决由一个牧师发起，他选择表决的编号、法令以及参与的法定人数。每一个法定人数中的牧师之后决定是否为表决投票。确定发起人如何选择编号、法令、和法定人数，以及牧师如何决定是否给表决投票的规则来源于保持B1(β)-B3(β)的需求。</p><p>为了保持条件B1能满足，每个表决都需要一个唯一的编号。通过记录之前的编号，牧师能非常容易的避免给两次表决使用相同的编号。为了避免不同的牧师采用相同的表决编号，表决编号需要被分区。显而易见的一个办法是将编号设置成一个二元组，由一个数字和一个牧师组成，按照字典序进行排序，如：(13, A) &lt; (13, B) &lt; (15, A)。</p><p>为了保持条件B2能满足，只需要保证每次表决的投票牧师能形成多数派（n/2 +1）。</p><p>条件B3要求，如果MaxVote(b,Q,β)<sub>dec</sub>不是BLANK，那么表决编号为b并且法定人数为Q的那次表决的法令必须为MaxVote(b,Q,β)<sub>dec</sub>。如果MaxVote(b,Q,β)<sub>dec</sub>是BLANK，则表决可以采用任何的法令。为了保持条件B3，在初始化表决（编号为b，法定人数为Q）前，牧师p必须知道MaxVote(b,Q,β)<sub>dec</sub>。为了完成这个操作，p需要知道Q中的每个牧师q的MaxVote(b,q,β)<sub>dec</sub>。</p><p>回想一下，MaxVote(b, q, β)表示的是牧师q投出的编号小于b的最大的选票，或者null，如果q没有给任何编号小于b的表决投过票。牧师p通过消息通信从牧师q那获取MaxVote(b, q, β)。因此，协议中发起单次表决的前两步是：</p><p>（1）牧师p选择一个表决编号b，并且发送NextBallot(b)请求给其他的牧师。</p><p>（2）牧师q将LastVote(b,v)响应给NextBallot(b)请求，v是q投出过的比b小的最大的表决的编号，或者是nullq，如果q没有给比b编号小的表决投过票</p><p>牧师q必须在他备忘录中记录他之前投出过的选票。</p><p>当q发出LastVote(b,v)的时候，v和MaxVote(b,q,β)是相等的，β会在新表决被初始化和投票时发生改变。一旦q采用v作为MaxVote(b,q,β)的值来选择法令，为了保持条件B3为真，在q发出LastVote(b,v)之后MaxVote(b,q,β)需要保持不变。为了避免MaxVote(b,q,β)发生改变，q不应该再给表决编号再v<sub>bal</sub>和b之间的表决投票。</p><p>协议的下两步是：</p><p>（3）在收到Q（Q是一个多数派集合）中的所有牧师的LastVote(b,v)之后，牧师p初始化一个编号为b，多数派为Q，法令为d的表决（d的选择满足条件B3），之后他在他律簿的背面记录这个表决并发送BeginBallot(b,d)消息给Q中的每个牧师。</p><p>（4）在收到BeginBallot(b,d)消息时，q决定是否在编号为b的表决中投票给p。如果q决定投票，那么他发送Voted(b,q)给p并在律簿背面记录这次投票。</p><p>步骤（3）可以理解为添加B到β集合，B满足B<sub>bal</sub>=b，B<sub>qrm</sub>=Q，Bvot=∅，B<sub>dec</sub>=d。在步骤（4）中，如果q决定投票，那么他的执行过程可以认为是将q添加到B<sub>vot</sub>中。</p><p>即使投票也不会违反任何先前的承诺，牧师也可以在步骤（4）中选择不投票。实际上协议中的所有步骤都是可选的（不是必须要执行），举个例子，牧师q可以在步骤（2）中无视NextBallot(b)请求。失败的情况可以阻止表决进行下去，但是并会引起任何不一致的问题。协议保证牧师离开或者信使丢失了消息的情况下，仍然不会出现不一致的情况。</p><p>收到重复的消息可以导致行为重复的执行。除了步骤（3）之外，其他步骤重复执行并不会有什么影响，比如在步骤（4）中，重复发送Voted(b,d)和发送一次的效果是一样的。步骤（3）的重复可以通过律簿背面记录的信息来解决。那么一致性条件会得到满足，即使信使重复的传递消息。</p><p>步骤（1）-（4）描述了初始化表决和为其投票的完整协议。剩下的就是决定投票结果和颁布法令。回忆一下，当一轮表决都到多数派的投票时，它是成功的。成功的表决的法令即是圣会选择的法令。协议剩余的内容是：</p><p>（5）如果p收到Q中所有的牧师的投票Vote(b,d)，那么他将法令d记录到律簿中并发送Success(d)消息给所有的牧师。</p><p>（6）当收到Success(d)消息时，牧师将其记录到自己的律簿中。</p><p>步骤（1）-（6）描述一轮独立的表决如何执行。初步协议允许任何牧师在任何时候发起一轮表决。每个步骤满足B1B2B3的条件，那么整个协议也满足这三个条件。一个牧师只会将成功的表决的法令记录到律簿中，这保证了律簿的一致性，但是并没有解决进展性的问题。</p><p>在步骤（3）中，法令d是要满足条件B3的，那么这个法令可能已经被记录到一些牧师的律簿中。那个牧师可能不在多数派中，他可能已经离开会议室。那么可能发生不一致的情况，如果在步骤（3）选择法令时给予更多的自由。</p><p><strong>2.3 The Basic Protocol（基础协议）</strong></p><p>在初始协议中，一个牧师必须记录（1）他所发起的所有表决的编号，（2）他所投出的所有选票，（3）每一个他发出的LastVote。对于繁忙的牧师们来说，记录所有这些信息是非常困难的。因此，Paxons对初步协议进行了限制，以获得更加实际的基础协议。在基础协议中，牧师只需要在他的律簿中记录：</p><p><em>lastTried[p]</em> 牧师p尝试启动的最后一轮表决的编号，或者-∞，如果他没有发起过表决</p><p><em>prevVote[p]</em> 牧师p所有投票的表决中，编号最大的投票，如果p没有进行过任何投票，那么为null<sub>p</sub>。</p><p><em>nextBal[p]</em> 由p发出的所有LastVote(b,v)中，最大的表决编号</p><p>初始协议的步骤（1）-（6）描述了如何通过牧师p进行一轮独立的表决。初始协议允许牧师p并发的发起任何数量的表决。而在基础协议中，他一次只能发起一个表决，编号为lastTried[p]。在发起这个表决后，他忽略所有和他之前发起的表决相关的信息。牧师p在纸片行记录lastTried[p]相关的所有信息，如果小纸片丢失，那么这轮表决就终止。</p><p>在初始协议中，牧师q发出LastVote(b,v)意味着不再为任何编号在v<sub>bal</sub>和b之间的表决进行投票。在基础协议中，他有了更强的承诺，不再给任何编号小于b的表决投票。更强的承诺可能让他在基础协议的步骤（4）中不进行投票，而相同的情况下他可能在初始协议中会进行投票。但是初始协议本身就允许q不进行投票，基础协议并没有要求他做任何违反初始协议的事情。</p><p>初始协议的步骤（1）-（6）在基础协议中演化成了如下六个步骤。</p><p>（1）牧师p选择一个大于lastTried[p]的表决编号b，之后将lastTried[p]设置为b，并发送NextBallot(b)请求给所有剩余的牧师。</p><p>（2）在收到p的NextBallot(b)请求时（b &gt; nextBal[q]），牧师q将nextBal[q]设置为b，并发送LastVote(b,v)给p，v等于prevVote[q]。（如果b &lt;= nextBal[q]，请求会被忽略）</p><p>（3）p在收到多数派Q的LastVote(b,v)，并且b=lastTried[p]，p启动一轮编号为b，多数派为Q，法令为d（d的选择满足条件B3）的表决。之后发送BeginBallot(b,d)消息给Q中所有的牧师。</p><p>（4）收到BeginBallot(b,d)，b=nextBal[q]的消息时，牧师q在编号b的表决给出他的投票，将prevVote[q]设置为他的投票，并发送Voted(b,q)给牧师p。（如果b≠nextBal[q]，BeginBallot(b,d)会被牧师q忽略）</p><p>（5）如果p从Q中的每个牧师q那里收到Voted(b,q)，b=lastTried[p]的消息，那么他将d记录到他的律簿中并发送Success(d)的消息给所有的牧师。</p><p>（6）收到Success(d)的消息后，牧师q将法令d记录到自己的律簿中。</p><p>基础协议是初始协议的限制版本，这意味着任何基础协议中被允许的行为，在初始协议中也是被允许的。因为初始协议满足一致性要求，那么基础协议一定满足一致性要求。和初始协议一样，基础协议也不要求任何操作必须要被执行（比如一定要进行投票，牧师可以在满足要求的情况下放弃投票），那么他也没有解决协议的可进展性问题。</p><p>基础协议满足条件B1B2B3显而易见的能推导出满足一致性要求，但是一些更“明显”的古代智慧被证明是错误的。持怀疑态度的公明要求更加严格的证明。Paxons的数学家更严谨的对协议的证明在附录中。</p><p><strong>2.4 The Complete Synod Protocol（完整的圣会协议）</strong></p><p>基础协议保持一致性，但是它并没有保证任何的可进展性，因为它只是允许牧师做一些操作，但是并没有要求牧师一定要做什么操作。完整协议和基础协议一样包含六个步骤。为了达到可进展的目的，完整协议包含更加显而易见的要求：牧师需要尽可能快的执行（2）-（6）的步骤。为了保持进展性的条件，必须有牧师牧师来执行步骤（1），即发起表决。完整协议的关键在与确定一个牧师上面时候发起一轮表决。</p><p>永远不发起表决显然会阻碍进展性。但是发起太多表决同样会阻碍进展性。如果b比任何其他的表决的编号都大，那么q在步骤（2）中接收NextBallot(b)消息将会使他在步骤（4）拒绝给之前的表决投票。因此，新启动的表决会阻碍之前的表决完成。如果新的表决在之前的表决成功之前被持续的发起，那么协议将不具备可进展性。</p><p>为了保证进展性，新的表决需要在其他表决成功后发起，但是也不能发起的太频繁。为了开发完整的协议，Paxons公民首先需要知道信使需要多少时间传递信息，牧师需要多长时间做出响应。他们确定信使在没有离开会议室的情况下需要4分钟的时间来传递消息，牧师在没有离开会议室的情况下都能在7分钟内完成需要的操作。因此，如果p和q始终没有离开会议室，p发起了一个事件发送消息给q，并且q做出一个响应给p，那么在没有信使离开会议室的情况下，p将在22分钟内收到q的响应（p发起事件需要7分钟，消息传递给q需要4分钟，q处理消息需要7分钟，消息再返回给p需要4分钟，总共22分钟）。</p><p>假设只有一个牧师p发起表决，并且他在步骤（1）中将消息发送给所有的其他牧师。如果p发起表决时，多数派牧师都在会议室中，那么他可以期望在22分钟内执行步骤（3），并且在下一个22分钟内执行（5）。如果他没能在这个时间内执行这些操作，那么一定是有牧师或者信使在他发起表决后离开了会议室，或者一个更大编号的表决被其他牧师提出（在p成为唯一的发起表决的牧师之前）。为了解决后面这个问题，p必须学习其他牧师使用的任何编号比lastTried[p]大的表决。可以通过拓展协议，要求：如果牧师q收到牧师p的b &lt; nextBal[q]的NextBallot(b)或者BeginBallot(b)消息，他响应给p一个包含nextBal[q]的消息。然后牧师p可以发起一个编号更大的表决。</p><p>依旧假设p是唯一一个可以发起表决的牧师，假设他想发起一轮表决，他需要（a）在之前的22分钟之内没有执行步骤或者（b）他知晓别的牧师发起了一个编号更大的表决。如果会议室的门被锁上（没有人会离开会议室），牧师p和大多数牧师都在会议室内，那么在99分钟内，一条法令会被通过并被记录在会议室内所有牧师的律簿上（22分钟用于p发起一次表决，22分钟用于发现一个更大编号的表决被其他牧师提出过，55分钟用于完成一轮成功的表决）。因此，进展性会得到满足，如果只有一个不会离开会议室的牧师发起表决。</p><p>完成的协议包含了一个选举唯一的发起表决的牧师的过程，这个牧师称为president（总统）。在多数形式的政府中，选举一个总统是困难的，因为大多数政府都要求在任何时刻只能有唯一的一个总统。比如在美国，如果一些人认为Bush已经被选为总统，而另一些人认为Dukakis才是总统就会造成混乱，因为其中某个总统可能会签署某个法令而另一个总统不赞成该法令。在Paxon圣会，拥有多个总统只是会阻碍可进展性，并不会引起不一致的情况。为了满足可进展性，选举唯一总统的方法只需要满足presidential selection requirement：</p><p><em>“如果没有人进出会议室，那么在T分钟之后，会议室中的牧师可以认为自己是总统。”</em></p><p>如果总统的选举条件被满足，那么完整的协议将保证，如果多数派牧师在会议室中且T+99分钟内没有人进入或离开会议室，在这样一个周期结束时，会议室中的每个牧师的律簿上都会增加一条法令。</p><p>Paxon公明按照牧师名字的字典序来选择成为总统的牧师。presidential selection requirement会被满足，如果牧师没T-11分钟发送一次包含他名字的消息给其他的牧师，如果他T分钟内没有收到更高级别的名字的消息，那么他认为自己是总统。</p><p>通过要求基础协议中的牧师快速的执行步骤（2）-（6），并且增加一个选举总统用于发起表决的方法，要求总统在合适的时机发起表决来得到完整的协议。更多的协议细节还不清楚，以上只是简单的描述了选举总统的办法和总统发起表决的时机。但显然这不是Paxons公民所使用的办法。我给出的规则要求在一个法令被选出后总统需要继续发起表决，以让刚进入会议室的牧师能知道被选中的法令。显然还有更好的办法让刚进入会议室的牧师学习被选中的法令。另外，在挑选总统时，每个牧师可以发送lastTried[p]给其他牧师，以便于总统在第一次发起表决时能选择一个足够大的表决编号。</p><p>Paxons的公民意识到，任何涉及到进展性的条件都需要测量时间的推移。在拥有精准计时器的前提下，上面描述的总统选举和表决的发起都可以通过超时的方式被描述为准确的算法。更详细的分析表明，这种算法可以在时间有精准性边界的情况下工作。Paxons上熟练的工匠可以造出满足精度要求的沙漏。</p><p><strong>3 TheMulti-Decree Parliament（多法令议会）</strong></p><p>当议会成立时，一个满足一致性和进展性要求的协议从圣会协议中演进而来。原始议会协议的演进和性质在3.1和3.2节中说明。3.3节讨论了协议的进一步发展。</p><p><strong>3.1 The Protocol (协议)</strong></p><p>代替只通过一条法令，Paxon议会一次通过一系列的法令。在圣会协议（Synod protocol）中，会选出一个总统。任何人想要通过一条法令，都需要通知总统，由它分配法令编号并发起表决。逻辑上讲，议会协议针对多个不同编号的法令使用多个独立的圣会协议实例。但是，会为所有的实例选择一个全局的总统，由他负责执行协议中的前两步（只执行一次）。</p><p>得出议会协议的关键是观察到在圣会协议中，总统直到步骤（3）才直到法令或者法令牧师集合。一个新选出的总统p可以给一些议员发送一条消息：所有圣会协议的实例都采用NextBallot(b)提供服务。一个议员q可以响应LastVote作为所有圣会协议的步骤（2）的结果。这个响应只包含有限的信息，q只能给有限的圣会协议实例投票。</p><p>当新总统收到多数派中所有议员的响应，他可以为每个圣会协议实例执行步骤（3）。对这些实例来说，他们的法令由条件B3来决定。总统快速的为每个实例执行步骤（3）来通过这些法令。无论何时他收到通过法令的请求，他都选择可以选择的最小的编号的法令并为它执行步骤（3）来尝试通过这条法令。</p><p>对这个协议进行简单的修改得到真正的Paxon议会协议：</p><p>没有理由为已经知道结果的法令在执行一次圣会协议。因此，如果一个新总统p被选出，在他的律簿上已经记录了所有编号小于等于n的法令，那么他给所有法令编号大于n的实例发送NextBallot(b,n)消息作为原先的NextBallot(b)消息。在这个消息的响应中，议员q将自己律簿中编号大于n的法令通知给p，并要求p将所有编号小于等于n的不再他自己律簿中的法令发送给他。</p><p>假设法令125和126在周五下午晚些时候引入，法令126被写入了一个或两个律簿，之后议员们都回家过周末了。假设下周一，A被选为新的总统并学习了126法令，但是他并不知道125法令，因为之前的总统和议员们都还没有回到会议室。他将举行一个表决使126通过，这使得在律簿上留下一个空洞。给新的法令分配125的编号会使得它出现在126法令之前，而126法令是上周就得到通过的。乱序的通过法令会产生混乱，比如，125法令是在议员知道126法令的内容对的情况下提出的。做为替代方案，总统一般尝试通过（125：二月是国家橄榄日）一个对每个Paxon公民都没有差别的法令（通过一个无关紧要的法令）。一般来说新总统都通过这样的方式来填充他律簿上的空洞。</p><p>一致性和可进展性直接从圣会协议继承而来。据我所知，Paxon公民可以写出一个更精准的协议描述，因为它只是非常简单的从圣会协议演进过来。</p><p><strong>3.2 Properties of the Protocol（协议的属性）</strong></p><p>3.2.1 <em>The Ordering of Decrees</em> 不同编号的表决可以并发的发生，由不同的议员发起——每个议员发起表决的时候都认为自己是总统。我们无法确定法令的顺序，在他们通过之前，特别在不知道总统如何选举出来的时候。但是，由一个顺序相关的重要属性是可以推导出来的。</p><p>当总统在圣会协议的步骤（3）中选择了一个法令，这个法令被称为是已提议的（proposed）。当一个法令第一次被写入到一个律簿中后，这个法令被认为是通过的（passed）。一个总统在提出任何法令之前，他需要从多数派的议员那里学习他们已经投过票的法令。任何被通过的法令都至少有一个属于多数派的议员为其投过票。因此，总统必然能在提出新的法令之前学习到所有之前通过的法令。总统不会使用非“二月是国家橄榄日”的法令来填补空洞，并且不会没有顺序的提出法令。因此协议满足以下的顺序属性：</p><p>如果法令A和B是重要的法令（非“二月是国家橄榄日”这样的法令），并且A在B被提议之前已经被通过，那么A比B拥有一个更小的编号。</p><p>3.3.2 <em>Behind Closed Doors</em> 尽管我们不知道选出一个总统的细节，但我们确切的知道当总统选出之后并且没有人进出会议室的情况下协议的进行。在收到一个通过某个法令的请求后——通过公民或者其他议员转发而来——总统为法令设定一个编号，然后通过下面的消息交换来通过它（序号和圣会协议的序号对应）：</p><p>（3）总统给多数派中的每一个议员发送BeginBallot消息</p><p>（4）议员发送Voted消息给总统</p><p>（5）总统发送Success消息给每个议员</p><p>假设议会有N个议员，多数派为N/2，那么这里有3个消息延迟和3N个消息。另外，如果议会繁忙，总统可以将BeginBallot和上一个法令的Success消息合并，这样每个法令就只有2N个消息了。</p><p><strong>3.3 Further Developments</strong></p><p>事实证明管理这个岛比Paxons公民想象的要复杂的多。出现了许多需要修改协议去解决的问题。重要的修改如下。</p><p>3.3.1 <em>Picking a President</em></p><p>议会总统的选举依旧采用了圣会协议中按照议员名字排序的方式。因此名字排序靠前的议员可能从一段6个月的休假中一回到会议室即成为了总统——他可能对之前发生的事情一无所知。碰巧他又是一个写字很慢的人，这样在他费力的补齐之前6个月的法令之前，议会所有活动都会停下来。</p><p>这个故事导致了总统选举的最佳方法的争论。一些人认为一旦一个医院成为总统，那么他需要一直是总统，直到他离开会议室。一些有影响力的人认为应该选择最富有的议员来当总统，因为他有能力雇佣更多的帮手来履行总统的职责。他们主张一旦一个富有的议员的律簿更新到了最新的内容，他没有理由不承担总统的职责。其他一些人主张让正直的人担任总统，而不是最富有的议员。正直意味着不会不诚实，尽管Paxon公开承认没有官方渎职的可能。不幸的是，这些争论的最终产出还不知道；没有最终关于总统选举方法的记录。</p><p>3.3.2 <em>Long Ledgers</em></p><p>随着时间一年年的过去，议会通过了越来越多的法令，为了找到当前的橄榄油税率或者什么颜色的山羊可以出售，Paxons需要翻阅长长的律簿。长途旅行回来后的议员需要复制一系列的数据来使他的律簿更新到最新的法令。最终，议员们不得不将他们的律簿转换为法律书籍，这些书籍只包含当前法律状态和最后一条通过的，反映当前状态的法令的编号。</p><p>需要知道橄榄油的税率，只需要翻阅书籍中税率相关的内容；需要知道可以售卖的山羊的颜色，只需要查看商品相关的法律。如果一个议员的律簿包含了知道1298的法令，然后他学习到1299法令将橄榄油的税率调整为6银币，他只修改书籍中橄榄油相关的条目，并记录他的律簿已经包含到1299的法令。如果他之后学习到1302法令，他将其记录在律簿背面，直到他学习到1300和1301法令，然后将他们合并记录到律簿中。</p><p>为了让短暂离开的议员不用拷贝整本书的内容而保持最新的状态，议员们在书的背面记录过去几周的法令。他们可以在纸片中记录这些内容，但是在律簿的背面记录会更加方便一些，因为他们两三个星期才通过一条法令并更新律簿。</p><p>3.3.3 <em>Bureaucrats</em></p><p>随着Paxon的兴盛，议员们变得非常繁忙。议会无法再处理所有政府的细节，因此官僚制度被建立。议会不再通过法令决定每块奶酪是否符合销售要求，而是通过议会通过一条法令指定给一个奶酪质检员来做这个事情。</p><p>显而易见，选举官员并不像起初看起来的那么简单。议会通过了小王成为第一个奶酪质检员。几个月后商家抱怨小王太严格了，拒绝了完美的奶酪。议会接着通过了：</p><p>1375：小李成为新的奶酪质检员</p><p>但是小王并没有关注议会的工作，他并不知道这条法令。那么有一段时间，在奶酪超时，小王和小李都对奶酪进行检查，并可能给出冲突的结论。</p><p>为了避免这种混乱的情况，Paxon需要保证任何时刻最多只能有一个官员。为了达到这个目的，总统在提议法令时，为每个法令加入了日期和时间。小王成为奶酪检查员的法令看起来是这样的：</p><p>2716：8:30 15 Jan 72-未来三个月，由小王作为奶酪检查员</p><p>这就定义了小王的任职从72年1月15日早上8点30开始，前一个检查员的任期到这个时间结束。小王的任期将到72年3月15日早上8点30结束，除非总统通过一条法令：</p><p>2834：9:15 3 Mar 72-小王辞去奶酪检查员的职务</p><p>一个官员采用较短的任期，这样可以被快速的替换，例如他离开了小岛。一会可以通过一个法令来延长官员的任期，如果他非常的称职。</p><p>一个官员需要知道当前的时间，以确定他是否还在某个职位上。Paxon上还没有机械钟表，但是他们可以通过太阳和星星的位置确定误差在15分钟内的时间。如果小王的任期从8:30开始，那么在8:45之后他将不再负责检查奶酪。</p><p>很容易将这种方法在官员任命的法令中使用，只需要使更大的编号的法令推迟15分钟。但如果有以下两条法令：</p><p>2854：9:45 9 Apr 78-小王作为白酒测试员两个月</p><p>2855：9:20 9 Apr 78-小李作为白酒测试员1个月</p><p>如果这两条法令在9:30和9:35被不同的，认为自己是总统的议员提出，会发生什么？这种提议时间顺序颠倒的情况可以很容易避免，因为议会协议满足如下特性：</p><p><em>如果两个法令由不同的总统提出，那么其中一个总统必须先学习另一个法令后才会提出他的法令</em></p><p>我们来看看这个特性是否满足要求。假设表决 b 通过了法令 D，表决 b1 通过了法令 D1，b&lt;b1，假设议员 q 在两个表决中都投了票。法令 D1 的表决以一个 NextBallot(b1,n)消息开始。如果这个消息的发送者还不知道法令 D，那么 n 比法令 D 的编号要小，从而 q 对 NextBallot 消息的答复必须说明他已经对 D 投了票。</p><p>3.3.4 <em>Learning the Law</em></p><p>除了请求通过法令之外，Paxon上的公民还需要获知岛上的法律。Paxon上起初认为可以让公民简单的查阅任何议员的律簿，但是下面的故事显示出需要更严格的方法来查询法律。几个世纪以来，只有出售白色的山羊是合法的。农民老杨让议会通过了一条法令：</p><p>77：售卖黑色山羊是被允许的</p><p>之后老杨将他的一些黑色山羊卖给了商人老吕。作为守法的公民，老吕向议员老秦寻味这样是否是合法的。但是老秦这段时间并没有在议会，他律簿上没有76号之后的法令。他告知老吕这比买卖在当前法律之下是非法的，然后老吕决绝了老杨的这比交易。</p><p>这个故事导致法律查询上的如下单调一致性的条件建立：</p><p><em>如果一个查询先于第二个查询，那么第二个查询的法律状态不能比第一个查询的法律状态更旧</em></p><p>如果一个公民得知一个特定的法令通过了，那么得知这一信息的过程被认为是遵循这个条件的隐含查询。我们将会看到，对单调性条件的解释在若干年后发生了变化。</p><p>刚开始，单调性查询由为每一个查询通过一条法令来达成。如果老吕想知道当前的橄榄油税率，他将让议会通过这样一条法令：</p><p>87：公民老吕在阅读法律</p><p>然后他阅读任何一个包含到86法令的律簿，来得知当时的橄榄油税率。如果之后老蒋想查询橄榄油税率，这个查询法令在87法令之后被提议，那么他会接收一个比87更大的法令编号（3.2.1节中说明过），因此老蒋不会比老吕使用更早的橄榄油税率法令。</p><p>如果“先于”的含义是必须保证A查询在B查询开始之前已经完成，那么这种阅读法律的方法满足单调性条件。</p><p>为每一次查询法律通过一个法令被证明太笨重了。Paxon的人们意识到，如果改变“先于”的含义而弱化单调性条件，那么可以通过更简单的方法来查询法律。他们定义一个事务先于另一个事务，不仅是一个事务在发生时间上更早，而且是影响第二个事务的条件。弱化的单调性条件可以组织农民老杨和商人老吕遇到的问题，因为老杨的查询结束和老吕的查询开始之间有一个因果链的关系。</p><p>弱化的单调条件可以通过在所有的事务和查询中使用法令编号来满足。例如农民老杨有一些非白色的山羊，他到议会去通过法令：</p><p>277：允许售卖棕色的山羊</p><p>当他把山羊卖给商人老吕的时候，他告知老吕交易在法令277下是合法的。之后老吕向议员老秦咨询在277法令下这比交易是否是合法的。老秦因为律簿上还没有277法令，那么他等待学习277法令或者告知老吕让他去问其他议员。如果议员老秦的律簿上法令已经到298号，那么他将告诉老吕直到298号法令，这比交易都是合法的。老吕会记录这个编号，以便在后续的交易和查询中使用。</p><p>这个方式满足了单调性条件，但是普通的公民并不喜欢去记法令编号。Paxons再一次通过解释单调性条件来解决这个问题——这一次通过改变“法令的状态”的含义。他们将法律区分为不同的领域，并未每个领域指定议员作为专家。每个领域的法律的状态有专家的律簿决定。 例如，假设1517号法令改变了关税法，第1518号法令改变了赋税法。 如果赋税法专家在关税法专家了解到这两个法令之前就已经了解了这两个法令，那么税法将首先发生变化，从而产生一种法律状态，这种法律是通过以数字顺序颁布法令而无法获得的。</p><p>为了避免对当前状态的定义的冲突，Paxons要求每一个领域都只能有一个专家，可以通过使用和3.3.3节选择官员一样的方法来选择专家。如果每次查询只涉及到一个领域，单调性条件可以通过将查询重定向到该领域的专家来保证，由该领域的专家根据自己的律簿来给出响应。由于了解法律已经过去构成了隐含的查询结果，因此Paxons要求法令最多改变一个法律领域，并且法令通过的通知只能来自该领域的专家。</p><p>查询多个领域的法律并不是难以解决的。当商人老吕查询进口羊毛的关税是否比本地羊毛的交易税高时，赋税专家和关税专家需要协同来给出回答。例如，赋税专家可以先询问关税专家关于羊毛的关税，直到他收到回复前不作出响应。</p><p>这种方法被证明是令人满意的，直到有必要一次修改多个领域的法律。然后Paxons意识到，维护单调性的必要条件不是一条法令只影响一个领域，而是他影响的所有领域拥有相同的专家。议会可以通过指定一个议员为所有领域的法律的专家，然后通过一条法令来改变多个领域的法律。更进一步，同一个领域可以有多个专家，只要这个领域的法律不允许修改。</p><p>3.3.5 <em>Dishonest Legislators and Honest Mistakes</em></p><p>和官方断言相反，Paxon历史上有一些不诚实的议员。被抓时他们可能被流放。通过发送矛盾的消息，一个恶意的议员可以使其他的议员的律簿发生不一致的情况。诚实的议员和信使也可能因为记忆的问题导致律簿的不一致。</p><p>当不一致被发现时，可以很容易的通过新的法令来修复。例如橄榄油税赋不一致，可以通过一个新的法令定义橄榄油的税赋为一个确定的值来消除。修复不一致的困难点在于可能没人发现律簿不一致的情况。</p><p>立法者存在不诚实或错误，可以从议会成立几年后开始出现在律簿中的多余法令推断出来。 例如，法令：</p><p>2605：橄榄油的赋税为9个银币</p><p>即使已经通过2155法令通过了，并且之后并没有法令去修改它。议会看起来没六个月循环的过一遍他们的法律，这样即使开始时有一些律簿不一致，议员们也会在6个月内对岛上的法律达成一致。Paxos 人相信通过这些冗余 法令的使用，可以使他们的议会自稳定（self-stabilizing）。（self-stabilizing 是 Dijkstra 于 1974 年提出的一个现代术语）</p><p>在议会允许随意进出的情况下，尚不清楚自稳定的确切含义。Paxons不会满足于一个要求所有议员在某个时间都坐到会议室来保证一致性的定义。无论如何，一致性要求当一个议员的律簿中有确定编号的某个法令，而另一个议员没有时，后者最终会填入这个条目。</p><p>很不幸的，我们没有确切地知道Paxos议会运转的自稳定性是哪一种，或者它是怎样达到的。 Paxos 的数学家毫无疑问解决了这个问题，但是他们的工作还没有被发现。我希望 Paxos 的 进一步考古发掘会在寻找自稳定性的手稿方面给予更高的优先级。</p><p>3.3.6 <em>Choosing New Legislators</em></p><p>早期，议会成员是世袭的，由上一代传给下一代。当最早的政治家老吴退休后，他把律簿交给了他的儿子。其他和老吴共事的议员也没有什么不同。</p><p>随着旧家族的移民和新家族的加入，这种情况发生了改变。Paxons决定通过议会的法令来添加和移除议员。这暴露了一个循环的问题：议会的成员由法令的通过决定，而法令的通过又需要确定一个多数的议员集合由哪些成员组成，而这又反过来依赖于谁是议会的成员。让通过法令 n 的议员由法令 n-3 时法律确定的成员来组成可以打破这个循环 。总统 在知道直到 3252 的所有法令之前，不会去通过法令 3255。事实上，通过法令：</p><p>3252：小陈现在是一个议员</p><p>之后，总统可以立即通过 3253 和 3254 这样的“橄榄节”法令。</p><p>以这种方式改变议会的组成是危险的，必须小心谨慎，虽然一致性和进展性可以保持。但是进展性需要在多数派议员在会议室内才能得到保证，而它并不保证多数派的议员都在会议室中。事实上，这种选择议员的机制可能使Paxon议会机制崩溃。由于抄写员的错误，一项应该尊重沉没在沉船中的水手的法令宣布他们是议会的唯一成员。它的通过阻止了任何新的法令通过——包括提出的纠正错误的法令。Paxos 政府就这样停止运转了。一个叫 Λαμπσων 的将军趁着这个混乱时期发动了兵变，建立了一个军事独裁政权，结束了发展了几个世纪的议会政权。Paxos在几任腐败堕落的独裁者统治下变得衰弱。终于不能抵挡一次来自东方的入侵，他们的文明也在这次异族入侵下毁灭了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue系列(一)---项目创建和配置</title>
      <link href="/2025/06/19/web/Vue%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/06/19/web/Vue%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>现在开始搭建前端项目, 其中会使用<code>node</code>, <code>pnpm</code>, <code>vite</code>, <code>typescript</code>, <code>vue</code>等</p><p>本篇默认已经安装<code>node</code>, 并配置好了<code>pnpm</code></p><h3 id="创建项目"><a class="markdownIt-Anchor" href="#创建项目"></a> 创建项目</h3><p>使用<code>pnpm</code>命令创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create vite</span><br></pre></td></tr></table></figure><p>填写项目名称, 框架选择<code>Vue</code>, 支持选择<code>TypeScript</code></p><p><img src="%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="创建项目" /></p><p>执行相关命令, 下载依赖</p><p><img src="%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="目录结构" /></p><h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3><h4 id="依赖配置"><a class="markdownIt-Anchor" href="#依赖配置"></a> 依赖配置</h4><p>添加<code>@type/node</code>依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add @type/node --save-dev</span><br></pre></td></tr></table></figure><h4 id="项目配置"><a class="markdownIt-Anchor" href="#项目配置"></a> 项目配置</h4><ol><li><p><code>tsconfig.json</code></p><p>添加<code>complierOptions.types</code>配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;complierOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;vite/client&quot;</span><span class="punctuation">,</span> <span class="string">&quot;node&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>vite.config.ts</code></p><p>添加项目配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">  <span class="comment">// 服务配置</span></span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8000</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// 扩展名忽略</span></span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">    <span class="comment">// 别名配置</span></span><br><span class="line">    <span class="attr">alias</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">find</span>: <span class="string">&#x27;@&#x27;</span>,</span><br><span class="line">        <span class="attr">replacement</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">find</span>: <span class="string">&#x27;@views&#x27;</span>,</span><br><span class="line">        <span class="attr">replacement</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/views&#x27;</span>)</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">find</span>: <span class="string">&#x27;@components&#x27;</span>,</span><br><span class="line">        <span class="attr">replacement</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/components&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">outDir</span>: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>环境配置</p><ul><li><p>配置环境导入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ... 其他配置</span></span><br><span class="line">  <span class="attr">envDir</span>: <span class="string">&#x27;config/env&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在项目的根目录下创建<code>config/env</code>目录, 在该目录中创建环境配置文件</p></li><li><p>环境文件配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV = development</span><br><span class="line">VITE_HELLO = hello</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是, 在环境配置中分为两部分, 一部分是默认的不可修改的配置, 另一部分是自定义配置</p><ol><li>默认配置: <code>BASE_URL</code>, <code>MODE</code>, <code>DEV</code>, <code>PROD</code>, <code>SSR</code>. 此部分是不可修改的默认配置, 跟项目启动或者构建的环境模式有关</li><li>自定义配置: 在<code>vite</code>中, 自定义配置必须以<code>VITE_</code>开头, 否则无法添加到环境配置中. 其中<code>NODE_ENV</code>比较特殊, 可以直接定义, 但是在环境变量中会被重命名为<code>VITE_USER_NODE_ENV</code>, 这本质上不会影响<code>node</code>的<code>NODE_ENV</code>, 如果想要修改<code>NODE_ENV</code>, 则需要在启动命令行中定义(参考: <a href="https://cn.vitejs.dev/guide/env-and-mode/#node-env-and-modes">https://cn.vitejs.dev/guide/env-and-mode/#node-env-and-modes</a>)</li></ol></blockquote></li><li><p>环境配置信息使用</p><ol><li><p>在项目的<code>vite.config.ts</code>配置文件中, 与<code>webpack</code>一样, 直接通过<code>process.env.</code>使用即可</p></li><li><p>在项目的资源文件中, 通过<code>import.meta.env.</code>使用</p><p>参考文档: <a href="https://cn.vitejs.dev/guide/env-and-mode.html">https://cn.vitejs.dev/guide/env-and-mode.html</a></p></li></ol></li></ul></li></ol><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题😭</h3><p><i id="问题一">问题一</i></p><p>问题: 下载<code>@type/node</code>依赖时出现<code>404</code></p><p>问题原因: 1. 可能是镜像源导致的; 2. 可能是使用<code>ssl</code>导致的</p><p>解决方案: 1. 可以切换到官方的镜像源尝试; 2. 可以关闭<code>ssl</code>方式 <code>npm config set strict-ssl false</code></p><p><i id="问题二">问题二</i></p><p>问题: 解析不到<code>resolver</code>函数和<code>__dirname</code>变量</p><p>问题原因: 没有添加<code>node</code>依赖</p><p>解决方案: 添加<code>@type/node</code>依赖, 并引入<code>import &#123;resolve&#125; from 'path'</code></p><p><i id="问题三">问题三</i></p><p>问题: 在使用<code>@</code>别名后引入<code>vue</code>组件时, 会报错提示找不到组件</p><p>问题原因: 因为<code>ts</code>只能解析<code>.ts</code>文件，无法解析<code>.vue</code>文件</p><p>解决方案: 在<code>vite-env.d.ts</code>中添加如下代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案一: 添加主体</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">import</span> &#123; <span class="title class_">DefineComponent</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">component</span>: <span class="title class_">DefineComponent</span>&lt;&#123;&#125;, &#123;&#125;, <span class="built_in">any</span>&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> component</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方案二: 不添加主体</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.vue&#x27;</span>;</span><br></pre></td></tr></table></figure><p>导入时, 添加<code>.vue</code>后缀</p><p>其实即使不添加也可以正常运行, 只是报错提示有些烦人</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pnpm </tag>
            
            <tag> vue </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper系列(一)---原理</title>
      <link href="/2024/05/28/zookeeper/Zookeeper%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%8E%9F%E7%90%86/"/>
      <url>/2024/05/28/zookeeper/Zookeeper%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p><code>zookeeper</code>开篇原本是想直接讲述安装和使用的, 但在介绍为啥要使用<code>zookeeper</code>时, 总是绕不过它的起源. 自此也就需要这样一篇博文来讲述一下<code>zookeeper</code>的前世.</p><p><mark>如果不想了解原理, 只是学习使用, 大可跳过本篇文章</mark></p><h3 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h3><p>随着业务需求量的逐步增长, 单体服务已经无法支撑整个系统, 此时就从<strong>单节点的集中式架构</strong>向<strong>多节点的分布式架构</strong>转型. 分布式机构能解决集中式架构中心化带来单点故障的问题，但同时也引入了一致性的问题. 通常说的一致性问题大多数人的第一印象是数据一致性, 但此处的一致性用状态的一致性来描述更为合理, 只不过状态通常通过数据来体现. <code>Paxos</code>算法是一种<strong>通用性分布式一致性协议</strong></p><p>其中的<strong>拜占庭问题</strong>可以参考文章: <a href="https://juejin.cn/post/7065309063432634382">分布式一致性：你真的读懂了Paxos小岛的故事嘛？</a></p><h3 id="paxos算法"><a class="markdownIt-Anchor" href="#paxos算法"></a> <code>Paxos</code>算法</h3><p><code>Lamport</code>老爷子提出了实现分布式一致性的解决方案, 并使用<code>paxos</code>小岛的方式进行了具象化描述, 当我去阅读网上的文章的解析文章的时候, 我疯了, 好似不同的人理解出了不一样的版本. 我只得去寻找原文: <a href="The Part-Time Parliament en.pdf">The Part-Time Parliament en.pdf</a></p><p>相信对各位大佬来说简直小菜, 我个人英语水平不行, 我看中文译文版: <a href="The Part-Time Parliament CN.pdf">The Part-Time Parliament CN.pdf</a></p><h5 id="阶段一-单一法令圣会the-single-decree-synod"><a class="markdownIt-Anchor" href="#阶段一-单一法令圣会the-single-decree-synod"></a> 阶段一: 单一法令圣会(The Single-Decree Synod)</h5><p>阶段一中有以下要点:</p><ol><li>通过一系列有编号的选票来表决, 一张选票是对单一的一个法令的表决</li><li>在一轮表决中, 牧师只能选择投票或不投票</li><li>和表决相关的是一群牧师的集合, 称法定人数(参与人数)</li><li>一轮表决是否成功只取决于法定人数的牧师给该法令投票(投票人数)</li></ol><p>一轮表决包含四个部分(一轮表决以<code>B</code>表示):</p><ol><li>B<sub>dec</sub> : 被表决的一条法令</li><li>B<sub>qrm</sub> : 非空的牧师集合, 表决的法定人数集, 一般指多数派</li><li>B<sub>vot</sub> : 投票给该法令的牧师集合</li><li>B<sub>bal</sub> : 选票序号</li></ol><p>一轮表决成功条件:</p><p>​1. 当且仅当B<sub>qrm</sub> ⊆ B<sub>vot</sub></p>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud系列(九)---阶段总结</title>
      <link href="/2024/05/11/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%9D%E4%B9%8B%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
      <url>/2024/05/11/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%9D%E4%B9%8B%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>本篇是写在全局事务篇之前, 前面讲述了<code>SpringCloud</code>的一些搭建内容, 现在要对分布式系统做一些描述或者说前面内容的补充, 按照逻辑来说, 本篇讲述在分类开始之前比较合适, 但是…反正…(绝不承认我忽略了)</p><h3 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h3><p>首先为什么使用分布式 ? 一句话概述就是单个单体服务的吞吐量不足以支撑系统的正常使用</p><p>实际上每个项目的起步阶段绝大多数都是单体项目, 在项目之初就以分布式的方式设计的项目少之又少, 因为项目初始阶段的业务内容比较少, 处理量少, 单体应用即可解决, 不需要使用分布式的方式</p><p><img src="%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8.png" alt="单体应用" /></p><p>随着项目的逐渐成熟, 客户量和业务量增加, 项目的压力增加, 单体应用难以支撑庞大的请求量, 系统就会出现问题, 此时就开始引入分布式</p><p>阶段一: 分布式的初始阶段并不是按照服务来划分的, 这通常成为第一阶段, 这一阶段通常是通过增加单体服务的数量来解决的, 即原本一个单体应用难以维持的压力, 现在增加两台应用, 将原本的压力分成三份, 通过这种方式维持运行</p><p><img src="%E5%A4%9A%E4%B8%AA%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8.png" alt="单体应用" /></p><blockquote><p>其实市面上除了少数庞然大物外, 大多数需要走分布式的企业正处在上述阶段, 特别是一些国企</p><p><font style="color: red">上图中的每个服务都是一台完整的单体应用</font></p></blockquote><p>阶段二: 分布式的发展阶段是开始按照服务来拆分, 即开始走微服务路线, 此时拆分的划分会比较粗略, 比如会将一整个关联性比较强的功能全部拆分成一个服务, 每个服务都添加多个, 构成一个单一服务的服务组, 通过服务间的调用实现整个业务逻辑. 每个请求的流程实质上是服务间的调用流程</p><p><img src="%E5%BE%AE%E6%9C%8D%E5%8A%A1.png" alt="单体应用" /></p><p>阶段三: 分布式的最终阶段在设计上与阶段二没有分别, 只是服务的拆分更加合理, 服务的数量和分布按照实际的使用情况进行合理拆分, 比如在多个请求流程中都用到了某个服务, 则该服务的数量应该多于其他相关的服务, 这个数量应该是在系统的实际应用中进行统计, 得到的合理数值</p><blockquote><p>如:</p><p>请求一: 服务一 —&gt; 服务二 —&gt; 服务三</p><p>请求二: 服务四 —&gt; 服务二 —&gt; 服务五</p><p>假设两个请求的请求数一致, 则在系统中, 服务二的数量与其他服务的数量可能不一致(这个数量与这个服务工作的吞吐量有关)</p></blockquote><h3 id="需要解决的问题"><a class="markdownIt-Anchor" href="#需要解决的问题"></a> 需要解决的问题</h3><h4 id="一致性问题"><a class="markdownIt-Anchor" href="#一致性问题"></a> 一致性问题</h4><h4 id="session共享问题"><a class="markdownIt-Anchor" href="#session共享问题"></a> <code>Session</code>共享问题</h4>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper系列(二)---安装配置</title>
      <link href="/2024/05/10/zookeeper/Zookeeper%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/05/10/zookeeper/Zookeeper%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<!-- toc -->]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL系列(三)---索引</title>
      <link href="/2024/04/29/mysql/MySQL%E7%B3%BB%E5%88%97%E4%B8%89%E4%B9%8B%E7%B4%A2%E5%BC%95/"/>
      <url>/2024/04/29/mysql/MySQL%E7%B3%BB%E5%88%97%E4%B8%89%E4%B9%8B%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>前面我们大致了解了<code>DML</code>和<code>DQL</code>, 与这两种类型的语言关系比较大的内容有一个索引, 索引的目的是在数据量比较大时, 提高查询的效率. 索引的有多种类型, 如主键索引, 外键索引, 唯一索引, 非<code>NULL</code>索引, 普通索引</p><p><code>MySQL</code>中的索引使用的是<code>B+</code>树结构, <code>B+</code>树的结构中, 只有叶子结点才会存储数据, 这样在查询过程中, 在找到具体数据之前, 是不需要加载数据的全部内容到内存的, 只需要将索引内容加载到内存即可, 提高效率</p><p>索引应建立在区分度比较大的列上</p><p>过滤因子描述了谓词(ON或者WHERE)的选择性, 即表中满足谓词条件的记录行数所占的比例, 它主要依赖于列值的分布情况</p><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3><h3 id="挖坑"><a class="markdownIt-Anchor" href="#挖坑"></a> 挖坑</h3>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL, SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL系列(二)---SQL</title>
      <link href="/2024/02/26/mysql/MySQL%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8BSQL/"/>
      <url>/2024/02/26/mysql/MySQL%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8BSQL/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p><code>MySQL</code>是常用的数据库, 市场占有率很高, 我们可以通过<code>MySQL</code>来学习<code>SQL</code>的通俗标准, 当遇到其他数据库时, 只需要知道数据库之间的差异性即可.</p><p>前篇已经讲解了如何安装<code>MySQL</code>, 本篇来介绍<code>SQL</code>基础, 本篇是基于用户对<code>MySQL</code>有一定的认识, 比如<code>MySQL</code>的数据类型.<code>SQL</code>分为<code>DDL</code>,<code>DML</code>,<code>DQL</code>,<code>DCL</code>, 本篇主要是介绍<code>DML</code>和<code>DQL</code>.</p><p>本篇学习比较好的视频教程可参考(个人认为是感官最好的, 详细(啰嗦)有干货):</p><p><a href="https://edu.csdn.net/course/detail/24472">https://edu.csdn.net/course/detail/24472</a></p><p>其他的内容不做介绍, 若学习可参考:</p><p><a href="https://www.w3schools.cn/mysql/default.html">https://www.w3schools.cn/mysql/default.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/391552199">https://zhuanlan.zhihu.com/p/391552199</a></p><p>表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 用户表</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(64) COLLATE utf8mb4_general_ci DEFAULT NULL,</span><br><span class="line">  `sex` char(1) COLLATE utf8mb4_general_ci DEFAULT NULL,</span><br><span class="line">  `age` int DEFAULT NULL,</span><br><span class="line">  `role_ids` varchar(32) COLLATE utf8mb4_general_ci DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 角色表</span><br><span class="line">CREATE TABLE `role` (</span><br><span class="line">  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(64) COLLATE utf8mb4_general_ci DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><h3 id="增"><a class="markdownIt-Anchor" href="#增"></a> 增</h3><p>新增操作(<code>INSERT</code>)是一种<code>DML</code>操作, 用来新增一条或者多条记录</p><p>新增操作的语法结构:</p><h4 id="常用结构"><a class="markdownIt-Anchor" href="#常用结构"></a> 常用结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span></span><br><span class="line">table_name(column1, column2,...)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(c1_value1, c2_value1,...),</span><br><span class="line">(c1_value2, c2_value2,...),</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>常用结构可以用于新增一条记录或者多条记录, 新增多条记录时, 通常批量新增比单条循环新增效率要高, 但也不宜数量过大, 这反而会影响效率, 应使用合适的数量进行循环的批量新增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `user` (`id`, `name`, `sex`, `age`, `role_ids`) VALUES (1, &#x27;xiao-lin&#x27;, &#x27;1&#x27;, 18, &#x27;1,3&#x27;), (2, &#x27;xiao_lin&#x27;, &#x27;2&#x27;, 18, &#x27;1,3&#x27;);</span><br><span class="line"></span><br><span class="line">INSERT INTO `role` (`id`, `name`) VALUES (1, &#x27;first&#x27;), (2, &#x27;second&#x27;), (3, &#x27;third&#x27;);</span><br></pre></td></tr></table></figure><h4 id="替换结构"><a class="markdownIt-Anchor" href="#替换结构"></a> 替换结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REPLACE INTO</span><br><span class="line">table_name(id, column2,...)</span><br><span class="line">VALUES</span><br><span class="line">(id_value1, c2_value1,...),</span><br><span class="line">(id_value2, c2_value2,...),</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>当插入的数据已经存在时(<mark>通过主键判断</mark>), 则删除原记录并添加新记录, 如果不存在则直接添加新记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE INTO `role` (`id`, `name`) VALUES (1, &#x27;first&#x27;), (2, &#x27;second&#x27;), (3, &#x27;third&#x27;), (4, &#x27;fourth&#x27;);</span><br></pre></td></tr></table></figure><p><img src="REPLACE_INTO%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="REPLACE_INTO执行结果" /></p><h4 id="忽略结构"><a class="markdownIt-Anchor" href="#忽略结构"></a> 忽略结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT IGNORE INTO</span><br><span class="line">table_name(column1, column2,...)</span><br><span class="line">VALUES</span><br><span class="line">(id_value1, c2_value1,...),</span><br><span class="line">(id_value2, c2_value2,...),</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>当插入的数据已经存在时(<mark>通过主键判断</mark>), 则忽略该记录, 如果不存在则添加新记录</p><p><img src="INSERT_INGORE%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="INSERT_INGORE执行结果" /></p><h4 id="迁移结构"><a class="markdownIt-Anchor" href="#迁移结构"></a> 迁移结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO</span><br><span class="line">table_name(column1, column2,...)</span><br><span class="line">SELECT</span><br><span class="line">c1_value1, c2_value1,...</span><br><span class="line">FROM </span><br><span class="line">source_table_name</span><br></pre></td></tr></table></figure><p>新增的数据可直接通过查询得到, 此处的查询是简单表示, 详细的查询可在查询模块中学习.</p><p>在使用此结构时需要注意, <mark>此结构中的<code>SELECT</code>是支持<code>UNION</code>操作结果的, 也可以将<code>UNION</code>结果作为一个临时表, 外套一个<code>SELECT</code>使用</mark></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user_union_copy( name, role_ids)</span><br><span class="line">SELECT name, role_ids</span><br><span class="line">FROM user</span><br></pre></td></tr></table></figure><p><img src="%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB.png" alt="数据迁移" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user_union_copy( name, role_ids)</span><br><span class="line">SELECT name, role_ids</span><br><span class="line">FROM user</span><br><span class="line">UNION ALL </span><br><span class="line">SELECT name, role_ids</span><br><span class="line">FROM user_copy;</span><br></pre></td></tr></table></figure><p><img src="%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB-UNION.png" alt="数据迁移-UNION" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user_union_copy( name, role_ids)</span><br><span class="line">SELECT name, role_ids </span><br><span class="line">FROM (</span><br><span class="line">SELECT name, role_ids</span><br><span class="line">FROM user</span><br><span class="line">UNION ALL </span><br><span class="line">SELECT name, role_ids</span><br><span class="line">FROM user_copy</span><br><span class="line">) AS temp;</span><br></pre></td></tr></table></figure><p><img src="%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB-UNION_SELECT.png" alt="数据迁移-UNION_SELECT" /></p><h3 id="删"><a class="markdownIt-Anchor" href="#删"></a> 删</h3><p>删除操作(<code>DELETE</code>)是一种<code>DML</code>操作, 也是其中最简单的操作, 用来删除符合条件的记录</p><p>删除操作的语法结构:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">table_name</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="keyword">condition</span></span><br></pre></td></tr></table></figure><p>删除操作是将符合条件的记录全部删除, 所以一定要记得添加正确的<code>condition</code>条件, <code>condition</code>条件具体会在查询操作中讲解, 需要注意的是, <mark><code>DELETE</code>的条件只能是<code>WHERE</code>跟随的条件, 无法使用聚合函数条件</mark></p><p>还有一种是清空数据库记录的操作(<code>TRUNCATE</code>), <code>TRUNCATE</code>的方式清除数据后, 该表进入初始状态, 自增字段值也会回到初始值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE table_name;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE user_union_copy;</span><br></pre></td></tr></table></figure><h3 id="改"><a class="markdownIt-Anchor" href="#改"></a> 改</h3><p>修改操作(<code>UPDATE</code>)是一种<code>DML</code>操作, 用来修改符合条件的记录</p><h4 id="基础结构"><a class="markdownIt-Anchor" href="#基础结构"></a> 基础结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UPDATE</span><br><span class="line">table_name</span><br><span class="line">SET</span><br><span class="line">column1 = value1,</span><br><span class="line">column2 = value2,</span><br><span class="line">...</span><br><span class="line">WHERE</span><br><span class="line">condition</span><br></pre></td></tr></table></figure><p>基础结构是将符合条件的所有记录的对应列全部修改为对应值, 所以执行修改操作时需要特别注意<code>condition</code>条件,  <code>condition</code>条件具体会在查询操作中讲解, 需要注意的是, <mark><code>UPDATE</code>的条件只能是<code>WHERE</code>跟随的条件, 无法使用聚合函数条件</mark></p><h4 id="关联结构"><a class="markdownIt-Anchor" href="#关联结构"></a> 关联结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UPDATE</span><br><span class="line">table_name1 t1</span><br><span class="line">[FULL/INNER/LEFT/RIGHT] JOIN</span><br><span class="line">table_name2 t2</span><br><span class="line">SET</span><br><span class="line">t1.column1 = t2.column1_value</span><br><span class="line">t2.column2 = 0</span><br></pre></td></tr></table></figure><p><code>UPDATE</code>的关联结构中, <mark>值是无法使用聚合函数来计算获得的</mark>, 但是可以通过子查询的方式来做一个临时表实现</p><h3 id="查"><a class="markdownIt-Anchor" href="#查"></a> 查</h3><p>查询操作(<code>SELECT</code>)是<code>DQL</code>操作, 用来查询数据库中保存的记录</p><h4 id="查询结构"><a class="markdownIt-Anchor" href="#查询结构"></a> 查询结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">column1, column2, ...</span><br><span class="line">FROM</span><br><span class="line">table_name_1 AS t1</span><br><span class="line">[INNER/LEFT/RIGHT] JOIN </span><br><span class="line">table_name_2 t2</span><br><span class="line">ON </span><br><span class="line">condition0</span><br><span class="line">WHERE</span><br><span class="line">condition1</span><br><span class="line">GROUP BY</span><br><span class="line">column3, column4,...</span><br><span class="line">HAVING</span><br><span class="line">condition2</span><br><span class="line">ORDER BY</span><br><span class="line">column5, column5</span><br><span class="line">LIMIT </span><br><span class="line">offset, length</span><br></pre></td></tr></table></figure><p>最简单的<code>SQL</code>结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">column1, column2, ...</span><br><span class="line">FROM</span><br><span class="line">table_name_1 AS t1</span><br></pre></td></tr></table></figure><p>在查询表或者视图数据时, 上述结构就是不可再简化的结构, 其他关键字及其内容是可以省略的, 在需要时添加</p><h4 id="关键字描述"><a class="markdownIt-Anchor" href="#关键字描述"></a> 关键字描述</h4><p><code>SELECT</code></p><p>输出, 查询的列, 可以使用<code>*</code>表示所有列, 通常情况下不建议</p><p><code>FROM</code></p><p>查询的源, 获取数据的来源, 通常是表或者视图</p><p>可以通过<code>JOIN</code>家族进行表与表, 表与视图, 视图与视图之间的关联, 其<mark>最终结果是一个临时表</mark>, 详细信息可以查看**<mark>表关联</mark>章节**</p><p><code>WHERE</code></p><p>过滤, 不可使用聚合函数过滤</p><p><code>WHERE</code>的过滤只能基于来自<code>FROM</code>的结果集的<code>COLUMN</code>, 这是由于<code>WHERE</code>执行在<code>SELECT</code>之前, 没有任何计算相关操作, 但是可以在<code>WHERE</code>中执行非聚合函数的计算(如加减乘除, 取余取模等)并进行结果判断</p><p><code>WHERE</code>中不能使用列别名</p><p><code>GROUP BY</code></p><p>分组, 根据指定列分组, 可以指定多个列, 不可以是聚合操作列</p><p><mark>此处在执行时可能会出现<code>GROUP BY</code>的报错, 说<code>SELECT</code>查询的<code>COLUMN</code>没有在<code>GROUP BY</code>中出现, 这个是开启了<code>ONLY_FULL_GROUP_BY</code>模式的原因</mark></p><p>从<code>GROUP BY</code>开始, 可以使用列别名</p><p><code>HAVING</code></p><p>过滤, 可使用聚合函数的过滤</p><p><code>HAVING</code>的过滤的条件来自于<code>FROM</code>的结果集+<code>SELECT</code>的结果集</p><p><code>ORDER BY</code></p><p>排序, 根据指定列排序, 可以指定多个列, 也可以指定每个列的升序和降序</p><p><code>ORDER BY</code>的排序列可以来自<code>FROM</code>的结果集, 也可以来自<code>SELECT</code>的结果集</p><p><code>LIMIT</code></p><p>限定个数</p><p><code>offset</code>跳过的记录数</p><p><code>size</code>取的记录数</p><h4 id="执行顺序"><a class="markdownIt-Anchor" href="#执行顺序"></a> 执行顺序</h4><p><code>FROM</code> -&gt; <code>WHERE</code> -&gt; <code>GROUP BY</code> -&gt; <code>HAVING</code> -&gt; <code>SELECT</code> -&gt; <code>ORDER BY</code> -&gt; <code>LIMIT</code></p><p>关于执行顺序的问题存在很大的争议, 其中的争议点主要是<code>SELECT</code>的执行位置, 这个执行顺序即使是官方也没有说明, 上述顺序是网上认可度比较高的顺序.</p><p>个人想法:</p><p><code>SELECT</code>的执行位置与对<code>SELECT</code>的认识有关, 整个查询结构中, 将关键字按等级划分的话, <code>GROUP BY</code>和<code>HAVING</code>是附属流程的关键字, 它们为<code>SELECT</code>关键字工作.</p><p><code>FROM</code> -&gt; <code>WHERE</code> -&gt; <code>SELECT_PARSE</code> -&gt; <code>GROUP BY</code> -&gt; <code>SELECT_PROCESS</code> -&gt; <code>HAVING</code> -&gt; <code>SELECT_RESULT</code> -&gt; <code>ORDER BY</code> -&gt; <code>LIMIT</code></p><p><code>SELECT_PARSE</code>为<code>SELECT</code>的开始, 此时只解析<code>SELECT</code>中定义的内容, 不做任何处理</p><p><code>GROUP BY</code>为<code>SELECT</code>过程中的分组过程, 此时只是按内容做分组处理, 不做计算</p><p><code>SELECT_PROCESS</code>为<code>SELECT</code>的处理过程, 这个过程中会做内容计算</p><p><code>HAVING</code>为<code>SELECT</code>过程中的筛选过程, 这个过程对之前的处理结果进行筛选工作</p><p><code>SELECT_RESULT</code>为<code>SELECT</code>的输出过程, 这个过程是将最终的结果返回</p><p><mark>以上为个人猜测, 请理性看待</mark></p><p>猜测的依据:</p><ol><li><code>SELECT</code>中定义的别名在<code>GROUP BY</code>中就可以使用, 这说明<code>SELECT</code>中定义的内容, 在<code>GROUP BY</code>之前就已经解析了, 但应该只是解析了列名, 没有做数据处理, 因为聚合操作的列需要在分组之后处理, 在<code>GROUP BY</code>中使用聚合操作列分组时会报错 <code>=&gt;</code>  <code>SELECT_PARSE</code> -&gt; <code>GROUP BY</code> -&gt; <code>SELECT_PROCESS</code></li><li><code>SELECT</code>在解析时, 不仅仅解析了<code>SELECT</code>中定义的列, 还包括源数据(来自于<code>FROM</code>的数据)中的列, 并进行了合并, 可以通过<code>GROUP BY</code>和<code>HAVING</code>验证</li><li><code>HAVING</code>和<code>SELECT_RESULT</code>这两个过程其实不太明确了, 即使调换理论上也没有错误, 参考<code>WHERE</code>的筛选, 应该是在输出结果之前</li></ol><p>可参考:</p><p><a href="https://builtin.com/data-science/sql-order-of-execution">https://builtin.com/data-science/sql-order-of-execution</a></p><p><a href="https://stackoverflow.com/questions/24127932/mysql-query-clause-execution-order">https://stackoverflow.com/questions/24127932/mysql-query-clause-execution-order</a></p><h3 id="聚合函数"><a class="markdownIt-Anchor" href="#聚合函数"></a> 聚合函数</h3><h4 id="count"><a class="markdownIt-Anchor" href="#count"></a> COUNT</h4><p>计数</p><p>不记录<code>NULL</code>值, 如果在查询之后进行了分组然后计算<code>COUNT</code>, <code>COUNT</code>的列中如果有为<code>NULL</code>的记录, 则该记录不计算在内, 结果比<code>COUNT(1), COUNT(*)</code>小</p><p><code>COUNT</code>中的列如果使用<code>DISTINCT</code>, 则会去重</p><h4 id="sum"><a class="markdownIt-Anchor" href="#sum"></a> SUM</h4><p>求和</p><p>不记录<code>NULL</code>值</p><p>计算字符串时, 会转为0</p><h4 id="max"><a class="markdownIt-Anchor" href="#max"></a> MAX</h4><p>最大值</p><p>不记录<code>NULL</code>值</p><h4 id="min"><a class="markdownIt-Anchor" href="#min"></a> MIN</h4><p>最小值</p><p>不记录<code>NULL</code>值</p><h4 id="avg"><a class="markdownIt-Anchor" href="#avg"></a> AVG</h4><p>平均值</p><p>不记录<code>NULL</code>值</p><h4 id="group_concat"><a class="markdownIt-Anchor" href="#group_concat"></a> GROUP_CONCAT</h4><p>字符串分组拼接, 使用<code>,</code>作为分隔符</p><h3 id="结构关键字"><a class="markdownIt-Anchor" href="#结构关键字"></a> 结构关键字</h3><h4 id="case-when"><a class="markdownIt-Anchor" href="#case-when"></a> CASE WHEN</h4><p>结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 1. 变量形式</span><br><span class="line">CASE 变量</span><br><span class="line">WHEN 值 THEN ...</span><br><span class="line">WHEN 值 THEN ...</span><br><span class="line">ELSE ...</span><br><span class="line">END</span><br><span class="line">-- 2. 表达式形式</span><br><span class="line">CASE</span><br><span class="line">WHEN condition THEN ...</span><br><span class="line">WHEN condition THEN ...</span><br><span class="line">ELSE ...</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>特殊的使用<code>CASE WEHN</code>+聚合函数可以将纵向记录横向化</p><table><thead><tr><th>name</th><th>subject</th><th>score</th></tr></thead><tbody><tr><td>赵</td><td>语</td><td>1</td></tr><tr><td>钱</td><td>语</td><td>2</td></tr><tr><td>孙</td><td>语</td><td>1</td></tr><tr><td>李</td><td>语</td><td>2</td></tr><tr><td>赵</td><td>数</td><td>3</td></tr><tr><td>钱</td><td>数</td><td>3</td></tr><tr><td>孙</td><td>数</td><td>2</td></tr><tr><td>李</td><td>数</td><td>2</td></tr><tr><td>赵</td><td>外</td><td>2</td></tr><tr><td>钱</td><td>外</td><td>3</td></tr><tr><td>孙</td><td>外</td><td>3</td></tr><tr><td>李</td><td>外</td><td>2</td></tr></tbody></table><p>转为</p><table><thead><tr><th>name</th><th>语</th><th>数</th><th>外</th></tr></thead><tbody><tr><td>赵</td><td>1</td><td>3</td><td>2</td></tr><tr><td>钱</td><td>2</td><td>3</td><td>3</td></tr><tr><td>孙</td><td>1</td><td>2</td><td>3</td></tr><tr><td>李</td><td>2</td><td>2</td><td>2</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">MAX(</span><br><span class="line">    CASE subject</span><br><span class="line">        WHEN &#x27;语&#x27; THEN score</span><br><span class="line">        ELSE NULL</span><br><span class="line">        END</span><br><span class="line">    ) AS &#x27;语&#x27;,</span><br><span class="line">MAX(</span><br><span class="line">    CASE subject</span><br><span class="line">        WHEN &#x27;数&#x27; THEN score</span><br><span class="line">        ELSE NULL</span><br><span class="line">        END</span><br><span class="line">    ) AS &#x27;数&#x27;,</span><br><span class="line">MAX(</span><br><span class="line">    CASE subject</span><br><span class="line">        WHEN &#x27;外&#x27; THEN score</span><br><span class="line">        ELSE NULL</span><br><span class="line">        END</span><br><span class="line">    ) AS &#x27;外&#x27;</span><br><span class="line">FROM score</span><br><span class="line">GROUP BY name;</span><br></pre></td></tr></table></figure><p>每一列用<code>CASE WHEN</code>将除了符合科目条件的记录的成绩输出, 否则为<code>NULL</code></p><p>得到</p><table><thead><tr><th>name</th><th>语</th><th>数</th><th>外</th></tr></thead><tbody><tr><td>赵</td><td>1</td><td>NULL</td><td>NULL</td></tr><tr><td>钱</td><td>2</td><td>NULL</td><td>NULL</td></tr><tr><td>孙</td><td>1</td><td>NULL</td><td>NULL</td></tr><tr><td>李</td><td>2</td><td>NULL</td><td>NULL</td></tr><tr><td>赵</td><td>NULL</td><td>3</td><td>NULL</td></tr><tr><td>钱</td><td>NULL</td><td>3</td><td>NULL</td></tr><tr><td>孙</td><td>NULL</td><td>2</td><td>NULL</td></tr><tr><td>李</td><td>NULL</td><td>2</td><td>NULL</td></tr><tr><td>赵</td><td>NULL</td><td>NULL</td><td>2</td></tr><tr><td>钱</td><td>NULL</td><td>NULL</td><td>3</td></tr><tr><td>孙</td><td>NULL</td><td>NULL</td><td>3</td></tr><tr><td>李</td><td>NULL</td><td>NULL</td><td>2</td></tr></tbody></table><p>使用分组<code>MAX</code>, 得到每个人每一科目的<code>MAX</code>, 由于<code>NULL</code>不纳入计算, 所以得到最大值就是唯一值</p><h3 id="表关联"><a class="markdownIt-Anchor" href="#表关联"></a> 表关联</h3><h4 id="关联结构-2"><a class="markdownIt-Anchor" href="#关联结构-2"></a> 关联结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span></span><br><span class="line">table_1</span><br><span class="line">[<span class="keyword">INNER</span><span class="operator">/</span><span class="keyword">LEFT</span><span class="operator">/</span><span class="keyword">RIGHT</span>] <span class="keyword">JOIN</span></span><br><span class="line">table_2</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure><h4 id="关键字"><a class="markdownIt-Anchor" href="#关键字"></a> 关键字</h4><p>连接分为内连接和外连接</p><p><code>[INNER] JOIN</code>: 内连接, 通过<code>ON</code>来进行条件匹配, 其返回结果是两个关联的表中存在互相关联的数据, 即两个表的交集.<mark>内连接也可以没有<code>ON</code>条件, 通过<code>WHERE</code>条件语句实现</mark>, 当时用内连接关联时, 使用<code>ON</code>关联与使用<code>WHERE</code>关联是一致的, 执行时会将<code>ON</code>关联优化为<code>WHERE</code>关联</p><p><code>LEFT/RIGHT JOIN</code>: 外连接 通过<code>ON</code>来进行条件匹配, 其返回结果是两个关联的表中以其中一张表为基础, 通过另一张表添加附属数据, 可以不存在附属数据, <mark>外连接必须包含<code>ON</code>条件</mark></p><p><img src="JOIN%E9%9B%86%E5%90%88.jpg" alt="JOIN集合" /></p><blockquote><p>上面是网上的常用的<code>JOIN</code>集合图, 共有其中情况, 其中<code>1, 2, 3</code>这三种情况是我们最常用的场景</p><p>情况<code>4, 5</code>是单表去除了公共部分, 需要注意, 这两种情况如果需要的到, 关联是必须的, 这需要区分一下两条语句(以<code>LEFT JOIN</code>为例):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 单表</span><br><span class="line">SELECT &lt;auswahl&gt;</span><br><span class="line">FROM tableA A</span><br><span class="line">WHERE A.key IS NULL;</span><br><span class="line">-- 关联表</span><br><span class="line">SELECT &lt;auswahl&gt;</span><br><span class="line">FROM tableA A</span><br><span class="line">LEFT JOIN tableB B</span><br><span class="line">ON A.key = B.key</span><br><span class="line">WHERE B.key IS NULL;</span><br></pre></td></tr></table></figure><p>上面两条语句的结果集是不一样的, 在关联的查询方式中, 如果<code>tableA</code>的<code>key</code>是存在的, 但是<code>tableB</code>中不存在对应的记录, 则该记录不会记录在内, 其数据量是大于等于单表查询方式的</p><p><img src="%E5%8D%95%E4%BE%A7%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2.jpg" alt="单侧单表查询" /></p><p>假设红色区域是<code>tableA</code>中存在<code>key</code>, 但是<code>tableB</code>中不存在对应<code>key</code>的记录, 那么, 单表的查询结果=蓝色区域 - 红色区域</p><p>情况<code>6, 7</code>在<code>mysql</code>中是不支持这种写法的, 但是可以通过<code>UNION</code>实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 情况6 = 情况2 + 情况3 - 情况1(-情况1是去重)</span><br><span class="line">SELECT &lt;auswahl&gt;</span><br><span class="line">FROM tableA A </span><br><span class="line">LEFT JOIN tableB B</span><br><span class="line">ON A.key = B.key</span><br><span class="line">UNION -- 去重</span><br><span class="line">SELECT &lt;auswahl&gt;</span><br><span class="line">FROM tableB A</span><br><span class="line">RIGHT JOIN tableB B</span><br><span class="line">ON A.key = B.key;</span><br><span class="line">-- 情况7 = 情况4 + 情况5</span><br><span class="line">SELECT &lt;auswahl&gt;</span><br><span class="line">FROM tableA A </span><br><span class="line">LEFT JOIN tableB B</span><br><span class="line">ON A.key = B.key</span><br><span class="line">WHERE B.key IS NULL</span><br><span class="line">UNION -- 去重</span><br><span class="line">SELECT &lt;auswahl&gt;</span><br><span class="line">FROM tableB A</span><br><span class="line">RIGHT JOIN tableB B</span><br><span class="line">ON A.key = B.key</span><br><span class="line">WHERE A.key IS NULL;</span><br></pre></td></tr></table></figure></blockquote><p>下面的方式可以实现使用字符串拼接关联字段的关联, 但受限于<code>help_topic</code>数值, 拼接字段的个数只能在600个左右</p><p>如<code>user</code>表中某个用户的<code>role_ids</code>的值为<code>1,3,5</code>, 则该用户使用一下方式时, 可以实现</p><table><thead><tr><th>user</th><th>role</th></tr></thead><tbody><tr><td>user</td><td>role_first</td></tr><tr><td>user</td><td>role_third</td></tr><tr><td>user</td><td>role_fifth</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">u.id as uid, u.name as username, r.id as rid, r.name as role_name</span><br><span class="line">FROM </span><br><span class="line">user u </span><br><span class="line">LEFT JOIN</span><br><span class="line">role r</span><br><span class="line">ON r.id = ANY(</span><br><span class="line">SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(u.role_ids,&#x27;,&#x27;,help_topic_id+1),&#x27;,&#x27;,-1)</span><br><span class="line">FROM mysql.help_topic h</span><br><span class="line">WHERE h.help_topic_id &lt; LENGTH(u.role_ids) - LENGTH(REPLACE(u.role_ids,&#x27;,&#x27;,&#x27;&#x27;)) + 1</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="使用选择"><a class="markdownIt-Anchor" href="#使用选择"></a> 使用选择</h4><p>内连接和外连接的数据集是不同的, 在使用时需要根据需求进行选择</p><p>可以通过查询数据的要求, 寻求表之间是否需要有主次关系, 这种主次关系并不是表的主次关系, 而是需求上需不需要表存在主次关系</p><p>比如以上面的表结构为例</p><blockquote><p>需求一: 查询用户角色, 携带用户信息</p><p>需求二: 查询用户列表, 携带角色信息</p><p>需求三: 查询角色列表, 携带相关用户</p></blockquote><p>需求一: 两个表在需求上是不存在主次关系的, 查询的内容是来自于角色表, 被动主体是用户表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">u.name, r.name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">user</span> u</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">role r</span><br><span class="line"><span class="keyword">ON</span> r.id <span class="operator">=</span> <span class="keyword">ANY</span>(</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(SUBSTRING_INDEX(u.role_ids,<span class="string">&#x27;,&#x27;</span>,help_topic_id<span class="operator">+</span><span class="number">1</span>),<span class="string">&#x27;,&#x27;</span>,<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">FROM</span> mysql.help_topic h</span><br><span class="line"><span class="keyword">WHERE</span> h.help_topic_id <span class="operator">&lt;</span> LENGTH(u.role_ids) <span class="operator">-</span> LENGTH(REPLACE(u.role_ids,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;&#x27;</span>)) <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">u.id <span class="operator">=</span>  <span class="number">1</span></span><br></pre></td></tr></table></figure><p>当使用中间表做关联时</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">u.name, r.name</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line"><span class="keyword">user</span> u</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">user_role ur</span><br><span class="line"><span class="keyword">ON</span> u.id <span class="operator">=</span> ur.user_id</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">role r</span><br><span class="line"><span class="keyword">ON</span> r.id <span class="operator">=</span> ur.role_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">u.id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>查询的结果实际是表关联中符合要求的交集部分, 当没有符合关联条件的记录时, 返回空</p><p>需求二: 两个表在需求上是附属关系的, 查询的内容实际是用户内容, 而角色信息是附属内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">u.name, GROUP_CONCAT(r.name)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line"><span class="keyword">user</span> u</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">role r</span><br><span class="line"><span class="keyword">ON</span> r.id <span class="operator">=</span> <span class="keyword">ANY</span>(</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(SUBSTRING_INDEX(u.role_ids,<span class="string">&#x27;,&#x27;</span>,help_topic_id<span class="operator">+</span><span class="number">1</span>),<span class="string">&#x27;,&#x27;</span>,<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">FROM</span> mysql.help_topic h</span><br><span class="line"><span class="keyword">WHERE</span> h.help_topic_id <span class="operator">&lt;</span> LENGTH(u.role_ids) <span class="operator">-</span> LENGTH(REPLACE(u.role_ids,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;&#x27;</span>)) <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> u.id</span><br></pre></td></tr></table></figure><p>查询的结果实际上是用户的内容, 需要将有角色信息的用户的角色信息一起查询出来, 用户没有角色信息也查询出来, 但角色信息展示为空</p><p>需求三: 两个表在需求上是负数关系的, 查询的内容实际是角色信息, 用户信息是附属内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">r.name, GROUP_CONCAT(u.name)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">role r</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line"><span class="keyword">user</span> u</span><br><span class="line"><span class="keyword">ON</span> r.id <span class="operator">=</span> <span class="keyword">ANY</span>(</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(SUBSTRING_INDEX(u.role_ids,<span class="string">&#x27;,&#x27;</span>,help_topic_id<span class="operator">+</span><span class="number">1</span>),<span class="string">&#x27;,&#x27;</span>,<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">FROM</span> mysql.help_topic h</span><br><span class="line"><span class="keyword">WHERE</span> h.help_topic_id <span class="operator">&lt;</span> LENGTH(u.role_ids) <span class="operator">-</span> LENGTH(REPLACE(u.role_ids,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;&#x27;</span>)) <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.id</span><br></pre></td></tr></table></figure><p>查询的结果实际上是角色的内容, 将有关联用户的角色, 将关联的用户一起查询出来, 角色没有关联用户也查询出来, 但用户信息展示为空</p><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题😭</h3><h3 id="挖坑"><a class="markdownIt-Anchor" href="#挖坑"></a> 挖坑</h3>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL, SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目对接招商银行CBS</title>
      <link href="/2024/02/21/other/%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%8E%A5%E6%8B%9B%E5%95%86%E9%93%B6%E8%A1%8CCBS/"/>
      <url>/2024/02/21/other/%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%8E%A5%E6%8B%9B%E5%95%86%E9%93%B6%E8%A1%8CCBS/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>年前给公司系统对接了一下招商银行的<code>CBS</code>系统, 对接还是比较简单的, 只是有一些需要注意的东西, 整理一篇文章简单记录一下</p><p>对接的内容上目前是只对接了<mark>支付</mark>, <mark>支付结果</mark>, <mark>电子回单</mark>, <mark>交易明细</mark>. 后三者过程大致类似, 就以支付结果为例, 特别点会进行额外描述</p><p>相关文件</p><p><a href="cbs.7z" download="Demo.7z">官方Demo</a></p><p><a href="CBS8财资云业务对接指南.docx" download="CBS8财资云业务对接指南.docx">CBS8财资云业务对接指南.docx</a></p><p><a href="测试资源.docx" download="测试资源.docx">测试资源.docx</a></p><h3 id="前提"><a class="markdownIt-Anchor" href="#前提"></a> 前提</h3><ol><li>已经在招商银行的<code>CBS</code>中注册企业用户, 获取到<code>app-id</code>和密钥等信息</li><li>使用的账户已经注册到招商银行<code>CBS</code>的注册企业用户中</li></ol><p>这两个条件保证了企业在招商银行<code>CBS</code>系统中的使用权限和可操作账户</p><p>如果企业使用了其他银行的银行卡账户, 应联系招商银行, 让其进行目标银行的对接工作, 这样此处就只需要对接招商银行的<code>CBS</code>系统即可</p><h3 id="基础配置"><a class="markdownIt-Anchor" href="#基础配置"></a> 基础配置</h3><p>前面讲到将企业注册为企业用户, 获取到<code>app-id</code>和密钥等信息, 这些信息我们需要配置到系统中, 用来进行对接</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cbs:</span></span><br><span class="line">  <span class="attr">app-id:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">app-secret:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="comment">#平台公钥</span></span><br><span class="line">  <span class="attr">platform-public-key:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="comment">#公司公钥</span></span><br><span class="line">  <span class="attr">firm-public-key:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="comment">#公司私钥</span></span><br><span class="line">  <span class="attr">firm-private-key:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="comment">#CBS请求域名</span></span><br><span class="line">  <span class="attr">open-api-url:</span> <span class="string">https://tmcapi.cmbchina.com</span></span><br><span class="line">  <span class="comment">#支付接口路径</span></span><br><span class="line">  <span class="attr">payment-url:</span> <span class="string">/openapi/payment/openapi/v1/payment-apply-common</span></span><br><span class="line">  <span class="comment"># 查询支付的实际支付结果</span></span><br><span class="line">  <span class="attr">payment-query-url:</span> <span class="string">/openapi/payment/openapi/v1/query</span></span><br><span class="line">  <span class="comment">#电子回单</span></span><br><span class="line">  <span class="attr">payment-receipt-url:</span> <span class="string">/openapi/account/openapi/v1/electronic-bill/query</span></span><br><span class="line">  <span class="comment">#交易详情</span></span><br><span class="line">  <span class="attr">transaction-detail-url:</span> <span class="string">/openapi/account/openapi/v1/transaction-detail/query</span></span><br><span class="line">  <span class="attr">get-token-url:</span> <span class="string">/openapi/app/v1/app/token</span></span><br><span class="line">  <span class="attr">refresh-token-url:</span> <span class="string">/openapi/app/v1/app/refresh-token</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;cbs8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CBSConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line">    <span class="keyword">private</span> String appSecret;</span><br><span class="line">    <span class="comment">// 平台公钥</span></span><br><span class="line">    <span class="keyword">private</span> String platformPublicKey;</span><br><span class="line">    <span class="comment">// 公司公钥</span></span><br><span class="line">    <span class="keyword">private</span> String firmPublicKey;</span><br><span class="line">    <span class="comment">// 公司私钥</span></span><br><span class="line">    <span class="keyword">private</span> String firmPrivateKey;</span><br><span class="line">    <span class="comment">// CBS请求域名</span></span><br><span class="line">    <span class="keyword">private</span> String openApiUrl;</span><br><span class="line">    <span class="comment">// 支付接口路径</span></span><br><span class="line">    <span class="keyword">private</span> String paymentUrl;</span><br><span class="line">    <span class="comment">// 电子回单</span></span><br><span class="line">    <span class="keyword">private</span> String paymentReceiptUrl;</span><br><span class="line">    <span class="comment">// 交易详情</span></span><br><span class="line">    <span class="keyword">private</span> String transactionDetailUrl;</span><br><span class="line">    <span class="comment">// 获取TOKEN</span></span><br><span class="line">    <span class="keyword">private</span> String getTokenUrl;</span><br><span class="line">    <span class="comment">// 刷新TOKEN</span></span><br><span class="line">    <span class="keyword">private</span> String refreshTokenUrl;</span><br><span class="line"><span class="comment">// 支付结果查询</span></span><br><span class="line">    <span class="keyword">private</span> String paymentQueryUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="公共内容"><a class="markdownIt-Anchor" href="#公共内容"></a> 公共内容</h3><h4 id="token"><a class="markdownIt-Anchor" href="#token"></a> <code>TOKEN</code></h4><p>获取<code>token</code>和刷新<code>token</code>, 此处使用<code>Redis</code>存储<code>token</code>信息, <code>CBS</code>系统的<code>token</code>有效时长为30分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CBSTokenUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token保存map的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOKEN_INFO_KEY</span> <span class="operator">=</span> <span class="string">&quot;cbs_docking_key&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token在map中的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOKEN_KEY</span> <span class="operator">=</span> <span class="string">&quot;token&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXPIRES</span> <span class="operator">=</span> <span class="string">&quot;expires&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SAVE_TIME</span> <span class="operator">=</span> <span class="string">&quot;save_time&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预留过期时间, 5分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESERVE_TIME</span> <span class="operator">=</span> <span class="number">5</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">REFRESH_TIME</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token 的有效时长, 30分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EFFECTIVE_TIME</span> <span class="operator">=</span> <span class="number">10</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CBSConfig cbsConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">token</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> (String) redisUtil.hget(TOKEN_INFO_KEY, TOKEN_KEY);</span><br><span class="line">        <span class="comment">// 当前系统时间, 秒</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">        <span class="comment">// 如果token不为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!expires(l)) &#123;</span><br><span class="line">                <span class="keyword">return</span> token;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> getTokenInfo();</span><br><span class="line">        token = tokenInfo.getString(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">expires</span> <span class="operator">=</span> tokenInfo.getInteger(<span class="string">&quot;expires&quot;</span>);</span><br><span class="line">        <span class="comment">//刷新token</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != expires) &#123;</span><br><span class="line">            <span class="comment">// 过期时间小于4秒, 则等待重新获取</span></span><br><span class="line">            <span class="keyword">if</span> (expires &lt; REFRESH_TIME) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;expires: &#123;&#125;; 等待: &#123;&#125;&quot;</span>, expires, REFRESH_TIME + <span class="number">1</span>);</span><br><span class="line">                    Thread.sleep((REFRESH_TIME + <span class="number">1</span>) * <span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;等待异常: &quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                tokenInfo = getTokenInfo();</span><br><span class="line">                token = tokenInfo.getString(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">                expires = tokenInfo.getInteger(<span class="string">&quot;expires&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 过期时间小于五分钟刷新token</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (expires &lt; RESERVE_TIME) &#123;</span><br><span class="line">                <span class="type">JSONObject</span> <span class="variable">refreshTokenInfo</span> <span class="operator">=</span> refreshTokenInfo(token);</span><br><span class="line">                token = refreshTokenInfo.getString(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">                expires = refreshTokenInfo.getInteger(<span class="string">&quot;expires&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setToken(expires, token, l);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">expires</span><span class="params">(<span class="type">long</span> current)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算当前时间 - token的获取时间</span></span><br><span class="line">        <span class="comment">// 过期时间 秒</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">redisExpires</span> <span class="operator">=</span> (Integer) redisUtil.hget(TOKEN_INFO_KEY, EXPIRES);</span><br><span class="line">        <span class="type">long</span> <span class="variable">exp</span> <span class="operator">=</span> redisExpires == <span class="literal">null</span> ? <span class="number">0L</span> : redisExpires;</span><br><span class="line">        <span class="comment">// 上次保存时间 秒</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">saveTime</span> <span class="operator">=</span> (Integer) redisUtil.hget(TOKEN_INFO_KEY, SAVE_TIME);</span><br><span class="line">        <span class="comment">// 计算结果 秒 上次保存时间为null则用0</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> saveTime == <span class="literal">null</span> ? <span class="number">0L</span> : current - saveTime;</span><br><span class="line">        <span class="comment">// 如果计算结果 &gt;= 过期时间, 则过期</span></span><br><span class="line">        <span class="comment">// 当前时间 - 上次保存时间 &gt;= 有效时长 则过期</span></span><br><span class="line">        log.info(<span class="string">&quot;cbs expires: &#123;&#125;, save time: &#123;&#125;, current time: &#123;&#125;&quot;</span>, exp, saveTime, current);</span><br><span class="line">        <span class="keyword">return</span> result &gt;= exp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setToken</span><span class="params">(Integer expires, String token, <span class="type">long</span> current)</span> &#123;</span><br><span class="line">        <span class="comment">// 预留5分钟</span></span><br><span class="line">        expires = <span class="literal">null</span> == expires ? EFFECTIVE_TIME - RESERVE_TIME : expires - RESERVE_TIME;</span><br><span class="line">        <span class="comment">// 设置token</span></span><br><span class="line">        redisUtil.hset(TOKEN_INFO_KEY, TOKEN_KEY, token);</span><br><span class="line">        <span class="comment">// 设置有效时长</span></span><br><span class="line">        redisUtil.hset(TOKEN_INFO_KEY, EXPIRES, expires);</span><br><span class="line">        <span class="comment">// 设置保存时间</span></span><br><span class="line">        redisUtil.hset(TOKEN_INFO_KEY, SAVE_TIME, current);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JSONObject <span class="title function_">getTokenInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        headers.setContentType(org.springframework.http.MediaType.APPLICATION_JSON);</span><br><span class="line">        Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;app_id&quot;</span>, cbsConfig.getAppId());</span><br><span class="line">        params.put(<span class="string">&quot;app_secret&quot;</span>, cbsConfig.getAppSecret());</span><br><span class="line">        params.put(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;client_credentials&quot;</span>);</span><br><span class="line">        HttpEntity&lt;Map&lt;String, String&gt;&gt; request = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(params, headers);</span><br><span class="line">        ResponseEntity&lt;JSONObject&gt; response = restTemplate.exchange(cbsConfig.getOpenApiUrl() + cbsConfig.getGetTokenUrl(), HttpMethod.POST, request, JSONObject.class);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> response.getBody();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(data)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请求TOKEN失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> data.getString(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;0&quot;</span>.equals(code)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取token失败,返回报文: &#123;&#125; , 错误提示信息: &#123;&#125;&quot;</span>, data, getErrorMessage(code));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data.getJSONObject(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JSONObject <span class="title function_">refreshTokenInfo</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        headers.setBearerAuth(token);</span><br><span class="line">        HttpEntity&lt;String&gt; request = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(headers);</span><br><span class="line">        ResponseEntity&lt;JSONObject&gt; response = restTemplate.exchange(cbsConfig.getOpenApiUrl() + cbsConfig.getRefreshTokenUrl(), HttpMethod.GET, request, JSONObject.class);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> response.getBody();</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(data)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;获取TOKEN失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> data.getString(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;0&quot;</span>.equals(code)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;刷新token失败,返回报文: &#123;&#125; , 错误提示信息: &#123;&#125;&quot;</span>, data, getErrorMessage(code));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data.getJSONObject(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getErrorMessage</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;10010001&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;参数校验失败&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;2006&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;授权模式不支持&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;2009&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;客户端密钥错误&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;AE0004&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;会话已过期，请重新登录&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;其他错误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="请求封装"><a class="markdownIt-Anchor" href="#请求封装"></a> 请求封装</h4><p>此处的请求封装是业务请求中公共内容的封装和结果的解析, 参考官方<code>Demo</code>中的内容进行封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CBSHttpUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CBSConfig cbsConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CBSTokenUtils cbsTokenUtils;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doHttp</span><span class="params">(String url, String data)</span> &#123;</span><br><span class="line">        <span class="comment">// 禁止HttpClient自动解压缩</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">CloseableHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClients.custom()</span><br><span class="line">                <span class="comment">// 禁止HttpClient自动解压缩</span></span><br><span class="line">                .disableContentCompression()</span><br><span class="line">                .build()) &#123;</span><br><span class="line">            <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> setupRequest(url, data);</span><br><span class="line">            <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.execute(httpPost);</span><br><span class="line">            <span class="keyword">return</span> handleResponse(response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;网络连接失败或超时！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&#123;&#125;:请求异常: &#123;&#125;&quot;</span>, LocalDateTime.now(), e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请求异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HttpPost <span class="title function_">setupRequest</span><span class="params">(String url, String requestData)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> setupRequest(url, cbsTokenUtils.token(), cbsConfig.getFirmPrivateKey(), cbsConfig.getPlatformPublicKey(), requestData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成请求报文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> HttpPost <span class="title function_">setupRequest</span><span class="params">(String url, String token, String signEncryptionPrivateKey, String bodyEncryptionKey, String requestData)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求数据拼接：  报文体+时间戳</span></span><br><span class="line">        <span class="type">byte</span>[] requestDataBytes = requestData.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="type">byte</span>[] timestampBytes = (<span class="string">&quot;&amp;timestamp=&quot;</span> + timestamp).getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="type">byte</span>[] newBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[requestDataBytes.length + timestampBytes.length];</span><br><span class="line">        System.arraycopy(requestDataBytes, <span class="number">0</span>, newBytes, <span class="number">0</span>, requestDataBytes.length);</span><br><span class="line">        System.arraycopy(timestampBytes, <span class="number">0</span>, newBytes, requestDataBytes.length, timestampBytes.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成签名</span></span><br><span class="line">        <span class="type">byte</span>[] signature = CBSSM2Util.sign(signEncryptionPrivateKey, newBytes);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> Base64.encodeBase64String(CBSSM2Util.encodeDERSignature(signature));</span><br><span class="line">        log.info(<span class="string">&quot;签名:&#123;&#125;&quot;</span>, sign);</span><br><span class="line">        <span class="comment">// 设置请求URL</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line">        <span class="comment">// 请求头设置签名</span></span><br><span class="line">        httpPost.setHeader(CBSConstant.SIGN_HEADER_NAME, sign);</span><br><span class="line">        <span class="comment">// 请求头设置时间戳</span></span><br><span class="line">        httpPost.setHeader(CBSConstant.TIMESTAMP_HEADER, Long.toString(timestamp));</span><br><span class="line">        <span class="comment">// 请求头设置请求参数格式，请根据实际情况改写</span></span><br><span class="line">        httpPost.setHeader(HTTP.CONTENT_TYPE, CBSConstant.TARGET_CONTENT_TYPE);</span><br><span class="line">        <span class="comment">// 请求头设置TOKEN</span></span><br><span class="line">        httpPost.setHeader(CBSConstant.AUTHORIZATION, CBSConstant.BEARER + token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 报文体加密</span></span><br><span class="line">        <span class="type">byte</span>[] encryptedData = CBSSM2Util.encrypt(bodyEncryptionKey, requestDataBytes);</span><br><span class="line">        <span class="comment">// 设置请求体</span></span><br><span class="line"></span><br><span class="line">        httpPost.setEntity(<span class="keyword">new</span> <span class="title class_">ByteArrayEntity</span>(encryptedData));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpPost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleResponse</span><span class="params">(HttpResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = handleResponse(response, cbsConfig.getFirmPrivateKey());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理响应报文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] handleResponse(HttpResponse response, String bodyDecryptionKey) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">content</span> <span class="operator">=</span> response.getEntity().getContent();</span><br><span class="line">        <span class="type">byte</span>[] responseData = IOUtils.toByteArray(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (responseData == <span class="literal">null</span> || responseData.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> responseData == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>] : responseData;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤1 原始响应报文解密 如果服务网关获取加解密密钥失败，则无法解密请求报文，且无法加密响应报文。 这时候，网关会直接返回错误信息，响应报文是未加密状态。</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">encryptionEnable</span> <span class="operator">=</span> getHeader(response, CBSConstant.ENCRYPTION_ENABLED_HEADER_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Boolean.TRUE.equals(encryptionEnable)) &#123;</span><br><span class="line">            responseData = CBSSM2Util.decrypt(bodyDecryptionKey, responseData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">xMbcloudCompress</span> <span class="operator">=</span> getHeader(response, CBSConstant.X_MBCLOUD_COMPRESS);</span><br><span class="line">        <span class="keyword">if</span> (Boolean.TRUE.equals(xMbcloudCompress)) &#123;</span><br><span class="line">            responseData = decompress(responseData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> responseData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">getHeader</span><span class="params">(HttpMessage message, String name)</span> &#123;</span><br><span class="line">        <span class="type">Header</span> <span class="variable">header</span> <span class="operator">=</span> message.getFirstHeader(name);</span><br><span class="line">        <span class="keyword">return</span> header != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] decompress(<span class="type">byte</span>[] data) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data);</span><br><span class="line">        <span class="type">GZIPInputStream</span> <span class="variable">gzipInput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GZIPInputStream</span>(input);</span><br><span class="line">        <span class="keyword">return</span> IOUtils.toByteArray(gzipInput);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="业务对接"><a class="markdownIt-Anchor" href="#业务对接"></a> 业务对接</h3><h4 id="支付"><a class="markdownIt-Anchor" href="#支付"></a> 支付</h4><p><img src="%E6%94%AF%E4%BB%98%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="支付时序图" /></p><p>支付接口是一个批量操作接口, 传入的是一个<code>list</code>, 具体的参数和返回值参考对接指南.</p><p>注意事项</p><ol><li>调用支付接口是发送<code>CBS</code>的支付指令(上图中的步骤1-5), 实际的支付需要<code>CBS</code>端审核, 此审核可以关闭(询问招行如何操作)</li><li>调用支付接口时会进行一系列的校验, 这些校验是可以关闭的(询问招商银行), 建议添加业务参考号的校验, 如果有要求可以全部关闭(个人需要实现记录的重复请求问题, 确保支付指令的唯一)</li><li>调用支付接口后, 不会立即执行付款操作, 实际的支付操作会滞后一段时间, 并且即使在<code>CBS</code>校验通过, 也不一定会支付成功. 如果<code>CBS</code>校验通过, 但是实际支付却失败了, 则该业务参考号(开启业务参考号校验的情况下)在<code>CBS</code>中就不可用了</li><li>付款的账户必须是在<code>CBS</code>注册的企业用户中备案的账户</li></ol><p>如果不是有大量的批量支付的情况, 建议使用单条记录调用支付接口, 这样在进行本地的参数预校验和请求参数与返回结果进行操作时比较方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> CBSPaymentApplyEntity <span class="title function_">paymentApply</span><span class="params">(CBSPaymentApplyEntity payment)</span> &#123;</span><br><span class="line">    <span class="type">SysPaymentConfig</span> <span class="variable">config</span> <span class="operator">=</span> sysPaymentConfigMapper.selectConfigById(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == config.getEnablePayment()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;支付接口被禁用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Objectss.isNull(payment)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请添加支付记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;支付申请: &#123;&#125;&quot;</span>, payment);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据初步校验, 判断数据是否符合要求, 不符合可直接不进行后续处理</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行固定的数据填充</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用支付接口, 只需要将有业务参考号的处理即可</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> JSONArray.toJSONString(Collections.singletonList(payment), SerializerFeature.PrettyFormat);</span><br><span class="line">    <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> cbsHttpUtil.doHttp(cbsConfig.getOpenApiUrl() + cbsConfig.getPaymentUrl(), data);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.parseObject(response);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;0&quot;</span>.equals(jsonObject.get(<span class="string">&quot;code&quot;</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(jsonObject.getString(<span class="string">&quot;msg&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">CBSPaymentApplyEntity</span> <span class="variable">json</span> <span class="operator">=</span> jsonObject.getJSONArray(<span class="string">&quot;data&quot;</span>).toJavaList(CBSPaymentApplyEntity.class).get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 处理支付结果</span></span><br><span class="line">    payment.setReferenceNum(referenceNum)</span><br><span class="line">        .setSuccessed(json.getSuccessed())</span><br><span class="line">        .setBusNum(json.getBusNum())</span><br><span class="line">        .setErrorCode(json.getErrorCode())</span><br><span class="line">        .setErrorMsg(json.getErrorMsg())</span><br><span class="line">        .setRecordNum(json.getRecordNum())</span><br><span class="line">        .setFreezeFlowNum(json.getFreezeFlowNum())</span><br><span class="line">        .setPayStatus(Boolean.parseBoolean(json.getSuccessed()) ? <span class="string">&quot;a&quot;</span> : <span class="string">&quot;&quot;</span>)</span><br><span class="line">        .setStatus(Boolean.parseBoolean(json.getSuccessed()) ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;&quot;</span>)</span><br><span class="line">        .setSync(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="comment">// 将实际调用支付接口的记录保存日志</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">saved</span> <span class="operator">=</span> cbsPaymentApplyService.save(payment);</span><br><span class="line">    <span class="keyword">return</span> payment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预处理可以根据需要自定义, 本人在此处的定义的实体中有支付参数信息, 接口返回结果信息和支付结果信息三部分内容, 所以预校验时参考的对接指南中的错误码, 添加到数据并中, 记录不必进行调用请求</p><p>支付结果中的支付状态和状态信息可以参考对接指南中的支付状态和状态对应的信息, 这个在支付结果查询处理中会用到</p><p>这个内容在做的时候, 总监设想的是使用<code>RabbitMQ</code>处理来自公司系统中的支付请求, 但是没明说, 经理就说直接用<code>Dubbo</code>调用即可, 就没用<code>RabbitMQ</code>, 设计时是应当考虑是否需要使用消息队列的</p><h4 id="支付结果"><a class="markdownIt-Anchor" href="#支付结果"></a> 支付结果</h4><p>支付结果查询接口是获取一定时间段内处理的支付记录, 这些支付记录的成功与否可以通过流程状态和支付状态字段进行判断, 具体的状态信息可参考对接指南</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paymentDetail</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;==获取支付结果开始==&quot;</span>);</span><br><span class="line">    <span class="type">SysPaymentConfig</span> <span class="variable">config</span> <span class="operator">=</span> sysPaymentConfigMapper.selectConfigById(<span class="number">1</span>);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">param</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">    <span class="comment">// 查询最近n小时的记录, 通过数据库配置时长</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">startTime</span> <span class="operator">=</span> now.plusHours(-<span class="number">1L</span> * config.getPaymentPullOffset()).format(DATE_TIME_FORMATTER);</span><br><span class="line">    <span class="type">String</span> <span class="variable">endTime</span> <span class="operator">=</span> now.format(DATE_TIME_FORMATTER);</span><br><span class="line">    param.put(<span class="string">&quot;queryDateStart&quot;</span>, startTime);</span><br><span class="line">    param.put(<span class="string">&quot;queryDateEnd&quot;</span>, endTime);</span><br><span class="line">    param.put(<span class="string">&quot;currentPage&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    param.put(<span class="string">&quot;pageSize&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> cbsHttpUtil.doHttp(cbsConfig.getOpenApiUrl() + cbsConfig.getPaymentQueryUrl(), JSONObject.toJSONString(param));</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.parseObject(response, JSONObject.class);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;0&quot;</span>.equals(jsonObject.getString(<span class="string">&quot;code&quot;</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请求失败: &quot;</span> + jsonObject.getString(<span class="string">&quot;msg&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> jsonObject.getJSONObject(<span class="string">&quot;data&quot;</span>).getJSONArray(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">    List&lt;CBSPaymentApplyEntity&gt; res = jsonArray.toJavaList(CBSPaymentApplyEntity.class);</span><br><span class="line">    <span class="comment">// 查询结果处理, 一般来说, 只需要处理支付状态不是最终状态的记录即可</span></span><br><span class="line">    <span class="comment">// 支付状态&quot;pay_status&quot;的最终状态有&quot;j&quot;, &quot;g&quot;, &quot;i&quot;, &quot;h&quot;, &quot;k&quot;, &quot;d&quot;, 只需要找到系统保存的记录中不是这些状态的记录进行处理即可</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    log.info(<span class="string">&quot;==获取支付结果结束==&quot;</span>);</span><br><span class="line">    <span class="comment">// 发布监听事件</span></span><br><span class="line">    applicationContext.publishEvent(<span class="keyword">new</span> <span class="title class_">PaymentResultEvent</span>(update));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本人此处在支付结果查询后进行了支付记录的结果修改, 为了避免重复处理, 每次查询后只处理系统数据库保存的记录中支付状态不是最终状态的记录</p><p>此处使用了事件监听来处理后续任务, 这样做有两个好处:</p><ol><li>分离结果获取和业务逻辑</li><li>支付结果的获取处理通常是非常频繁的(公司财务要求太高), 这样在系统之间的调用或者在处理业务时会出现结果等待或者异步问题, 使用事件监听方便处理, 不会阻塞请求支付结果的任务(使用消息队列也可以, 好像没有多大必要)</li></ol><p>后面的电子回单和交易明细也使用了相同的处理</p><p>电子回单: <code>bucketFileUrl</code>字段就是文件的下载地址, 从浏览器中即可直接访问, 对接指南中描述有效时间为7日</p><h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3><p>其实从对接上而言并没有难度, 只是一些问题需要多沟通解决. 还有就是在处理数据上确保数据的准确, 不会重复等问题, 毕竟涉及到钞票.</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 招商银行CBS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目对接海康SDK</title>
      <link href="/2024/02/21/other/%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%8E%A5%E6%B5%B7%E5%BA%B7SDK/"/>
      <url>/2024/02/21/other/%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%8E%A5%E6%B5%B7%E5%BA%B7SDK/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>年前给公司对接了一下招商银行的<code>CBS</code>, 现在想整理一篇文章记录一下. 想起来之前对接过海康的<code>SDK</code>, 那真是折磨, 先把文章从<code>CSDN</code>上搬到自己的博客里吧.</p><p>原文连接: <a href="https://blog.csdn.net/weixin_43728193/article/details/125385433">https://blog.csdn.net/weixin_43728193/article/details/125385433</a></p><p>以下是正文内容:</p><p>最近公司一个项目要对接海康的<code>SDK</code>, 落到了我手里, 折磨了我一个月, 写个博客来吐槽, 本篇只通过报警布防介绍对接海康<code>SDK</code>, 实时预览和视频回放下次一定。</p><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p>设备网络<code>SDK</code>是基于设备私有网络通信协议开发的，为海康威视各类硬件产品服务的配套模块，用于远程访问和控制设备的软件二次开发。</p><h3 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h3><p>下载地址: <code>https://open.hikvision.com/download</code><br />从地址中选择硬件产品, 选择合适的版本下载即可。内含<code>SDK</code>动态库, 开发文档, <code>Demo</code>示例</p><h3 id="使用流程"><a class="markdownIt-Anchor" href="#使用流程"></a> 使用流程</h3><p><img src="%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E4%B8%BB%E8%A6%81%E6%B5%81%E7%A8%8B.png" alt="接口调用主要流程" /></p><blockquote><ol><li>虚线指向为非必要操作;</li><li>功能模块可以单选多选不选;</li><li><code>SDK</code>资源和设备操作为必要操作, 否则会无法操作或者没有效果.</li></ol></blockquote><h3 id="对接demo"><a class="markdownIt-Anchor" href="#对接demo"></a> 对接<code>Demo</code></h3><p>本人使用<code>Java</code>开发报警预防相关, 则以此为例, 在<code>Spring Boot</code>项目中对接海康<code>SDK</code>.</p><h4 id="官方demo"><a class="markdownIt-Anchor" href="#官方demo"></a> 官方<code>Demo</code></h4><p>为方便理清思路, 将官方<code>Demo</code>的主要流程代码放置在此<br />官方<code>Dmeo</code>:<br />在使用之前请确保按照说明文档中的方法, 将相关文件和文件夹放置妥当</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="comment">// 加载SDK资源, 获取资源实例</span></span><br><span class="line"><span class="keyword">if</span> (hCNetSDK == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!CreateSDKInstance()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Load SDK fail&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">hCNetSDK.NET_DVR_Init();</span><br><span class="line"><span class="comment">// 加载日志</span></span><br><span class="line">hCNetSDK.NET_DVR_SetLogToFile(<span class="number">3</span>, <span class="string">&quot;../sdklog&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//设置报警回调函数</span></span><br><span class="line"><span class="keyword">if</span> (fMSFCallBack_V31 == <span class="literal">null</span>) &#123;</span><br><span class="line">    fMSFCallBack_V31 = <span class="keyword">new</span> <span class="title class_">FMSGCallBack_V31</span>();</span><br><span class="line">    <span class="type">Pointer</span> <span class="variable">pUser</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!hCNetSDK.NET_DVR_SetDVRMessageCallBack_V31(fMSFCallBack_V31, pUser)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;设置回调函数失败!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;设置回调函数成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设备上传的报警信息是COMM_VCA_ALARM(0x4993)类型，</span></span><br><span class="line"><span class="comment"> 在SDK初始化之后增加调用NET_DVR_SetSDKLocalCfg(enumType为NET_DVR_LOCAL_CFG_TYPE_GENERAL)设置通用参数NET_DVR_LOCAL_GENERAL_CFG的byAlarmJsonPictureSeparate为1，</span></span><br><span class="line"><span class="comment"> 将Json数据和图片数据分离上传，这样设置之后，报警布防回调函数里面接收到的报警信息类型为COMM_ISAPI_ALARM(0x6009)，</span></span><br><span class="line"><span class="comment"> 报警信息结构体为NET_DVR_ALARM_ISAPI_INFO（与设备无关，SDK封装的数据结构），更便于解析。*/</span></span><br><span class="line">HCNetSDK.<span class="type">NET_DVR_LOCAL_GENERAL_CFG</span> <span class="variable">struNET_DVR_LOCAL_GENERAL_CFG</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HCNetSDK</span>.NET_DVR_LOCAL_GENERAL_CFG();</span><br><span class="line">struNET_DVR_LOCAL_GENERAL_CFG.byAlarmJsonPictureSeparate = <span class="number">1</span>;   <span class="comment">//设置JSON透传报警数据和图片分离</span></span><br><span class="line">struNET_DVR_LOCAL_GENERAL_CFG.write();</span><br><span class="line"><span class="type">Pointer</span> <span class="variable">pStrNET_DVR_LOCAL_GENERAL_CFG</span> <span class="operator">=</span> struNET_DVR_LOCAL_GENERAL_CFG.getPointer();</span><br><span class="line">hCNetSDK.NET_DVR_SetSDKLocalCfg(<span class="number">17</span>, pStrNET_DVR_LOCAL_GENERAL_CFG);</span><br><span class="line"><span class="comment">// 设备登录</span></span><br><span class="line">Alarm.Login_V40(<span class="number">0</span>, <span class="string">&quot;10.17.35.41&quot;</span>, (<span class="type">short</span>) <span class="number">8000</span>, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;abcd1234&quot;</span>);</span><br><span class="line"><span class="comment">// 设备布防</span></span><br><span class="line">Alarm.SetAlarm(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">//这里加入控制台输入控制，是为了保持连接状态，当输入Y表示布防结束</span></span><br><span class="line">    System.out.print(<span class="string">&quot;请选择是否撤出布防(Y/N)：&quot;</span>);</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> input.next();</span><br><span class="line">    <span class="keyword">if</span> (str.equals(<span class="string">&quot;Y&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Alarm.Logout(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此处注意官方<code>Demo</code>中的<code>while(true)</code>, 下面会有使用和相关说明</p></blockquote><h4 id="应用于springboot项目中"><a class="markdownIt-Anchor" href="#应用于springboot项目中"></a> 应用于<code>SpringBoot</code>项目中</h4><h5 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h5><p>以下配置是本人项目中进行相关配置<br />配置类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;hik&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HCNetSDKConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HCNetSDKConfig HC_NET_SDK_CONFIG;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录的设备</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;DeviceApp&gt; devices = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SDK资源路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String sdkPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String logPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否自动登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> deviceAutoLogin;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设备用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设备密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超脑ip</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String superBrainIp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postConstruct</span><span class="params">()</span> &#123;</span><br><span class="line">        HC_NET_SDK_CONFIG = <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>项目的设备较少, 在配置类中用一个<code>List</code>作为设备存档, 具体存档方式应以具体项目具体选择.</li><li>项目中的所有设备用户名和密码一致, 所以此处使用配置作为数据项, 具体数据来源应以具体项目为准</li></ol></blockquote><p>配置文件:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hik:</span></span><br><span class="line">  <span class="attr">sdk-path:</span> <span class="string">D:\\workspace\\idea\\hazard-chemical-web\\sdk</span></span><br><span class="line">  <span class="attr">device-auto-login:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">super-brain-ip:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.45</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h5 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h5><p>此处寡人是将此资源比作了一个应用, 所以代码中会有<code>App</code>字样<br />设备相关:<br />设备信息类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Device</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">short</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> userAsync;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String deviceName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设备应用类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeviceApp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(DeviceApp.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HCNetSDK hCNetSDK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设备信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Device device;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">lUserID</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">//用户句柄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">lDChannel</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">//IP通道号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">lAlarmHandle</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// 报警布防句柄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注销标记</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> logout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeviceApp</span><span class="params">(HCNetSDK hcNetSDK, Device device)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.hCNetSDK = hcNetSDK;</span><br><span class="line">        <span class="built_in">this</span>.device = device;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设备登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deviceLogin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.logout) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(device.getIp() + <span class="string">&quot;: 设备登录!&quot;</span>);</span><br><span class="line">        <span class="comment">//登录设备，每一台设备分别登录; 登录句柄是唯一的，可以区分设备</span></span><br><span class="line">        HCNetSDK.<span class="type">NET_DVR_USER_LOGIN_INFO</span> <span class="variable">m_strLoginInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HCNetSDK</span>.NET_DVR_USER_LOGIN_INFO();<span class="comment">//设备登录信息</span></span><br><span class="line">        HCNetSDK.<span class="type">NET_DVR_DEVICEINFO_V40</span> <span class="variable">m_strDeviceInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HCNetSDK</span>.NET_DVR_DEVICEINFO_V40();<span class="comment">//设备信息</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">m_sDeviceIP</span> <span class="operator">=</span> device.getIp();<span class="comment">//设备ip地址</span></span><br><span class="line">        m_strLoginInfo.sDeviceAddress = <span class="keyword">new</span> <span class="title class_">byte</span>[HCNetSDK.NET_DVR_DEV_ADDRESS_MAX_LEN];</span><br><span class="line">        System.arraycopy(m_sDeviceIP.getBytes(StandardCharsets.UTF_8), <span class="number">0</span>, m_strLoginInfo.sDeviceAddress, <span class="number">0</span>, m_sDeviceIP.length());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">m_sUsername</span> <span class="operator">=</span> device.getUsername();<span class="comment">//设备用户名</span></span><br><span class="line">        m_strLoginInfo.sUserName = <span class="keyword">new</span> <span class="title class_">byte</span>[HCNetSDK.NET_DVR_LOGIN_USERNAME_MAX_LEN];</span><br><span class="line">        System.arraycopy(m_sUsername.getBytes(StandardCharsets.UTF_8), <span class="number">0</span>, m_strLoginInfo.sUserName, <span class="number">0</span>, m_sUsername.length());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">m_sPassword</span> <span class="operator">=</span> device.getPassword();<span class="comment">//设备密码</span></span><br><span class="line">        m_strLoginInfo.sPassword = <span class="keyword">new</span> <span class="title class_">byte</span>[HCNetSDK.NET_DVR_LOGIN_PASSWD_MAX_LEN];</span><br><span class="line">        System.arraycopy(m_sPassword.getBytes(StandardCharsets.UTF_8), <span class="number">0</span>, m_strLoginInfo.sPassword, <span class="number">0</span>, m_sPassword.length());</span><br><span class="line"></span><br><span class="line">        m_strLoginInfo.wPort = device.getPort(); <span class="comment">//SDK端口</span></span><br><span class="line">        m_strLoginInfo.bUseAsynLogin = device.isUserAsync(); <span class="comment">//是否异步登录：0- 否，1- 是</span></span><br><span class="line">        m_strLoginInfo.write();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.lUserID = <span class="built_in">this</span>.hCNetSDK.NET_DVR_Login_V40(m_strLoginInfo, m_strDeviceInfo);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.lUserID == -<span class="number">1</span>) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;登录失败，错误码为&quot;</span> + <span class="built_in">this</span>.hCNetSDK.NET_DVR_GetLastError());</span><br><span class="line">            <span class="built_in">this</span>.logout = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(m_sDeviceIP + <span class="string">&quot;:设备登录成功! &quot;</span> + <span class="string">&quot;设备序列号:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(m_strDeviceInfo.struDeviceV30.sSerialNumber).trim());</span><br><span class="line">            <span class="built_in">this</span>.logout = <span class="literal">false</span>;</span><br><span class="line">            m_strDeviceInfo.read();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//byStartDChan为IP通道起始通道号, 预览回放NVR的IP通道时需要根据起始通道号进行取值</span></span><br><span class="line">        <span class="built_in">this</span>.lDChannel = m_strDeviceInfo.struDeviceV30.byStartDChan;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设备注销</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deviceLogout</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;设备注销!&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.logout = hCNetSDK.NET_DVR_Logout(lUserID);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.logout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 布防</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> device</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setAlarm</span><span class="params">(DeviceApp device)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;布放!&quot;</span>);</span><br><span class="line">        <span class="comment">//尚未布防,需要布防</span></span><br><span class="line">        <span class="keyword">if</span> (device.getLAlarmHandle() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//报警布防参数设置</span></span><br><span class="line">            HCNetSDK.<span class="type">NET_DVR_SETUPALARM_PARAM_V50</span> <span class="variable">m_strAlarmInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HCNetSDK</span>.NET_DVR_SETUPALARM_PARAM_V50();</span><br><span class="line">            m_strAlarmInfo.dwSize = m_strAlarmInfo.size();</span><br><span class="line">            m_strAlarmInfo.byLevel = <span class="number">1</span>;  <span class="comment">//布防等级</span></span><br><span class="line">            m_strAlarmInfo.byAlarmInfoType = <span class="number">1</span>;   <span class="comment">// 智能交通报警信息上传类型：0- 老报警信息（NET_DVR_PLATE_RESULT），1- 新报警信息(NET_ITS_PLATE_RESULT)</span></span><br><span class="line">            m_strAlarmInfo.byDeployType = <span class="number">1</span>;   <span class="comment">//布防类型：0-客户端布防，1-实时布防</span></span><br><span class="line">            m_strAlarmInfo.write();</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> xmlData();</span><br><span class="line">            log.info(<span class="string">&quot;xml 参数: &#123;&#125;&quot;</span>, s);</span><br><span class="line">            <span class="type">Pointer</span> <span class="variable">mode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Memory</span>(s.length() + <span class="number">1</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = s.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">            mode.write(<span class="number">0</span>, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">            <span class="type">int</span> <span class="variable">lAlarmHandle</span> <span class="operator">=</span> device.getHCNetSDK().NET_DVR_SetupAlarmChan_V50(device.getLUserID(), m_strAlarmInfo, mode, s.length() + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//            int lAlarmHandle = device.getHCNetSDK().NET_DVR_SetupAlarmChan_V41(device.getLUserID(), m_strAlarmInfo);</span></span><br><span class="line">            device.setLAlarmHandle(lAlarmHandle);</span><br><span class="line">            log.info(<span class="string">&quot;lAlarmHandle: &quot;</span> + lAlarmHandle);</span><br><span class="line">            <span class="keyword">if</span> (lAlarmHandle == -<span class="number">1</span>) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;布防失败，错误码为&quot;</span> + device.getHCNetSDK().NET_DVR_GetLastError());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;布防成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;设备已经布防，请先撤防！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;设备销毁!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logout) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;!<span class="built_in">this</span>.logout &amp;&amp; i &lt; <span class="number">3</span> ; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logout = deviceLogout();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设备xml配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">xmlData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;SubscribeEvent version=\&quot;2.0\&quot; xmlns=\&quot;http://www.isapi.org/ver20/XMLSchema\&quot;&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;eventMode&gt;list&lt;/eventMode&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;EventList&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;Event&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;type&gt;fielddetection,&lt;/type&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;pictureURLType&gt;binary&lt;/pictureURLType&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/Event&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;Event&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;type&gt;linedetection&lt;/type&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;pictureURLType&gt;binary&lt;/pictureURLType&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/Event&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;Event&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;type&gt;group&lt;/type&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;pictureURLType&gt;binary&lt;/pictureURLType&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/Event&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/EventList&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;channels&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/channels&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;identityKey&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/identityKey&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/SubscribeEvent&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源应用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HCNetSDKApp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(HCNetSDKApp.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HCNetSDKConfig hcNetSDKConfig;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IVideoService videoService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源标记</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">cleanup</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HCNetSDK hCNetSDK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FExceptionCallBack_Imp fExceptionCallBack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化SDK资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CreateSDKException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">initSDKInstance</span><span class="params">()</span> <span class="keyword">throws</span> CreateSDKException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.cleanup) &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;SDK初始化!&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建SDK实例</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">createSDK</span> <span class="operator">=</span> CreateSDKInstance();</span><br><span class="line">        <span class="keyword">if</span> (!createSDK) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;创建SDK实例失败!&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CreateSDKException</span>(<span class="string">&quot;创建SDK实例失败!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建SDK实例成功!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// SDK资源初始化</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">initSDK</span> <span class="operator">=</span> hCNetSDK.NET_DVR_Init();</span><br><span class="line">        <span class="keyword">if</span> (!initSDK) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;初始化SDK资源失败!&quot;</span>);</span><br><span class="line">            hCNetSDK.NET_DVR_Cleanup();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CreateSDKException</span>(<span class="string">&quot;初始化SDK资源失败!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cleanup = <span class="literal">false</span>;</span><br><span class="line">            log.info(<span class="string">&quot;初始化SDK资源成功!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fExceptionCallBack = <span class="keyword">new</span> <span class="title class_">FExceptionCallBack_Imp</span>();</span><br><span class="line">        <span class="type">Pointer</span> <span class="variable">pUser</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!hCNetSDK.NET_DVR_SetExceptionCallBack_V30(<span class="number">0</span>, <span class="number">0</span>, fExceptionCallBack, pUser)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;初始化异常消息回调失败!&quot;</span>);</span><br><span class="line">            <span class="comment">// 初始化异常消息回调失败, 释放SDK资源</span></span><br><span class="line">            hCNetSDK.NET_DVR_Cleanup();</span><br><span class="line">            <span class="built_in">this</span>.cleanup = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CreateSDKException</span>(<span class="string">&quot;初始化异常消息回调失败!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;初始化异常消息回调成功!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//启动SDK写日志</span></span><br><span class="line">        hCNetSDK.NET_DVR_SetLogToFile(<span class="number">3</span>, hcNetSDKConfig.getLogPath(), <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoDevicesLogin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AtomicBoolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line">        QueryWrapper&lt;VideoShowModel&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.isNotNull(<span class="string">&quot;IP&quot;</span>);</span><br><span class="line">        wrapper.ne(<span class="string">&quot;IP&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        List&lt;Video&gt; videos = videoService.getBaseMapper().selectList(wrapper);</span><br><span class="line">        List&lt;Device&gt; devices = videos.stream().map(item -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (hcNetSDKConfig.getSuperBrainIp().equals(item.getIp())) &#123;</span><br><span class="line">                flag.set(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Device</span> <span class="variable">device</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Device</span>();</span><br><span class="line">            device.setIp(item.getIp());</span><br><span class="line">            device.setId(item.getSheetId());</span><br><span class="line">            <span class="keyword">return</span> device;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">if</span> (!flag.get()) &#123;</span><br><span class="line">            <span class="type">Device</span> <span class="variable">device</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Device</span>();</span><br><span class="line">            device.setIp(hcNetSDKConfig.getSuperBrainIp());</span><br><span class="line">            devices.add(device);</span><br><span class="line">        &#125;</span><br><span class="line">        devicesLogin(devices);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设备登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">devicesLogin</span><span class="params">(List&lt;Device&gt; devices)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Device device : devices) &#123;</span><br><span class="line">            deviceLogin(device);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设备登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> device</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> DeviceApp <span class="title function_">deviceLogin</span><span class="params">(Device device)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DeviceApp</span> <span class="variable">deviceApp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeviceApp</span>(<span class="built_in">this</span>.hCNetSDK, device);</span><br><span class="line">            <span class="comment">// 设备登录注册</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">deviceLogin</span> <span class="operator">=</span> deviceApp.deviceLogin();</span><br><span class="line">            <span class="keyword">if</span> (!deviceLogin) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;注册设备失败!&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CreateSDKException</span>(<span class="string">&quot;注册设备失败!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;注册设备成功!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            HCNetSDKConfig.devices.add(deviceApp);</span><br><span class="line">            log.info(<span class="string">&quot;已登录设备数量: &#123;&#125;&quot;</span>, HCNetSDKConfig.devices.size());</span><br><span class="line">            <span class="keyword">return</span> deviceApp;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CreateSDKException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放SDK资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;释放SDK资源!&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.cleanup = hCNetSDK.NET_DVR_Cleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;SDK实例销毁!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.cleanup) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; !<span class="built_in">this</span>.cleanup &amp;&amp; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!HCNetSDKConfig.devices.isEmpty()) &#123;</span><br><span class="line">                HCNetSDKConfig.devices.forEach(item -&gt; &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> item.deviceLogout();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HCNetSDKConfig.devices.clear();</span><br><span class="line">        cleanup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FExceptionCallBack_Imp</span> <span class="keyword">implements</span> <span class="title class_">HCNetSDK</span>.FExceptionCallBack &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(<span class="type">int</span> dwType, <span class="type">int</span> lUserID, <span class="type">int</span> lHandle, Pointer pUser)</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;异常事件类型: &#123;&#125;&quot;</span>, dwType);</span><br><span class="line">            log.error(<span class="string">&quot;异常用户主键: &#123;&#125;&quot;</span>, lUserID);</span><br><span class="line">            log.error(<span class="string">&quot;异常处理: &#123;&#125;&quot;</span>, lHandle);</span><br><span class="line">            log.error(<span class="string">&quot;异常Pointer: &#123;&#125;&quot;</span>, pUser);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态库加载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">CreateSDKInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;创建SDK实例!&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">strDllPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        log.info(<span class="string">&quot;hc net sdk config: &#123;&#125;&quot;</span>, hcNetSDKConfig);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (OSSelectUtil.isWindows())</span><br><span class="line">                <span class="comment">//win系统加载库路径</span></span><br><span class="line">                strDllPath = hcNetSDKConfig.getSdkPath() + <span class="string">&quot;\\windows\\HCNetSDK.dll&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (OSSelectUtil.isLinux())</span><br><span class="line">                <span class="comment">//Linux系统加载库路径</span></span><br><span class="line">                strDllPath = hcNetSDKConfig.getSdkPath() + <span class="string">&quot;/linux/libhcnetsdk.so&quot;</span>;</span><br><span class="line">            <span class="built_in">this</span>.hCNetSDK = (HCNetSDK) Native.loadLibrary(strDllPath, HCNetSDK.class);</span><br><span class="line">            <span class="built_in">this</span>.cleanup = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;loadLibrary: &quot;</span> + strDllPath + <span class="string">&quot; Error: &quot;</span> + ex.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明:</p><ol><li>资源应用使用了<code>Spring</code>的组件注解<code>@Component</code>, 因为该资源只需要加载一次即可, 可以引用<code>Spring</code>的单例模式</li><li><font color = red>注意: </font> 在之前的配置项中, <code>sdk-path</code>使用了<code>\\</code>作为目录分隔符, 本项目是在<code>windows</code>服务器上运行, 所以使用<code>windows</code>目录格式, 尝试过使用<code>/</code>和<code>\</code>两种方式,都失败了,具体原因,猜想是<code>windows</code>使用<code>\</code>作为分隔符,字符串中<code>\</code>又为转移字符导致的;至于为什么不能用<code>/</code>或者其他原因,我知道不知道,你自己体会吧.</li><li>此处的设备登录相关内容是本人项目中查询相关设备,然后调用设备中的登录方法,不一定非要在此处,可将其作为相关案例使用, 需根据项目要求进行合理处理.</li></ol></blockquote><h5 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h5><p>流程启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlarmListenerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAlarmListenerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HCNetSDKApp hcNetSDKApp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startListener</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">AlarmListenerTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlarmListenerTask</span>(hcNetSDKApp);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task);</span><br><span class="line">thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>启动方式有很多, 可以选择手动启动, 也可以选择项目运行时启动, 此处项目中采用项目启动时启动</li><li>项目启动时执行某些方法的方式有多种, 可参照博文: <a href='https://juejin.cn/post/7025858036002455589'>Springboot启动后执行方法的四种方式</a></li><li>此处使用新建守护线程的方式启动报警布防功能, 下方代码展示后便会知晓.</li></ol></blockquote><p>流程任务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlarmListenerTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AlarmListenerTask.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HCNetSDKApp hcNetSDKApp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AlarmListenerTask</span><span class="params">(HCNetSDKApp hcNetSDKApp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hcNetSDKApp = hcNetSDKApp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (hcNetSDKApp.getHCNetSDK() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> hcNetSDKApp.initSDKInstance();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CreateSDKException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SDK实例创建失败!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">FMSGCallBack_V31</span> <span class="variable">fMSFCallBack_V31</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FMSGCallBack_V31</span>();</span><br><span class="line">        <span class="type">Pointer</span> <span class="variable">pUser</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!hcNetSDKApp.getHCNetSDK().NET_DVR_SetDVRMessageCallBack_V50(<span class="number">0</span>, fMSFCallBack_V31, pUser)) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;设置回调函数失败!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;设置回调函数成功!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 设备上传的报警信息是COMM_VCA_ALARM(0x4993)类型，</span></span><br><span class="line"><span class="comment">         在SDK初始化之后增加调用NET_DVR_SetSDKLocalCfg(enumType为NET_DVR_LOCAL_CFG_TYPE_GENERAL)设置通用参数NET_DVR_LOCAL_GENERAL_CFG的byAlarmJsonPictureSeparate为1，</span></span><br><span class="line"><span class="comment">         将Json数据和图片数据分离上传，这样设置之后，报警布防回调函数里面接收到的报警信息类型为COMM_ISAPI_ALARM(0x6009)，</span></span><br><span class="line"><span class="comment">         报警信息结构体为NET_DVR_ALARM_ISAPI_INFO（与设备无关，SDK封装的数据结构），更便于解析。*/</span></span><br><span class="line">        HCNetSDK.<span class="type">NET_DVR_LOCAL_GENERAL_CFG</span> <span class="variable">struNET_DVR_LOCAL_GENERAL_CFG</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HCNetSDK</span>.NET_DVR_LOCAL_GENERAL_CFG();</span><br><span class="line">        struNET_DVR_LOCAL_GENERAL_CFG.byAlarmJsonPictureSeparate = <span class="number">1</span>;   <span class="comment">//设置JSON透传报警数据和图片分离</span></span><br><span class="line">        struNET_DVR_LOCAL_GENERAL_CFG.write();</span><br><span class="line">        <span class="type">Pointer</span> <span class="variable">pStrNET_DVR_LOCAL_GENERAL_CFG</span> <span class="operator">=</span> struNET_DVR_LOCAL_GENERAL_CFG.getPointer();</span><br><span class="line">        hcNetSDKApp.getHCNetSDK().NET_DVR_SetSDKLocalCfg(<span class="number">17</span>, pStrNET_DVR_LOCAL_GENERAL_CFG);</span><br><span class="line">        <span class="comment">// 设备登录</span></span><br><span class="line">        hcNetSDKApp.autoDevicesLogin();</span><br><span class="line">        log.info(<span class="string">&quot;布防设备数量: &#123;&#125;&quot;</span>, HCNetSDKConfig.devices.size());</span><br><span class="line">        <span class="comment">// 设备布防</span></span><br><span class="line">        HCNetSDKConfig.devices.forEach(DeviceApp::setAlarm);</span><br><span class="line">        <span class="comment">// 维持线程</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>此任务类中的<code>run</code>方法中便是整个布防流程</li><li><code>while(true)&#123;&#125;</code>这个位置的代码即是前面官方<code>Demo</code>中的<code>while</code>代码的修改</li></ol></blockquote><blockquote><p>关于为什么新建一个守护线程处理流程:</p><ol><li><code>SDK</code>的模块功能需要维持一条线程保持运转,官方<code>Demo</code>中的<code>while</code>就是为了维持线程, 即使它被卡在<code>while</code>处无法继续向下进行,<br />猜测:<code>SDK</code>为当前线程创建了守护线程进行布防监听, 当前线程中断了,布防的守护线程就挂掉了.</li><li><code>main</code>线程在加载资源后就会结束, 本人在初次尝试时即使用<code>main</code>执行流程,结果是报警回调后续便不再触发,所以选择新建一条线程来进行流程操作.</li><li>使用守护线程是因为代码中有死循环代码, 守护线程在主线程结束后便会被杀死.但前两天看博文,好像<code>spring</code>项目在结束程序时会杀死所有线程,具体我不太了解,希望有大佬解答.</li></ol></blockquote><h3 id="挖坑"><a class="markdownIt-Anchor" href="#挖坑"></a> 挖坑</h3><p>实时预览</p><p>视频回放</p><h3 id="吐槽"><a class="markdownIt-Anchor" href="#吐槽"></a> 吐槽</h3><p>之前做完后主管要我写一篇对接文档给之后的开发人员作指导, 然后就被拿去批复了,我看了批注之后我表示想买个袋子把他装起来吊着打.<br />问题1: 设备注册需要将所有的设备都注册吗?<br />我丢,你爱注册多少注册多少,要不去搜罗一下全球有多少海康的摄像头,都注册进去吧!<br />问题2: 设备在注册登录之后就要注销吗?<br />我去,微信登录了就要退出吗?人出生了就要下葬吗?</p><p><em><strong><font color=#00FF00>如果有幸有人能看到这篇博文, 请转告身边的人, 不要为难开发人员了, 他们不是万能的, 劝大家善良</font></strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对接海康SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud系列(八)---服务划分</title>
      <link href="/2024/02/19/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E5%85%AB%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86/"/>
      <url>/2024/02/19/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E5%85%AB%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>前面我们将安全认证框架<code>SpringSecurity</code>添加为一个服务, 当我们添加认证服务后, 便实现的登录效果, 但是在资源服务中会有一下问题:</p><ol><li>资源服务无法获取到用户信息, 因为是在不同的服务应用中, 用户信息不能跨应用传递</li><li>当用户已经退出登录, 或者登录失效后, 访问资源服务依然可以正常返回</li></ol><p>上述问题是因为在资源服务中没有获取用户信息, 更没有进行用户信息的验证, 所以认证权限等的内容全是纸老虎, 没有起到任何作用</p><p>基于以上问题, 需要将<code>SpringSecurity</code>添加到资源服务中, <code>SpringSecurity</code>框架在资源服务中需要的内容主要有三个: 一. 获取用户信息; 二. 验证是否登录; 三. 验证用户权限</p><h3 id="处理"><a class="markdownIt-Anchor" href="#处理"></a> 处理</h3><p>上述的三项内容我们在前文中已经进行了处理, 只要将需要的内容拿来即可.</p><ol><li>用户信息: <code>securityContextRepository</code>配置会话上下文存储, <mark>一定要实现用户信息在不同应用服务之间的可访问性, 即<code>session</code>共享</mark></li><li>验证是否登录结果处理: <code>exceptionHandling</code>配置未登录或者登录失效的处理</li><li>验证用户权限: <code>AuthorizationFilter</code>处理</li></ol><p>我们有多个资源服务, 每个资源服务都需要添加这个验证规则, 如果为每一个资源服务都添加一套验证使用的代码显然是不合理的, 所以我们将验证的代码添加到公共模块中, 然后区分认证服务和资源服务进行不同的配置即可</p><p>第一个目标要明确资源服务和认证服务各需要哪些内容</p><p>一: 资源服务:</p><ol><li>获取用户信息: 配置会话上下文存储</li><li>是否登录的结果处理: 配置未登录或登录失效的处理</li><li>验证用户权限: 开启权限验证过滤器</li><li>路径匹配: 添加路径匹配规则, 每个资源服务都只处理自己匹配的路径, 其他路径不处理</li></ol><p>二: 认证服务:</p><ol><li>登录: 配置登录成功和失败处理</li><li>注销: 配置注销处理和注销成功处理</li><li>保存用户信息: 配置会话上下文存储</li><li>是否登录的结果处理: 配置未登录和登录失效的处理</li><li>路径匹配: 添加路径匹配规则, 只匹配登录路径和注销路径, 其他路径不处理</li></ol><p>第二个目标我们需要明确何时开启<code>SpringSecurity</code></p><p>当我们创建一个项目时, 我们是在该项目中添加<code>SpringSecurity</code>的, 只有将其标记为资源服务或者认证服务时, 我们才需要开启<code>SpringSecurity</code>, 比如我们要拆分出一个文件上传的服务, 该服务是不需要开启<code>SpringSecurity</code>的</p><h3 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h3><h4 id="security的开启与关闭"><a class="markdownIt-Anchor" href="#security的开启与关闭"></a> <code>Security</code>的开启与关闭</h4><p>我们为了实现第二个目标, 我们需要默认将<code>SpringSecurity</code>的自动配置关闭, 然后在认证服务和资源服务两种类型的服务中开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认关闭SpringSecurity服务</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration(exclude = &#123;SecurityAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSecurityConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 认证服务和资源服务开启SpringSecurity</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ApplicationSecurityConfig</span> &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="资源服务和认证服务的区分配置"><a class="markdownIt-Anchor" href="#资源服务和认证服务的区分配置"></a> 资源服务和认证服务的区分配置</h4><p>为了实现第二个目标, 我们需要开启<code>SpringSecurity</code>, 并且需要进行不同的配置, 资源服务之间的配置相似</p><p>首先, 所有服务的相似配置可以同时添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ApplicationSecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApplicationSecurityConfig</span><span class="params">(</span></span><br><span class="line"><span class="params">            ServerProperties serverProperties, AuthenticationSaveHandler authenticationSaveHandler,</span></span><br><span class="line"><span class="params">            CustomerAuthenticationHandler customerAuthenticationHandler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serverProperties = serverProperties;</span><br><span class="line">        <span class="built_in">this</span>.authenticationSaveHandler = authenticationSaveHandler;</span><br><span class="line">        <span class="built_in">this</span>.customerAuthenticationHandler = customerAuthenticationHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECURITY_FILTER_CHAIN_BEAN</span> <span class="operator">=</span> <span class="string">&quot;securityFilterChain&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ServerProperties serverProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationSaveHandler authenticationSaveHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> CustomerAuthenticationHandler customerAuthenticationHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = SECURITY_FILTER_CHAIN_BEAN)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类做了以下几件事:</p><ol><li>开启<code>SpringSecurity</code></li><li>定义了一个类型为<code>SecurityFilterChain</code>, 名为<code>securityFilterChain</code>的<code>bean</code>, 但是没有实现</li><li>定义并要求添加服务源配置, 会话上下文处理器, 未登录或登录失效后的处理器</li></ol><p>其次我们要实现资源服务和认证服务的不同配置</p><p>我们分别实现上面的配置类, 分别添加不同的配置</p><p>认证服务配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationApplicationSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">ApplicationSecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserLogoutHandler userLogoutHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserLogoutSuccessHandler userLogoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoginSuccessHandler loginSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoginFailureHandler loginFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AuthenticationApplicationSecurityConfig</span><span class="params">(ServerProperties serverProperties,</span></span><br><span class="line"><span class="params">                                                   AuthenticationSaveHandler authenticationSaveHandler,</span></span><br><span class="line"><span class="params">                                                   UserLogoutHandler userLogoutHandler,</span></span><br><span class="line"><span class="params">                                                   UserLogoutSuccessHandler userLogoutSuccessHandler,</span></span><br><span class="line"><span class="params">                                                   LoginSuccessHandler loginSuccessHandler,</span></span><br><span class="line"><span class="params">                                                   LoginFailureHandler loginFailureHandler,</span></span><br><span class="line"><span class="params">                                                   CustomerAuthenticationHandler customerAuthenticationHandler)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(serverProperties, authenticationSaveHandler, customerAuthenticationHandler);</span><br><span class="line">        <span class="built_in">this</span>.loginSuccessHandler = loginSuccessHandler;</span><br><span class="line">        <span class="built_in">this</span>.loginFailureHandler = loginFailureHandler;</span><br><span class="line">        <span class="built_in">this</span>.userLogoutHandler = userLogoutHandler;</span><br><span class="line">        <span class="built_in">this</span>.userLogoutSuccessHandler = userLogoutSuccessHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf(AbstractHttpConfigurer::disable);</span><br><span class="line">        http.securityMatcher(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/logout&quot;</span>);</span><br><span class="line">        http.formLogin((config) -&gt;</span><br><span class="line">                        config</span><br><span class="line">                                .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">                                .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">                                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                                .failureHandler(loginFailureHandler)</span><br><span class="line">                                .successHandler(loginSuccessHandler)</span><br><span class="line">        );</span><br><span class="line">        http.logout(</span><br><span class="line">                (config) -&gt; config</span><br><span class="line">                        .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">                        .addLogoutHandler(userLogoutHandler)</span><br><span class="line">                        .logoutSuccessHandler(userLogoutSuccessHandler)</span><br><span class="line">        );</span><br><span class="line">        http.exceptionHandling(config -&gt;</span><br><span class="line">                config.authenticationEntryPoint(customerAuthenticationHandler)</span><br><span class="line">        );</span><br><span class="line">        http.securityContext(config -&gt;</span><br><span class="line">             config.securityContextRepository(authenticationSaveHandler)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>认证服务配置中我们做了<code>SecurityFilterChain</code>的实现, 配置了公共配置之外登录和注销操作, 以及路径匹配规则</p><p>资源服务配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceApplicationSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">ApplicationSecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResourceApplicationSecurityConfig</span><span class="params">(ServerProperties serverProperties, AuthenticationSaveHandler authenticationSaveHandler, CustomerAuthenticationHandler customerAuthenticationHandler)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(serverProperties, authenticationSaveHandler, customerAuthenticationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> serverProperties.getServlet().getContextPath();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(contextPath)) &#123;</span><br><span class="line">            contextPath = <span class="string">&quot;/**&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            contextPath = (!contextPath.startsWith(<span class="string">&quot;/&quot;</span>) ? <span class="string">&quot;/&quot;</span> : <span class="string">&quot;&quot;</span>) + contextPath + <span class="string">&quot;/**&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> contextPath;</span><br><span class="line">        http.csrf(AbstractHttpConfigurer::disable);</span><br><span class="line"></span><br><span class="line">        http.securityMatcher(path);</span><br><span class="line">        http.authorizeHttpRequests(</span><br><span class="line">                (auth) -&gt; auth</span><br><span class="line">                        .requestMatchers(HttpMethod.OPTIONS)</span><br><span class="line">                        .permitAll()</span><br><span class="line">                        .anyRequest()</span><br><span class="line">                        .authenticated()</span><br><span class="line">        );</span><br><span class="line">        http.exceptionHandling(config -&gt;</span><br><span class="line">                config.authenticationEntryPoint(customerAuthenticationHandler)</span><br><span class="line">        );</span><br><span class="line">        http.securityContext(config -&gt;</span><br><span class="line">                config.securityContextRepository(authenticationSaveHandler)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源服务配置中我们添加了除了公共配置外的路径匹配规则, 权限验证规则</p><p><mark>在公共配置文件中我们并没有进行<code>SecurityFilterChain</code>的<code>bean</code>配置, 只是在该类中要求必须添加公共配置需要的内容, 具体配置应当在具体配置中添加</mark></p><h4 id="资源服务和认证服务的区分导入"><a class="markdownIt-Anchor" href="#资源服务和认证服务的区分导入"></a> 资源服务和认证服务的区分导入</h4><p>上面我们完成了资源服务和认证服务的区分配置, 但是我们并没有添加<code>@Configuration</code>注解使用</p><p>现在我们通过不同的注解, 将服务划分为资源服务和认证服务, 然后区别引入配置</p><p>认证服务注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;AuthenticationApplicationSecurityConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AuthenticationApplication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>认证服务注解的作用是通过<code>Import</code>的方式导入认证服务配置</p><p>资源服务注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;ResourceApplicationSecurityConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ResourceApplication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源服务注解的作用是通过<code>Import</code>的方式导入资源服务配置</p><p>认证服务的启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AuthenticationApplication</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(SecurityApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源服务的启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResourceApplication</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DictServiceApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(DictServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现描述"><a class="markdownIt-Anchor" href="#实现描述"></a> 实现描述</h4><p>我们通过<code>@ResourceApplication</code>和<code>@AuthenticationApplication</code>分别导入资源配置类<code>ResourceApplicationSecurityConfig</code>和认证配置类<code>AuthenticationApplicationSecurityConfig</code>, 在资源配置类和认证配置类中进行不同的配置, 实现服务的不同应用</p><p>如果不太理解, 可以了解一下<code>@Import</code>注解的作用和使用: <a href="https://juejin.cn/post/7217994625343635514">https://juejin.cn/post/7217994625343635514</a></p><h4 id="bean注册优化"><a class="markdownIt-Anchor" href="#bean注册优化"></a> <code>Bean</code>注册优化</h4><p>到上述阶段, 我们只需要将配置过程中需要的<code>bean</code>注册到容器中即可实现正常运行, 但是普通的<code>bean</code>注册不会区分服务类型, 直接将其注册为<code>bean</code>, 为了优雅些, 我们粗略实现下只有认证服务和资源服务时才注册所需的<code>bean</code>的功能</p><p>方案一: 理解比较复杂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Conditional(SecurityBeans.SecurityBeansCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityBeans</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationSaveHandler <span class="title function_">authenticationSaveHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisAuthenticationSaveHandler</span>(redisUtil);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserLogoutHandler <span class="title function_">userLogoutHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserLogoutHandler</span>(authenticationSaveHandler());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserLogoutSuccessHandler <span class="title function_">userLogoutSuccessHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserLogoutSuccessHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LoginSuccessHandler <span class="title function_">loginSuccessHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginSuccessHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LoginFailureHandler <span class="title function_">loginFailureHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginFailureHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CustomerAuthenticationHandler <span class="title function_">customerAuthenticationHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomerAuthenticationHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SecurityBeansCondition</span> <span class="keyword">extends</span> <span class="title class_">AnyNestedCondition</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SecurityBeansCondition</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(ConfigurationPhase.REGISTER_BEAN);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ConditionalOnBean(annotation = ResourceApplication.class)</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OnResourceApplication</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ConditionalOnBean(annotation = AuthenticationApplication.class)</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OnAuthenticationApplication</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建一个类, 在其中进行<code>bean</code>注册, 并将该类使用<code>@Configuration</code>和<br /><code>@Conditional</code>修饰, 表示满足条件时, 注册该配置类, 这样类中配置的<code>bean</code>也会注册到容器中, 不满足时则不会注册该配置类, 类中的<code>bean</code>也不会注册</p><p>创建一个&quot;或&quot;条件加载类, 条件是容器中有<code>bean</code>被<code>@ResourceApplication</code>或者被<code>@AuthenticationApplication</code>修饰时, 执行<code>bean</code>注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SecurityBeansCondition</span> <span class="keyword">extends</span> <span class="title class_">AnyNestedCondition</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityBeansCondition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(ConfigurationPhase.REGISTER_BEAN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnBean(annotation = ResourceApplication.class)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OnResourceApplication</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnBean(annotation = AuthenticationApplication.class)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OnAuthenticationApplication</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处使用的是静态内部类的方式, 这样在一个类中比较方便</p><p>简述:</p><p>在<code>SecurityBeansCondition</code>中实现两种注解的&quot;或&quot;操作, 这样在<code>SecurityBeans</code>加载时, 如果满足则进行注册处理</p><p><a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/condition/AnyNestedCondition.html">https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/condition/AnyNestedCondition.html</a></p><p><a href="https://www.cnblogs.com/hellxz/p/16253857.html">https://www.cnblogs.com/hellxz/p/16253857.html</a></p><p>方案二:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityBeans</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationSaveHandler <span class="title function_">authenticationSaveHandler</span><span class="params">(RedisUtil redisUtil)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisAuthenticationSaveHandler</span>(redisUtil);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserLogoutHandler <span class="title function_">userLogoutHandler</span><span class="params">(AuthenticationSaveHandler authenticationSaveHandler)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserLogoutHandler</span>(authenticationSaveHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserLogoutSuccessHandler <span class="title function_">userLogoutSuccessHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserLogoutSuccessHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LoginSuccessHandler <span class="title function_">loginSuccessHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginSuccessHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LoginFailureHandler <span class="title function_">loginFailureHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginFailureHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CustomerAuthenticationHandler <span class="title function_">customerAuthenticationHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomerAuthenticationHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;AuthenticationApplicationSecurityConfig.class, SecurityBeans.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AuthenticationApplication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;ResourceApplicationSecurityConfig.class, SecurityBeans.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ResourceApplication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用<code>@Import</code>的导入原理</p><h3 id="处理服务间调用影响"><a class="markdownIt-Anchor" href="#处理服务间调用影响"></a> 处理服务间调用影响</h3><p>在添加认证之后会出现一个问题，前面做的<code>OpenFeign</code>服务之间的调用会异常，这是由于服务之间的调用也添加了验证但是服务之间调用没有添加对应的验证信息。</p><p>处理上述问题可以在<code>OpenFeign</code>服务调用时将原请求的所有请求头信息添加到服务间调用请求中</p><p>实现方法时添加一个<code>OpenFeign</code>的请求拦截器，获取到原请求的请求头信息，并将其添加到服务调用请求头中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.xiaolin.*.clients&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenFeignConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestInterceptor <span class="title function_">requestInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> template -&gt; &#123;</span><br><span class="line">                <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">                <span class="keyword">if</span> (Objects.nonNull(requestAttributes)) &#123;</span><br><span class="line">                    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestAttributes.getRequest();</span><br><span class="line">                    Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">                    <span class="keyword">if</span> (Objects.nonNull(headerNames)) &#123;</span><br><span class="line">                        <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">headerName</span> <span class="operator">=</span> headerNames.nextElement();</span><br><span class="line">                            <span class="type">String</span> <span class="variable">headerValue</span> <span class="operator">=</span> request.getHeader(headerName);</span><br><span class="line">                            template.header(headerName, headerValue);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud系列(七)---认证和授权</title>
      <link href="/2024/02/03/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E4%B8%83%E4%B9%8B%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/"/>
      <url>/2024/02/03/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E4%B8%83%E4%B9%8B%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>项目的前端框架基本搭建完成后, 来到项目比较抽象的地方, 登录和授权. 说其抽象主要是因为使用<code>SpringSecurity</code>框架的原因, <code>SpringSecurity</code>框架机制健全切强大, 但由于其封装的非常好, 所以在使用时开发人员会觉得非常抽象, 动不动的就认证异常, 一不小心就弹出默认的登录页面, 也会出现各种不理解的情况, 所以来踩坑吧</p><p>由于开始项目时<code>springboot</code>使用的是<code>3.1.5</code>版本, 所以此处也使用同版本的<code>SpringSecurity</code></p><p>当前网上介绍<code>SpringSecurity</code>的文章大致分为两类, 一类是讲源码, 一类是讲使用的. 本篇是讲<code>SpringSecurity</code>的使用的文章, 所以暂不评论将源码的文章如何, 但对于将使用的文章, 我只能说除了部分大佬的文章外, 其他都是👎</p><p>个人认为讲使用的文章要做到两点: 1.怎样用;2. 每个操作的作用是什么.但绝大多数的文章就是告诉属于者你要这样做, 然后就成功了, 读者看了之后成功了, 但根本不知道自己做了什么,特别是像我这种之前没有做过认证授权(登录)内容的<code>loser</code>, 本身就不了解, 文章也讲不清楚, 个人很迷茫啊</p><p>由于<code>SpringSecurity</code>内容很多, 但最重要的是配置内容, 本篇会介绍<code>SpringSecurity</code>中重要的内容讲解, 其他内容或许一句话带过</p><p><mark>如果想快速明白该如何配置, 可以直接看<a href="#认证流程" style="font-weight: blod">认证流程</a>部分</mark></p><h3 id="引入springsecurity"><a class="markdownIt-Anchor" href="#引入springsecurity"></a> 引入<code>SpringSecurity</code></h3><h4 id="添加依赖"><a class="markdownIt-Anchor" href="#添加依赖"></a> 添加依赖</h4><ol><li><p>父级项目中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于<code>SpringSecurity</code>的依赖在<code>SpringBoot</code>的<code>spring-boot-dependencies</code>中引入, 所以在父项目中不必要显式的声明引入</p><p>才用<code>starter</code>的方式时, 默认就会有<code>@EnableWebSecurity</code>注解, 所以会发现, 当引入依赖后, 就需要进行登录操作了. 如果只是单纯的进入<code>security</code>的依赖, 需要添加该注解开启相关内容</p></li><li><p>子项目中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>说明</p><ul><li>登录操作先在一个子项目中实现, 然后添加到整个项目中, 在分布式中实现一处登录</li><li>后续在分布到整个项目中时, 可能会将登录操作放置在网关子项目中, 所以会有普通项目到网关项目的登录改造</li></ul></li></ol><h4 id="添加配置"><a class="markdownIt-Anchor" href="#添加配置"></a> 添加配置</h4><p>在使用<code>starter</code>时, 不需要任何配置, 既可以正常使用<code>Security</code>, 如果引入的是单纯的<code>Security</code>, 则需要再配置类上添加<code>@EnableWebSecurity</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Security</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义配置前的说明"><a class="markdownIt-Anchor" href="#自定义配置前的说明"></a> 自定义配置前的说明</h3><p>当需要自定义配置时, 主要是自定义配置两个内容:1. <code>HttpSecurity</code>; 2. <code>WebSecurity</code>. 这两个东西讲起来就啰嗦了</p><ol><li><p>首先区分请求中的容器: <code>servlet</code>容器和<code>spring</code>容器, <code>servlet</code>容器主要是为请求服务的, 主要有两类: <code>Filter</code>和<code>Servlet</code>, <code>Servlet</code>是对请求进行具有实际意义的内容处理, 可以参照<code>spring mvc</code>中的<code>controller+service+dao</code>, <code>Filter</code>是对请求进行预处理或者后置处理; <code>spring</code>容器就是我们常说的<code>spring</code>的<code>bean</code></p></li><li><p>其次区分<code>Filter</code>: <code>Filter</code>根据容器不同, 有<code>servlet</code>的<code>Filter</code>和<code>spring</code>的<code>Filter</code>, 通常我们使用<code>spring</code>的方式注册的<code>Filter</code>都是<code>spring</code>的<code>Filter</code>; <code>servlet</code>必须是继承自<code>javax.serlvet.Filter</code>(<code>tomcat-embed-core</code>依赖包应该是<code>jakarta.servlet.Filter</code>)接口, 并通过<code>web.xml</code>(<code>SpirngBoot</code>是通过<code>@WebFilter</code>注解)注册到<code>servlet</code>容器中(不明白的可以先学习一下<code>servlet</code>开发)</p></li><li><p>在了解上述两个内容之后, 就再认识三个名词:</p><ul><li><code>DelegatingFilterProxy</code>(委派过滤器代理, <code>servlet</code>中的<code>Filter</code>与<code>spring</code>中的<code>Filter</code>的桥接器, <code>spring web</code>中定义的, 任何框架都可以通过此方式添加<code>Filter</code>到<code>servlet</code>执行链中);</li><li><code>FilterChainProxy</code> (<code>spring</code>容器中的过滤器链代理, 内部维护多个<code>spring</code>过滤器链, 在<code>SpringSecurity</code>中定义的, 即专门为<code>SpringSecurity</code>使用);</li><li><code>SecurityFilterChain</code>(安全框架的过滤器链, 在<code>SpringSecurity</code>中定义的, 认证流程的处理过程)</li></ul></li><li><p>直接上图</p><p><img src="Security%E7%9A%84%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE%E6%9E%B6%E6%9E%84.png" alt="Security的过滤器链架构" /></p></li><li><p>现在讲<code>WebSecurity</code>和<code>HttpSecurity</code>. <code>Security</code>的原理就是根据不同的路径, 匹配不同的<code>SecurityFilterChain</code></p><ul><li><code>HttpSecurity</code>是用来构建<code>SecurityFilterChain</code>的, <code>HttpSecurity</code>每<code>build</code>一次, 就构建出一条完整的<code>SecurityFilterChain</code>, 每个<code>SecurityFilterChain</code>根据配置不同, 有不同数量的过滤器, 当项目中没有构建<code>SecurityFilterChain</code>时, 框架会添加一条默认的<code>SecurityFilterChain</code> ;</li><li><code>WebSecurity</code>是用来构建<code>FilterChainProxy</code>的构建类, 它会维护项目中添加的<code>SecurityFilterChain</code>, 根据<code>SecurityFilterChain</code>中的路径匹配规则, 调用不同的<code>SecurityFilterChain</code></li><li><img src="Security%E4%B8%AD%E7%9A%84%E6%9E%84%E5%BB%BA%E5%85%B3%E7%B3%BB.png" alt="Security中的构建关系" /></li></ul></li><li><p>演示</p><p><img src="Security%E7%9A%84WebSecurity%E5%92%8CHttpSecurity%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F.png" alt="Security的WebSecurity和HttpSecurity配置方式" /></p><p><img src="Security%E4%B8%ADWebSecurity%E5%92%8CHttpSecurity%E9%85%8D%E7%BD%AE%E7%BB%93%E6%9E%9C%E6%BC%94%E7%A4%BA.png" alt="Security中WebSecurity和HttpSecurity配置结果演示" /></p></li><li><p>说明</p><ul><li><p>个人不太推荐使用<code>addSecurityFilterChainBuilder</code>的方式添加<code>SecurityFilterChain</code>, 这种方式定义比较麻烦. 不同的<code>SecurityFilterChain</code>可以通过定义不同的<code>SecurityFilterChain</code>的<code>Bean</code>实例, 通过<code>SecurityFilterChain</code>的<code>securityMatcher</code>来实现不同请求的处理</p></li><li><p>项目中的静态资源推荐使用<code>ignoring</code>的方式实现, 因为大多数静态资源都是允许直接访问的</p></li><li><p>同一个<code>HttpSecurity</code>是不允许重复构建的, 重复构建时会出现已构建的错误, 所以说第一点中的<code>addSecurityFilterChainBuilder</code>添加比较麻烦, 同时也拒绝了直接构建<code>List&lt;SecurityFilterChain&gt;</code>的道路. 但是每次创建新的<code>SecurityFilterChain</code>时注入的<code>HttpSecurity</code>都是不同的, 所以推荐此方式添加<code>SecurityFilterChain</code>.</p><p><img src="Security%E4%B8%8D%E5%90%8C%E7%9A%84HttpSecurity.png" alt="Security不同的HttpSecurity" /></p></li></ul></li></ol><h3 id="配置websecurity"><a class="markdownIt-Anchor" href="#配置websecurity"></a> 配置<code>WebSecurity</code></h3><p><img src="Security%E7%9A%84WebSecurity%E7%9A%84%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9.png" alt="Security的WebSecurity的配置内容" /></p><p>上述是<code>WebSecurity</code>中的可配置内容</p><ul><li><code>ignoring</code>: 忽略路径</li><li><code>httpFirewall</code>: 防火墙</li><li><code>debug</code>: 是否开启<code>debug</code></li><li><code>addSecurityFilterChainBuilder</code>: 添加一个<code>SecurityFilterChain</code></li><li><code>privilegeEvaluator</code>: 特权, 这个我也没有明白具体要怎么做, 大致是说判断某个请求是否有某种特权, 至于是什么样的特权, 怎样定义, 不甚了解</li><li><code>expressionHandler</code>: 表达式处理器. 不明白不要紧, 去查看参数, 可以找到<code>SecurityExpressionHandler</code>接口, 有三个方法, 查看其抽象实现类<code>AbstractSecurityExpressionHandler</code>, 其中有一个解析器<code>SpelExpressionParser</code>, 这是<code>spring</code>的<code>spel</code>表达式解析器, 该类中还能找到<code>SecurityExpressionOperations</code>这个类, 看到其中的方法名就明白了, 解析控制器中方法的<code>@PreAuthorize</code>等权限注解中定义的表达式内容. 该方法是为了添加自己的表达式解析类</li><li><code>postBuildAction</code>: 构建后的处理, 参数是一个<code>Runnable</code>任务</li><li><code>requestRejectedHandler</code>: 请求拒绝处理器, 用来处理防火墙的拒绝异常的处理器</li></ul><p>配置<code>WebSecurity</code>主要是为了将路径放行, 避免某些资源即使放行还要走一个完整的<code>SecurityFilterChain</code>, 此方式添加的<code>SecurityFilterChain</code>中没有任何<code>Filter</code>, 直接向下运行; <code>WebSecurity</code>中的其他配置可按需自行添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebSecurityCustomizer <span class="title function_">webSecurityCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> web -&gt; web</span><br><span class="line">        .ignoring().requestMatchers(<span class="string">&quot;/static/**&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面即是放行<code>/static</code>路径下的所有请求</p><h3 id="配置httpsecurity"><a class="markdownIt-Anchor" href="#配置httpsecurity"></a> 配置<code>HttpSecurity</code></h3><p><code>HttpSecurity</code>是<code>security</code>配置的重点</p><ol><li><p>可以通过<code>HttpSecurity</code>配置多个<code>SecurityFilterChain</code>, 这些<code>SecurityFilterChain</code>之间需要注意一些内容</p><ul><li>由于每个请求只能走一个<code>SecurityFilterChain</code>, 所以在配置时, 尽可能不要出现路径配置重叠的情况, 避免出现走错了<code>SecurityFilterChain</code>而导致的问题</li><li>如果接收的请求没有被覆盖在配置的<code>SecurityFilterChain</code>的映射路径中, 则该请求会被直接通过, 所以在进行配置时需要确保有一个<code>SecurityFilterChain</code>是覆盖全部请求的, 即上面的图片中的<code>anyRequest</code>的<code>SecurityFilterChain</code></li><li>通常情况下我们只会配置一个<code>SecurityFilterChain</code>, 这个<code>SecurityFilterChain</code>不要配置<code>securityMatcher</code>这一项, 避免覆盖<code>anyRequest</code>的<code>SecurityFilterChain</code>导致的映射路径没有全覆盖的情况</li></ul></li><li><p><code>HttpSecurity</code>可以配置的内容</p><p><code>HttpSecurity</code>可以配置的内容非常多, 目前<code>3.1.5</code>版本中, 保守估计有一半已经标记为过时的方法了, 所以就不截图了, 这里分类介绍一下吧</p><ul><li>配置当前<code>SecurityFilterChain</code> 处理的映射路径: <code>securityMatchers</code></li><li>在当前<code>SecurityFilterChain</code>中添加自定义过滤器: <code>addFilter</code></li><li><code>csrf</code>配置: 默认是开启的, 当设置为<code>disable</code>时会将<code>SecurityFilterChain</code>中的该过滤器删除</li><li><code>cors</code>配置: 默认是没有的, 当添加配置后, 会添加一个<code>CorsFilter</code></li><li>认证配置: 默认是使用用户密码的认证方式; 认证的实现是通过添加每一种的认证过滤器来配置的, 官方定义支持的认证方式:<ul><li><code>Basic</code>: <code>Basic</code>请求头的认证方式, 通过<code>httpBasic</code>配置, 可以参考<code>https://blog.csdn.net/ShiJunzhiCome/article/details/126064450</code></li><li>用户密码认证: 用户名, 密码认证, <code>username</code>, <code>password</code>, 通过<code>formLogin</code>可配置</li><li><code>JAAS</code>: <code>jaas</code>认证方式, 官方可能没有提供该认证方式的过滤器实现. 有一个很相似的<code>jee</code>方法是用来配置<code>Java EE security</code>过滤器的</li><li><code>X509</code>: <code>X509</code>认证可以通过<code>x509</code>配置</li><li><code>rememberMe</code>: 记住一个过了<code>session</code>有效期的用户, 可以通过<code>rememberMe</code>配置</li><li><code>SAML 2.0 Login</code>: <code>SAML2.0</code>认证可以通过<code>saml2Login</code>配置</li><li><code>OAuth 2.0 Login</code>: <code>OpenId Connect</code>和非标准的<code>OAuth 2.0</code>认证, 通过<code>oauth2Login</code>配置</li><li><code>CAS</code>: 支持, 但没有实现过滤器</li><li><code>Pre-Authentication Scenatios</code>: 使用外部机制(如<code>SiteMinder</code>或<code>Java EE security</code>)进行认证, 但仍使用<code>spring security</code>进行授权保护. 通过<code>jee</code>可以配置<code>Java EE security</code></li><li>匿名认证: 通过<code>anonymous</code>可以配置匿名认证</li></ul></li><li>认证时可共用的配置:<ul><li><code>authenticationManager</code>: 认证管理器, 维护一组认证处理器, 默认的是<code>ProviderManager</code></li><li><code>AuthenticationProvider</code>: 认证处理器, 此方法是添加一个认证处理器, 这些认证处理器通过<code>AuthenticationManager</code>进行维护管理, 进行认证操作时, 会遍历<code>AuthenticationManager</code>中维护的<code>AuthenticationProvider</code>, 通过<code>AuthenticationProvider</code>的<code>supports</code>判断是否符合验证要求, 符合则通过<code>authenticate</code>方法验证, 然后跳过后续还未执行的验证处理器</li><li><code>userDetailsService</code>: 用户详情服务, 用于加载用户的详情信息, 通常会重写该内容(注册一个该接口的<code>@Bean</code>实例即可替换默认<code>SecurityFilterChain</code>中的用户详情服务), 从数据库中查询用户信息</li><li><code>exceptionHandling</code>: 异常处理, 此方法是添加可共用的认证异常处理机制</li><li><code>sessionManagement</code>: <code>session</code>管理</li><li><code>passwordManagement</code>: 加密管理</li><li><code>authorizeHttpRequests</code>: 认证请求配置</li><li><code>securityContext</code>: 安全上下文</li><li><code>setSharedObject</code>: 共享对象</li></ul></li><li>注销认证配置: <code>logout</code></li><li>其它配置我不太明白, 就不误人子弟了</li></ul></li></ol><h3 id="请求流程"><a class="markdownIt-Anchor" href="#请求流程"></a> 请求流程</h3><p><img src="Security%E9%AA%8C%E8%AF%81%E8%AF%B7%E6%B1%82%E7%9A%84%E6%B5%81%E7%A8%8B.png" alt="Security验证请求的流程" /></p><p>在上面描述了基本概念和配置内容之后, 可以简单的描述请求的流程</p><ol><li>接收请求, 执行到<code>security</code>添加的<code>DelegatingFilterProxy</code>, 通过这个桥接器接入认证流程</li><li><code>FilterChainProxy</code>根据请求查询并调用<code>SecurityFilterChain</code>, 执行认证流程</li><li>认证流程执行结束后, 执行后续的操作</li><li>返回请求的处理结果</li></ol><p>其中我们在认证中最关心的就是认证流程, 即使用的<code>SecurityFilterChain</code></p><h3 id="认证流程"><a class="markdownIt-Anchor" href="#认证流程"></a> 认证流程</h3><p>此处就以用户名和密码的登录方式为例, 演示认证流程, 此次演示会偏向于前后端分离的配置, 不会有页面内容</p><p>在开始之前先开启日志, 方便查看和定位</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org:</span></span><br><span class="line">      <span class="attr">springframework:</span></span><br><span class="line">        <span class="attr">security:</span> <span class="string">trace</span></span><br></pre></td></tr></table></figure><p>首先我们不做配置, 查看一下默认的<code>SecurityFilterChain</code></p><p><img src="Security%E7%9A%84%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E8%BF%87%E6%BB%A4%E5%99%A8.png" alt="Security的认证流程过滤器" /></p><p>我们进行配置时, 多数是进行步骤三的配置和步骤七的配置, 其他的配置内容或禁用,或用默认, 或配置比较简单. 我们先将这部分简单配置一下</p><ol><li><p>先禁用<code>csrf</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.csrf(AbstractHttpConfigurer::disable);</span><br></pre></td></tr></table></figure></li><li><p>异常处理设置为返回<code>json</code>内容:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling(config -&gt;</span><br><span class="line">                       config</span><br><span class="line">                       .authenticationEntryPoint(customerAuthenticationHandler())</span><br><span class="line">                      );</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerAuthenticationHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomerAuthenticationHandler</span><span class="params">(AuthenticationSaveHandler authenticationSaveHandler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authenticationSaveHandler = authenticationSaveHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSaveHandler authenticationSaveHandler;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        authenticationSaveHandler.remove(request.getHeader(<span class="string">&quot;TOKEN&quot;</span>));</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, authException);</span><br><span class="line">        result.put(<span class="string">&quot;status&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">        response.getWriter().println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><mark><code>AuthenticationSaveHandler</code>是我个人封装的一个验证信息的保存处理器,  <code>TOKEN</code>是我个人在请求头中定义的内容, 作为保存处理器的<code>KEY</code>, 至于具体实现可以个人自定义, <code>JWT</code>, <code>Redis</code>保存都可以, 如果演示想要简单点可以直接使用一个<code>Map</code>保存, 通过<code>KEY</code>来<code>get</code>和<code>put</code>即可</mark></p><p>需要注意的是, 当配置完这些后, 访问服务资源时会发现可以直接访问, 这是因为我们没有添加鉴权的配置, 这样生成的<code>SecurityFilterChain</code>是没有鉴权过滤器的, 如果想要验证一下<code>exceptionHandling</code>效果可以先添加简单的鉴权配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeHttpRequests(</span><br><span class="line">    (auth) -&gt; auth</span><br><span class="line">    .requestMatchers(<span class="string">&quot;test/unauth&quot;</span>, <span class="string">&quot;login&quot;</span>)</span><br><span class="line">    .permitAll()</span><br><span class="line">    .anyRequest()</span><br><span class="line">    .authenticated()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>测试访问除了<code>/test/unauth</code>路径之外的资源时, 就会异常, 异常信息是: <code>Full authentication is required to access this resource</code></p></li><li><p>注销认证后的处理和成功的处理:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http.logout(</span><br><span class="line">    (config) -&gt; config</span><br><span class="line">    .addLogoutHandler(userLogoutHandler())</span><br><span class="line">    .logoutSuccessHandler(userLogoutSuccessHandler())</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLogoutHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserLogoutHandler</span><span class="params">(AuthenticationSaveHandler authenticationSaveHandler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authenticationSaveHandler = authenticationSaveHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSaveHandler authenticationSaveHandler;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> &#123;</span><br><span class="line">        authenticationSaveHandler.remove(request.getHeader(<span class="string">&quot;TOKEN&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line">    <span class="comment">/*public UserLogoutSuccessHandler(AuthenticationSaveHandler authenticationSaveHandler) &#123;</span></span><br><span class="line"><span class="comment">        this.authenticationSaveHandler = authenticationSaveHandler;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    private AuthenticationSaveHandler authenticationSaveHandler;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;status&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">            response.getWriter().println(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时可以去请求<code>logout</code>注销认证, 请求成功时就会返回<code>UserLogoutSuccessHandler</code>中<code>onLogoutSuccess</code>返回的内容</p><p><mark>项目默认的注销登录的地址是<code>logout</code>, 可以通过<code>logoutUrl</code>修改注销请求的路径</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http.logout(</span><br><span class="line">    (config) -&gt; config</span><br><span class="line">    .logoutUrl(<span class="string">&quot;/api/logout&quot;</span>)</span><br><span class="line">    .addLogoutHandler(userLogoutHandler())</span><br><span class="line">    .logoutSuccessHandler(userLogoutSuccessHandler())</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>认证之后的操作和游客模式暂不操作</p></li><li><p>鉴权配置, 通过<code>authorizeHttpRequests</code>配置资源的权限信息</p><p>通过前面图片的过滤器介绍应该清晰的了解到, 鉴权操作实际是在认证等过滤器执行完之后操作的, 所以在此过滤器执行之前就被拦截处理的请求是不会走到该过滤器的, 比如登录配置中配置的登录请求路径(默认<code>/login</code>)和注销请求路径(<code>logout</code>); 部分过滤器是有执行链结束的后置处理的, 比如异常处理器是需要<code>catch</code>鉴权异常(即鉴权过滤器中抛出的异常)的, 所以会出现鉴权过滤器执行完后抛出了异常返回到异常过滤器中执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于匹配当前的SecurityFilterChain适用的请求路径, 不配置默认为anyRequest</span></span><br><span class="line">http.securityMatcher(<span class="string">&quot;/**&quot;</span>);</span><br></pre></td></tr></table></figure><p>上面的配置不是鉴权配置, 而是<code>SecurityFilterChain</code>处理的请求路径, 不符合要求的不会匹配到该<code>SecurityFilterChain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求鉴权配置</span></span><br><span class="line">http.authorizeHttpRequests(</span><br><span class="line">    (auth) -&gt; auth</span><br><span class="line">    .requestMatchers(<span class="string">&quot;test/unauth&quot;</span>) <span class="comment">// 用于匹配路径</span></span><br><span class="line">    .permitAll()</span><br><span class="line">    .requestMatchers(<span class="string">&quot;/test/auth&quot;</span>)</span><br><span class="line">    .hasRole(<span class="string">&quot;USER_TEST&quot;</span>)   <span class="comment">// 具有某种角色</span></span><br><span class="line">    .requestMatchers(<span class="string">&quot;/test/auth&quot;</span>)</span><br><span class="line">    .hasAuthority(<span class="string">&quot;AUTH&quot;</span>)   <span class="comment">// 具有某种权限</span></span><br><span class="line">    .requestMatchers(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">    .access((authentication, object) -&gt; <span class="keyword">new</span> <span class="title class_">AuthorizationDecision</span>(<span class="literal">true</span>))    <span class="comment">// 自定义符合某种要求</span></span><br><span class="line">    .anyRequest()   <span class="comment">// 用于匹配任何路径</span></span><br><span class="line">    .authenticated()    <span class="comment">// 表示需要认证</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上述鉴权配置只是演示了几个配置的例子, <code>requestMatchers</code>表示匹配路径, 鉴权处理整体分为5个类别: <code>permitAll</code>(放行), <code>hasRole</code>(具有某种角色), <code>hasAuthority</code>(具有某种权限), <code>access</code>(自定义的访问要求), <code>authenticated</code>(需认证)</p><p>鉴权配置的每一个都会在鉴权配置类<code>AuthorizeHttpRequestsConfigurer</code>中添加一个<code>AuthorizationManager</code>(注意别跟<code>AuthenticationManager</code>混了), 在<code>AuthorizationFilter</code>中实现其作用</p></li><li><p>认证配置</p><p>这是登录操作最重要的配置了, 我们以用户名和密码的认证方式为例进行演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin((config) -&gt;</span><br><span class="line">               config</span><br><span class="line">               .usernameParameter(<span class="string">&quot;username&quot;</span>)<span class="comment">// 用户名参数key</span></span><br><span class="line">               .passwordParameter(<span class="string">&quot;password&quot;</span>)<span class="comment">// 密码参数key</span></span><br><span class="line">               .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)<span class="comment">// 登录处理的匹配路径</span></span><br><span class="line">               .failureHandler(loginFailureHandler())<span class="comment">// 登录失败处理器</span></span><br><span class="line">               .successHandler(loginSuccessHandler())<span class="comment">// 登录成功处理</span></span><br><span class="line">              );</span><br></pre></td></tr></table></figure><p>上述配置是常做的配置, 当客户端发送<code>/login</code>请求时会被该过滤器拦截处理, 从请求中获取<code>key</code>为<code>username</code>和<code>password</code>的参数获取其值进行认证;  <code>failureHandler</code>配置一个认证失败的处理器; <code>successHandler</code>配置一个认证成功的处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFailureHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public LoginFailureHandler(AuthenticationSaveHandler authenticationSaveHandler) &#123;</span></span><br><span class="line"><span class="comment">        this.authenticationSaveHandler = authenticationSaveHandler;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    private AuthenticationSaveHandler authenticationSaveHandler;*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录失败: &quot;</span>+exception.getMessage());</span><br><span class="line">        result.put(<span class="string">&quot;status&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">        response.getWriter().println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public LoginSuccessHandler(AuthenticationSaveHandler authenticationSaveHandler) &#123;</span></span><br><span class="line"><span class="comment">        this.authenticationSaveHandler = authenticationSaveHandler;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    private AuthenticationSaveHandler authenticationSaveHandler;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">/*String token = StringUtils.isBlank(request.getHeader(&quot;TOKEN&quot;)) ? UUID.randomUUID().toString() : request.getHeader(&quot;TOKEN&quot;);</span></span><br><span class="line"><span class="comment">        authenticationSaveHandler.add(token, authentication);*/</span></span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;status&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">        data.put(<span class="string">&quot;userInfo&quot;</span>, authentication);</span><br><span class="line">        result.put(<span class="string">&quot;data&quot;</span>, data);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">        response.getWriter().println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当配置到此处时, 会发现登录功能都已经成功了, 但是有一个问题还没有解决, 请求的认证存储问题</p><p>当我说出这个问题时可能会有疑问: 认证信息在登录成功后已经保存, <code>token</code>也已经返回, 只需要在请求时添加<code>token</code>到请求头里不就可以成功了. 答案是否</p><p>先认识两个概念: 1. 请求是无状态的, 请求与请求之间是不存在关联的; 2. 在认证框架中, 请求是分为两类的: 认证类(登录和注销); 普通类(资源请求)</p><p>当我们在上述配置的基础上登录请求登录成功了, 会将认证信息保存到自定义的存储中并返回<code>token</code>, 但是当资源请求进来时我们并没有获取对应的认证信息添加到请求上下文中来表示已经通过验证</p><p>当登录后如果访问资源请求时成功这不是我们的逻辑的成功, 而是框架的一些默认配置带来的效果, 默认配置中会将<code>sessionId</code>返回并写到<code>Cookie</code>中, 所以访问资源时可能带有了已通过认证的<code>sessionId</code>导致的</p><p>解决方案:</p><ul><li><p>第一种是网上大多的解决方案: 在走到认证流程过滤器前添加一个过滤器, 在这个过滤器中添加验证信息到上下文中, 还有的有会再获取<code>AuthenticationManager</code>然后再手动调用认证方法</p></li><li><p>第二种是修改<code>session</code>的保存策略: 我个人比较懒, 所以想直接替换<code>spring</code>中验证信息的获取和保存方式. <code>spring</code>中无论是<code>mvc</code>还是<code>security</code>都是将请求基于<code>ThreadLocal</code>的, 所以此处的<code>session</code>策略不要修改, 依然使用<code>ThreadLocalSecurityContextHolderStrategy</code>, 我们要修改的是其存储库<code>SecurityContextRepository</code></p><p><code>SecurityContextHolderFilter</code>: 获取验证信息的过滤器</p><p><code>AuthorizationFilter</code>: 获取并使用验证信息的过滤器</p><p><code>AbstractAuthenticationProcessingFilter</code>: 保存验证信息的过滤器(仅仅是用户名密码模式下的保存过滤器)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationSaveHandler</span> <span class="keyword">extends</span> <span class="title class_">SecurityContextRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Object account, SecurityContext authentication)</span>;</span><br><span class="line"></span><br><span class="line">    SecurityContext <span class="title function_">get</span><span class="params">(Object account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object account)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryAuthenticationSaveHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSaveHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Object, SecurityContext&gt; USER = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Object account, SecurityContext authentication)</span> &#123;</span><br><span class="line">        USER.put(account, authentication);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SecurityContext <span class="title function_">get</span><span class="params">(Object account)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> USER.get(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object account)</span> &#123;</span><br><span class="line">        USER.remove(account);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SecurityContext <span class="title function_">loadContext</span><span class="params">(HttpRequestResponseHolder requestResponseHolder)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestResponseHolder.getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;TOKEN&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> get(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveContext</span><span class="params">(SecurityContext context, HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        response.addHeader(<span class="string">&quot;TOKEN&quot;</span>, token);</span><br><span class="line"><span class="comment">//        Authentication authentication = context.getAuthentication();</span></span><br><span class="line">        add(token, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsContext</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;TOKEN&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> USER.containsKey(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.setSharedObject(SecurityContextRepository.class, authenticationSaveHandler());</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="自定义登录"><a class="markdownIt-Anchor" href="#自定义登录"></a> 自定义登录</h3><p>通过前面的配置, 我们可以实现配置官方的登录处理, 有些时候我们不希望使用官方的登录流程, 而是希望自定义登录流程和逻辑, 此处有两种方式:</p><ol><li><p>请求处理器的方式</p><p>这种方式就是前面提到的, 将登录请求放行, 然后在<code>controller</code>中实现自定义的登录逻辑, 并进行相关处理</p></li><li><p>登录过滤器方式</p><p>这种方式与上述方式类似, 只是逻辑处理通过自定义的过滤器实现</p><p>首先根据自己的需求, 将官方实现的登录过滤器配置好, 然后创建一个自定义的过滤器, 并添加到<code>SecurityFilterChain</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.addFilterBefore(<span class="keyword">new</span> <span class="title class_">MyLoginFilter</span>(passwordEncoder, userDetailsService, authenticationSaveHandler), RequestCacheAwareFilter.class);</span><br></pre></td></tr></table></figure><p>然后自定义实现一个过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLoginFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">RequestMatcher</span> <span class="variable">requiresAuthenticationRequestMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecurityContextRepository securityContextRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLoginFilter</span><span class="params">(PasswordEncoder passwordEncoder, UserDetailsService userDetailsService, SecurityContextRepository securityContextRepository)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.passwordEncoder = passwordEncoder;</span><br><span class="line">        <span class="built_in">this</span>.userDetailsService = userDetailsService;</span><br><span class="line">        <span class="built_in">this</span>.securityContextRepository = securityContextRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!requiresAuthentication(request, response)) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> userDetailsService.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (passwordEncoder.matches(password, user.getPassword())) &#123;</span><br><span class="line">            <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> UsernamePasswordAuthenticationToken.authenticated(user, user, Collections.emptyList());</span><br><span class="line">            <span class="type">SecurityContext</span> <span class="variable">context</span> <span class="operator">=</span> SecurityContextHolder.createEmptyContext();</span><br><span class="line">            context.setAuthentication(authentication);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                securityContextRepository.saveContext(context, request, response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">requiresAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.requiresAuthenticationRequestMatcher.matches(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在<code>OncePerRequestFilter</code>这个过滤器类的基础上进行构建, 此处只是简单的做了一个简单的逻辑处理和上下文保存样例, 具体实现可根据个人需要进行具体修改</p></li></ol><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题😭</h3><p>问题一</p><p>出现问题:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Not injecting HSTS header since it did not match request to [Is Secure]</span><br></pre></td></tr></table></figure><p>问题描述: 这个问题在自定义登录后, 在请求登录时可能会出现, 具体内容上不会报错, 但是在打开日志打印时会显示自定义的登录过滤器出现了该描述</p><p>解决方案: 配置请求头<code>https</code>配置, 具体可参考: <a href="https://blog.csdn.net/w_monster/article/details/119936215">https://blog.csdn.net/w_monster/article/details/119936215</a></p><h3 id="挖坑"><a class="markdownIt-Anchor" href="#挖坑"></a> 挖坑</h3><p><code>SpringSecurity</code>源码</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue系列(四)---请求</title>
      <link href="/2024/02/01/web/Vue%E7%B3%BB%E5%88%97%E5%9B%9B%E4%B9%8B%E8%AF%B7%E6%B1%82/"/>
      <url>/2024/02/01/web/Vue%E7%B3%BB%E5%88%97%E5%9B%9B%E4%B9%8B%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>为了实现前后端交互, 需要引入请求框架. 当前形势下, <code>Vue</code>项目通常使用<code>axios</code>作为项目的请求框架</p><h3 id="引入"><a class="markdownIt-Anchor" href="#引入"></a> 引入</h3><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><p>使用<code>pnmp</code>命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add axios</span><br></pre></td></tr></table></figure><h4 id="引入-2"><a class="markdownIt-Anchor" href="#引入-2"></a> 引入</h4><p><code>axios</code>的引入不需要像其它框架那样, 使用<code>app.use</code>引入, 只需要创建在使用的位置创建请求实例即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">create</span>(config);</span><br></pre></td></tr></table></figure><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><h4 id="基本使用"><a class="markdownIt-Anchor" href="#基本使用"></a> 基本使用</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">create</span>(config).<span class="title function_">request</span>(config);</span><br><span class="line">axios.<span class="title function_">create</span>(config).<span class="title function_">get</span>(url);</span><br><span class="line">axios.<span class="title function_">create</span>(config).<span class="title function_">post</span>(url, data);</span><br></pre></td></tr></table></figure><h4 id="封装使用"><a class="markdownIt-Anchor" href="#封装使用"></a> 封装使用</h4><p>基本使用方式每次请求时都会创建一个<code>axios</code>实例, 并且每次都要添加创建配置, 可以在其基础上进行封装, 创建和使用一个<code>axios</code>实例即可, 并且可以进行统一的请求拦截和响应拦截</p><p>一. 请求拦截</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">create</span>(config).<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params"><span class="attr">req</span>: <span class="title class_">InternalAxiosRequestConfig</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求拦截&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> req;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params"><span class="attr">err</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>请求拦截就是请求在发送之前的前置处理</p><p>二. 响应拦截</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">create</span>(config).<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="title function_">async</span> (<span class="attr">res</span>: <span class="title class_">AxiosResponse</span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应拦截&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="title class_">HttpStatusCode</span>.<span class="property">Ok</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&quot;请求异常&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>响应拦截是对请求的结果进行拦截预处理, 请求的结果是<code>AxiosResponse</code>类型, 其中有<code>status</code>, <code>headers</code>, <code>config</code>, <code>data</code>等, 服务端返回的数据实际是<code>data</code>中的内容</p><p>三. 请求实例封装</p><ol><li><p>封装拦截器配置</p><p>封装拦截器配置是将请求拦截和响应拦截按组封装, 方便按组添加</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">RequestInterceptorsConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 请求拦截</span></span><br><span class="line">    <span class="attr">requestInterceptor</span>?: <span class="function">(<span class="params"><span class="attr">req</span>: <span class="title class_">InternalAxiosRequestConfig</span></span>) =&gt;</span> <span class="title class_">InternalAxiosRequestConfig</span>;</span><br><span class="line">    <span class="attr">requestInterceptorCatch</span>?: <span class="function">(<span class="params"><span class="attr">err</span>: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line">    <span class="comment">// 响应拦截</span></span><br><span class="line">    <span class="attr">responseInterceptor</span>?: &lt;R = <span class="title class_">AxiosResponse</span>&gt;<span class="function">(<span class="params"><span class="attr">config</span>: R</span>) =&gt;</span> R;</span><br><span class="line">    <span class="attr">responseInterceptorCatch</span>?: <span class="function">(<span class="params"><span class="attr">err</span>: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装请求实例</p><p>封装请求类, 并创建一个公用的请求实例用于项目使用. 提供请求构造, 支持请求的定制配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Request</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>;</span><br><span class="line">    <span class="attr">instance</span>: <span class="title class_">AxiosInstance</span>;</span><br><span class="line">    <span class="attr">interceptors</span>?: <span class="title class_">RequestInterceptorsConfig</span>[]</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>, <span class="attr">interceptors</span>?: <span class="title class_">RequestInterceptorsConfig</span>[]</span>) &#123;</span><br><span class="line">        config.<span class="property">baseURL</span> = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_BASE_URL</span>;</span><br><span class="line">        config.<span class="property">headers</span> = config.<span class="property">headers</span> || <span class="keyword">new</span> <span class="title class_">AxiosHeaders</span>();</span><br><span class="line">        config.<span class="property">withCredentials</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">config</span> = config;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span> = axios.<span class="title function_">create</span>(config);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">interceptors</span> = interceptors;</span><br><span class="line">        <span class="comment">// 全局请求拦截</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">initGlobalRequestInterceptors</span>();</span><br><span class="line">        <span class="keyword">if</span> (interceptors) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> interceptor <span class="keyword">of</span> interceptors) &#123;</span><br><span class="line">                <span class="comment">// 实例请求拦截</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">                    interceptor.<span class="property">requestInterceptor</span>,</span><br><span class="line">                    interceptor.<span class="property">requestInterceptorCatch</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> reverseInterceptors = interceptors.<span class="title function_">reverse</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> interceptor <span class="keyword">of</span> reverseInterceptors) &#123;</span><br><span class="line">                <span class="comment">// 实例响应拦截</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">                    interceptor.<span class="property">responseInterceptor</span>,</span><br><span class="line">                    interceptor.<span class="property">responseInterceptorCatch</span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 全局响应拦截</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">initGlobalResponseInterceptors</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化请求的全局请求拦截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">initGlobalRequestInterceptors</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">            <span class="function">(<span class="params"><span class="attr">req</span>: <span class="title class_">InternalAxiosRequestConfig</span></span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> userStore = <span class="title function_">useUserStore</span>();</span><br><span class="line">                req.<span class="property">headers</span>.<span class="title function_">set</span>(<span class="string">&quot;TOKEN&quot;</span>, userStore.<span class="property">getToken</span>, <span class="literal">true</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求全局请求拦截&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> req;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params"><span class="attr">err</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化请求的全局响应拦截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">initGlobalResponseInterceptors</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">            <span class="title function_">async</span> (<span class="attr">res</span>: <span class="title class_">AxiosResponse</span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="title class_">HttpStatusCode</span>.<span class="property">Unauthorized</span> || res.<span class="property">data</span>.<span class="property">state</span> === <span class="title class_">ApiStateEnum</span>.<span class="property">NOT_LOGIN</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> current = <span class="title function_">currentRoute</span>();</span><br><span class="line">                    <span class="keyword">await</span> <span class="title function_">toLogin</span>(current)</span><br><span class="line">                    <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">status</span> &gt;= <span class="title class_">HttpStatusCode</span>.<span class="property">BadRequest</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="string">&quot;请求异常&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求创建时获取一个请求配置项和一个拦截配置数组</p><p>请求配置中设置基础路径</p><p>创建时最先初始化全局请求拦截器, 最后初始化全局响应拦截器</p><p>拦截配置数据中的请求拦截顺序添加, 响应拦截倒序添加</p></li><li><p>封装请求操作</p><p>在封装的请求实例中添加请求操作, 直接使用请求实例中的<code>AxiosInstance</code>实例操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有配置请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">config</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">interceptors</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">request</span>(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>, <span class="attr">interceptors</span>?: <span class="title class_">RequestInterceptorsConfig</span>[]): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span> | <span class="title class_">ApiResult</span>&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">instance</span>: <span class="title class_">AxiosInstance</span> = interceptors &amp;&amp; interceptors.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="keyword">new</span> <span class="title class_">Request</span>(config, interceptors).<span class="property">instance</span> : <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">    <span class="comment">// let instance: AxiosInstance = this.instance;</span></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">        .<span class="property">request</span>&lt;<span class="built_in">any</span>, <span class="title class_">ApiResult</span>&lt;<span class="built_in">any</span>&gt;&gt;(config)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params"><span class="attr">err</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">            &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get 请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url       请求路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params    请求参数数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config    请求配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">get</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">params</span>?: <span class="built_in">any</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span> | <span class="title class_">ApiResult</span>&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!config) &#123;</span><br><span class="line">        config = <span class="title function_">defaultRequestConfig</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    config.<span class="property">method</span> = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">    config.<span class="property">url</span> = url;</span><br><span class="line">    config.<span class="property">params</span> = params;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * delete 请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url       请求路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params    请求参数数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config    请求配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">delete</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">params</span>?: <span class="built_in">any</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span> | <span class="title class_">ApiResult</span>&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!config) &#123;</span><br><span class="line">        config = <span class="title function_">defaultRequestConfig</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    config.<span class="property">method</span> = <span class="string">&quot;DELETE&quot;</span>;</span><br><span class="line">    config.<span class="property">url</span> = url;</span><br><span class="line">    config.<span class="property">params</span> = params;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * download 请求</span></span><br><span class="line"><span class="comment"> * 请求类型为get</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url       请求路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params    请求参数数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name      文件名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">download</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">params</span>?: &#123;[<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (params) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">pre</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">let</span> [uri, param]: <span class="built_in">string</span>[] = url.<span class="title function_">split</span>(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="attr">item</span>: <span class="built_in">string</span> = key + <span class="string">&quot;=&quot;</span> + params[key];</span><br><span class="line">            pre += item + <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        pre += param;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">open</span>(uri + <span class="string">&#x27;?&#x27;</span> + pre, name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">open</span>(url, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * post 请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url       请求路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data      请求参数数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config    请求配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">post</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">data</span>?: <span class="built_in">any</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span> | <span class="title class_">ApiResult</span>&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!config) &#123;</span><br><span class="line">        config = <span class="title function_">defaultRequestConfig</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    config.<span class="property">method</span> = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">    config.<span class="property">url</span> = url;</span><br><span class="line">    config.<span class="property">data</span> = data;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * form表单格式的post请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url       请求路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data      请求参数数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config    请求配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">postForm</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">data</span>?: <span class="built_in">any</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span> | <span class="title class_">ApiResult</span>&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!config) &#123;</span><br><span class="line">        config = <span class="title function_">defaultRequestConfig</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    config.<span class="property">headers</span> = config.<span class="property">headers</span> || <span class="keyword">new</span> <span class="title class_">AxiosHeaders</span>();</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">post</span>(url, data, config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * json格式的post请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url       请求路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data      请求参数数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config    请求配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">postJson</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">data</span>?: <span class="built_in">any</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span> | <span class="title class_">ApiResult</span>&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!config) &#123;</span><br><span class="line">        config = <span class="title function_">defaultRequestConfig</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    config.<span class="property">headers</span> = config.<span class="property">headers</span> || <span class="keyword">new</span> <span class="title class_">AxiosHeaders</span>();</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&quot;application/json;charset=UTF-8&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">post</span>(url, data, config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件格式的post请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url       请求路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data      请求参数数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config    请求配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">postFile</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">data</span>?: <span class="built_in">any</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span> | <span class="title class_">ApiResult</span>&lt;<span class="built_in">any</span>&gt;&gt;  &#123;</span><br><span class="line">    <span class="keyword">if</span> (!config) &#123;</span><br><span class="line">        config = <span class="title function_">defaultRequestConfig</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    config.<span class="property">headers</span> = config.<span class="property">headers</span> || <span class="keyword">new</span> <span class="title class_">AxiosHeaders</span>();</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&quot;multipart/form-data;charset=UTF-8&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">post</span>(url, data, config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件格式的post请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url       请求路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data      请求参数数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config    请求配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">put</span>(<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">data</span>?: <span class="built_in">any</span>, <span class="attr">config</span>?: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span> | <span class="title class_">ApiResult</span>&lt;<span class="built_in">any</span>&gt;&gt;  &#123;</span><br><span class="line">    <span class="keyword">if</span> (!config) &#123;</span><br><span class="line">        config = <span class="title function_">defaultRequestConfig</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    config.<span class="property">method</span> = <span class="string">&quot;put&quot;</span>;</span><br><span class="line">    config.<span class="property">url</span> = url;</span><br><span class="line">    config.<span class="property">data</span> = data;</span><br><span class="line">    config.<span class="property">headers</span> = config.<span class="property">headers</span> || <span class="keyword">new</span> <span class="title class_">AxiosHeaders</span>();</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&quot;multipart/form-data;charset=UTF-8&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装操作中最终要的封装就是<code>request</code>的封装, 当某个请求需要额外的请求拦截时, 可以创建一个新的实例完成, 保持原请求实例不变</p><p>返回结果中的<code>ApiResult</code>是个人封装的请求结果</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ApiResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="title class_">ApiStateEnum</span> | <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">data</span>: T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>默认的请求</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认请求配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defaultRequestConfig</span>(<span class="params"></span>): <span class="title class_">AxiosRequestConfig</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实例化一个请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">request</span>: <span class="title class_">Request</span> = <span class="keyword">new</span> <span class="title class_">Request</span>(</span><br><span class="line">    <span class="title function_">defaultRequestConfig</span>()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个实例化请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure></li></ol><p>到目前, 项目的前端使用组件添加的差不多了, 在整理了项目的架子和布局之后, 前端暂停一段, 开始做服务端的登录认证等内容</p><p><a href="pure-project-web.7z">前端项目</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue系列(三)---状态管理库</title>
      <link href="/2024/01/18/web/Vue%E7%B3%BB%E5%88%97%E4%B8%89%E4%B9%8B%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%BA%93/"/>
      <url>/2024/01/18/web/Vue%E7%B3%BB%E5%88%97%E4%B8%89%E4%B9%8B%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p><code>Vue</code>项目中的状态管理库是另一种形式的会话存储, 常用了有<code>vuex</code>, <code>pinia</code>, 目前官网推荐使用<code>pinia</code>, 所以…</p><h3 id="引入"><a class="markdownIt-Anchor" href="#引入"></a> 引入</h3><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><p>使用<code>pnpm</code>命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add pinia;</span><br></pre></td></tr></table></figure><h4 id="引入-2"><a class="markdownIt-Anchor" href="#引入-2"></a> 引入</h4><p>在<code>main.ts</code>中使用<code>pinia</code>函数创建一个状态管理库, 并使用<code>use</code>函数引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/assets/css/global.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router/router.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><p>此处使用类组合式<code>API</code>的方式使用</p><p>首先在项目中创建一个<code>store</code>目录用于存放状态, 创建一个<code>user.ts</code>作为用户的状态管理库, 并以此为例</p><h4 id="定义状态库"><a class="markdownIt-Anchor" href="#定义状态库"></a> 定义状态库</h4><p>所谓定义状态就是定义一个全局的内容, 组合式<code>API</code>的方式需要使用<code>defineStore</code>函数, 有两个参数, 第一个是名称, 必须保证在<code>store</code>中全局唯一, 第二个是一个<code>setup</code>函数, 再<code>setup</code>函数中定义内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&quot;user&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时就定义好了名为<code>user</code>的状态, 但是在这个状态中并没有定义其他内容</p><blockquote><p>在<code>setup store</code>中</p><ul><li><code>ref</code>就是<code>state</code>属性</li><li><code>computed()</code>就是<code>getters</code></li><li><code>function()</code>就是<code>actions</code></li></ul></blockquote><h4 id="定义state"><a class="markdownIt-Anchor" href="#定义state"></a> 定义<code>state</code></h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&quot;user&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> info = ref&lt;<span class="title class_">UserInfo</span> | <span class="literal">null</span>&gt;(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;xiaolin&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125; <span class="keyword">as</span> <span class="title class_">UserInfo</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;info&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">account</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">permissions</span>: <span class="built_in">string</span>[];</span><br><span class="line">    <span class="attr">roles</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useUserStore&#125; <span class="keyword">from</span> <span class="string">&quot;@/store/user.ts&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">useUserStore</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;user name: &quot;</span>, user.<span class="property">info</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重置</p><p>使用组合式<code>API</code>时, 需要自己创建<code>$reset</code>函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/user.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&quot;user&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> info = ref&lt;<span class="title class_">UserInfo</span> | <span class="literal">null</span>&gt;(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;xiaolin&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125; <span class="keyword">as</span> <span class="title class_">UserInfo</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">$reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">        info.<span class="property">value</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;info, $reset&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中或组件外</span></span><br><span class="line"><span class="keyword">import</span> &#123;userUserStore&#125; <span class="keyword">from</span> <span class="string">&quot;@/store/user.ts&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">useUserStore</span>();</span><br><span class="line"><span class="comment">// 重置</span></span><br><span class="line">user.$reset();</span><br></pre></td></tr></table></figure><p>注意:</p><ol><li>使用<code>setup store</code>时, <code>setup</code>函数要像<code>vue</code>中的<code>setup</code>函数一样, 需要返回一个对象, 这样才能在组件中或者组件外访问到</li><li>选项式<code>API</code>方式定义的<code>state</code>不需要手动创建<code>$reset</code>函数</li></ol><p><img src="Pinia%E4%B8%ADStore%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E8%AE%BF%E9%97%AE.png" alt="Pinia中Store的定义和访问" /></p><p><a href="#问题一">重置时出错</a></p><h4 id="定义getters"><a class="markdownIt-Anchor" href="#定义getters"></a> 定义<code>getters</code></h4><p><code>setup store</code>中的<code>getter</code>是通过<code>computed</code>定义的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore</span><br><span class="line">    = <span class="title function_">defineStore</span>(<span class="string">&quot;user&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> info = ref&lt;<span class="title class_">UserInfo</span> | <span class="literal">null</span>&gt;(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;xiaolin&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125; <span class="keyword">as</span> <span class="title class_">UserInfo</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> getInfo = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info.<span class="property">value</span>;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;info, getInfo&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>访问</p><p>与访问<code>state</code>的属性一致, 直接调用即可, 需要注意的是, <code>getter</code>或者说计算属性的定义方式是函数式, 但是访问时是不需要使用&quot;()&quot;的; <code>computed</code>在定义时就已经确定了返回的内容, 它是通过定义的回调函数确定的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useUserStore&#125; <span class="keyword">from</span> <span class="string">&quot;@/store/user.ts&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">useUserStore</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;user: &quot;</span>, user.<span class="property">getInfo</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="Pinia%E4%B8%ADStore%E7%9A%84getter%E5%AE%9A%E4%B9%89%E5%92%8C%E8%AE%BF%E9%97%AE.png" alt="Pinia中Store的getter定义和访问" /></p><p>需要注意的是, <code>getter</code>本身是不接收参数的, 但是由于<code>getter</code>是自定义的, 所以可以通过<code>getter</code>返回一个函数, 通过函数接收参数, 执行操作, 其调用方式即可类似函数调用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/user.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore</span><br><span class="line">    = <span class="title function_">defineStore</span>(<span class="string">&quot;user&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> info = ref&lt;<span class="title class_">UserInfo</span> | <span class="literal">null</span>&gt;(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;xiaolin&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125; <span class="keyword">as</span> <span class="title class_">UserInfo</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> getInfo = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">key</span>) =&gt;</span> info.<span class="property">value</span>[key];</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;info, getInfo&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中或组件外</span></span><br><span class="line"><span class="keyword">import</span> &#123;useUserStore&#125; <span class="keyword">from</span> <span class="string">&quot;@/store/user.ts&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">useUserStore</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = user.<span class="title function_">getInfo</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义action"><a class="markdownIt-Anchor" href="#定义action"></a> 定义<code>action</code></h4><p><code>setup store</code>中的<code>action</code>是通过<code>function</code>定义的</p><p>定义</p><p>定义方式与函数定义方式一致</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/user.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore</span><br><span class="line">    = <span class="title function_">defineStore</span>(<span class="string">&quot;user&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> info = ref&lt;<span class="title class_">UserInfo</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setUser</span>(<span class="params"><span class="attr">user</span>: <span class="title class_">UserInfo</span></span>) &#123;</span><br><span class="line">        info.<span class="property">value</span> = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;info, setUser&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>访问</p><p>访问时与调用函数一致, 有参数时添加参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件中或组件外</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">  user.<span class="title function_">setUser</span>(&#123;&#125; <span class="keyword">as</span> <span class="title class_">UserInfo</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="Pinia%E4%B8%ADStore%E7%9A%84action%E5%AE%9A%E4%B9%89%E5%92%8C%E8%AE%BF%E9%97%AE.png" alt="Pinia中Store的action定义和访问" /></p><p>订阅<code>action</code></p><p>可以通过<code>store.$onAction()</code>来监听<code>action</code>和它们的结果, 传递给它们的回调函数会在<code>action</code>本身之前执行. <code>after</code>表示在<code>promise</code>解决之后,允许在<code>action</code>解决之后执行一个回调函数. <code>onError</code>允许在<code>action</code>抛出错误或者<code>reject</code>时执行一个回调</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actionListener = userStore.$onAction(</span><br><span class="line"><span class="function">(<span class="params">&#123;name, store, arges, after, onError&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`start action [<span class="subst">$&#123;name&#125;</span>] with params [<span class="subst">$&#123;args.join(<span class="string">&#x27;, &#x27;</span>)&#125;</span>].`</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">after</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`finish action [<span class="subst">$&#123;name&#125;</span>] after <span class="subst">$&#123;<span class="built_in">Date</span>.now() - time&#125;</span>ms.\nresult: <span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">onError</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> [</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`failed action [<span class="subst">$&#123;name&#125;</span>] after <span class="subst">$&#123;<span class="built_in">Date</span>.now() - time&#125;</span>ms.\nerror: <span class="subst">$&#123;err&#125;</span>`</span>)</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上述监听器的中</p><ul><li><code>name</code>: 监听的<code>action</code>名称</li><li><code>store</code>: 监听的<code>action</code>所在的状态库</li><li><code>agres</code>: 监听的<code>action</code>调用时的参数</li><li><code>after</code>: 监听的<code>action</code>成功调用后的后置处理</li><li><code>onError</code>: 监听的<code>action</code>异常或者拒绝情况的后置处理</li></ul><p>默认情况下, <code>action</code>订阅器会被绑定到添加的组件上, 当组件被卸载时, 将被自动删除. 如果想在组件卸载后依旧保留, 可以在定义时添加第二个参数, 值为<code>true</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> listener = store.$onAction(callback, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="项目使用"><a class="markdownIt-Anchor" href="#项目使用"></a> 项目使用</h3><p>到此处, 可以先添加两处<code>store</code>的使用, 信息从最初始信息开始, 项目开发过程中不断完善信息</p><h4 id="状态库"><a class="markdownIt-Anchor" href="#状态库"></a> 状态库</h4><p>一处是<code>menu</code>, 用于存储菜单和路由信息</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">xiaolin</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/1/23 18:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouteModel</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@/router/model.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;addRouters, currentRoute, to&#125; <span class="keyword">from</span> <span class="string">&quot;@/router/router.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouteNameEnum</span>, <span class="title class_">RoutePathEnum</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@/assets/ts/enums/RouteEnum.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useUserStore&#125; <span class="keyword">from</span> <span class="string">&quot;@/store/user.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserInfo</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@/assets/ts/model/system/UserInfo.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMenuStore = <span class="title function_">defineStore</span>(<span class="string">&quot;menu&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> menus = ref&lt;<span class="title class_">RouteModel</span>[]&gt;([] <span class="keyword">as</span> <span class="title class_">RouteModel</span>[]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> menuList = ref&lt;<span class="title class_">RouteModel</span>[]&gt;([] <span class="keyword">as</span> <span class="title class_">RouteModel</span>[]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> activeMenu = ref&lt;<span class="title class_">RouteModel</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> includeMenu = ref&lt;<span class="title class_">RouteModel</span>[]&gt;([]);</span><br><span class="line">    <span class="comment">// 获取菜单</span></span><br><span class="line">    <span class="keyword">const</span> getMenus = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> menus.<span class="property">value</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 获取菜单路由</span></span><br><span class="line">    <span class="keyword">const</span> getRoutes = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> menuList.<span class="property">value</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 获取某个菜单路由</span></span><br><span class="line">    <span class="keyword">const</span> getRoute = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params"><span class="attr">path</span>: <span class="built_in">string</span></span>) =&gt;</span> menuList.<span class="property">value</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> path === item.<span class="property">path</span>) || <span class="title class_">RouteModel</span>.<span class="title function_">generateModel</span>(&#123;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 获取当前活跃菜单</span></span><br><span class="line">    <span class="keyword">const</span> getActive = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> activeMenu.<span class="property">value</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 获取打开的标签</span></span><br><span class="line">    <span class="keyword">const</span> getIncludeMenu = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> includeMenu.<span class="property">value</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 设置菜单</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setMenu</span> = (<span class="params"><span class="attr">menu</span>: <span class="title class_">RouteModel</span>[]</span>) =&gt; &#123;</span><br><span class="line">        menus.<span class="property">value</span> = menu;</span><br><span class="line">        menuList.<span class="property">value</span> = <span class="title class_">RouteModel</span>.<span class="title function_">getRoutes</span>(menu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置当前活跃菜单</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setActive</span> = (<span class="params"><span class="attr">menu</span>: <span class="title class_">RouteModel</span> | <span class="literal">undefined</span></span>) =&gt; &#123;</span><br><span class="line">        activeMenu.<span class="property">value</span> = menu;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加打开的标签</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addIncludeMenu</span> = <span class="keyword">async</span> (<span class="params"><span class="attr">menu</span>: <span class="title class_">RouteModel</span></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (includeMenu.<span class="property">value</span>.<span class="property">length</span> &lt; <span class="number">1</span> &amp;&amp; menu.<span class="property">path</span> !== <span class="title class_">RoutePathEnum</span>.<span class="property">HOME</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> first = getRoute.<span class="title function_">value</span>(<span class="title class_">RoutePathEnum</span>.<span class="property">HOME</span>);</span><br><span class="line">            includeMenu.<span class="property">value</span>.<span class="title function_">push</span>(first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> tag = includeMenu.<span class="property">value</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="title function_">same</span>(menu));</span><br><span class="line">        <span class="keyword">if</span> (!tag) &#123;</span><br><span class="line">            includeMenu.<span class="property">value</span>.<span class="title function_">push</span>(menu);</span><br><span class="line">            <span class="title function_">setActive</span>(menu);</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">to</span>(menu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 移除已打开的标签</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">removeIncludeMenu</span> = <span class="keyword">async</span> (<span class="params"><span class="attr">menu</span>: <span class="title class_">RouteModel</span></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> menus = includeMenu.<span class="property">value</span>;</span><br><span class="line">        <span class="keyword">if</span> (menus.<span class="property">length</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> index = menus.<span class="title function_">indexOf</span>(menu);</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            includeMenu.<span class="property">value</span> = includeMenu.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !item.<span class="title function_">same</span>(menu));</span><br><span class="line">            <span class="keyword">let</span> next = includeMenu.<span class="property">value</span>[--index];</span><br><span class="line">            <span class="title function_">setActive</span>(next);</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">to</span>(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否需要初始化</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">needInit</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> menus.<span class="property">value</span>.<span class="property">length</span> &lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化菜单</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">initMenu</span> = <span class="keyword">async</span> (<span class="params"><span class="attr">path</span>?: <span class="built_in">string</span>, <span class="attr">isLogin</span>: <span class="built_in">boolean</span> = <span class="literal">false</span></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isLogin &amp;&amp; !<span class="title function_">needInit</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">user</span>: <span class="title class_">UserInfo</span> = userStore.<span class="property">getUser</span>;</span><br><span class="line">        <span class="comment">// TODO 请求菜单</span></span><br><span class="line">        <span class="keyword">let</span> result = &#123;<span class="attr">account</span>: user.<span class="property">account</span>, <span class="attr">code</span>: <span class="literal">true</span>, <span class="attr">data</span>: []&#125;;</span><br><span class="line">        <span class="keyword">if</span> (!result.<span class="property">code</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> ms = [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;详情&#x27;</span>,</span><br><span class="line">                <span class="attr">children</span>: [],</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">menu</span>: <span class="title class_">RouteModel</span>[] = ms.<span class="title function_">map</span>(<span class="function">(<span class="params"><span class="attr">item</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">RouteModel</span>.<span class="title function_">generateModel</span>(item);</span><br><span class="line">        &#125;);</span><br><span class="line">        menu.<span class="title function_">unshift</span>(<span class="title class_">RouteModel</span>.<span class="property">HOME</span>)</span><br><span class="line">        <span class="title function_">addRouters</span>(menu, <span class="title class_">RouteNameEnum</span>.<span class="property">INDEX</span>);</span><br><span class="line">        <span class="title function_">setMenu</span>(menu);</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">next</span>: <span class="built_in">string</span> = path || <span class="title function_">currentRoute</span>().<span class="property">path</span> <span class="keyword">as</span> <span class="built_in">string</span> || <span class="title class_">RoutePathEnum</span>.<span class="property">HOME</span></span><br><span class="line">        next = <span class="string">&#x27;/&#x27;</span> === next ? <span class="title class_">RoutePathEnum</span>.<span class="property">HOME</span> : next;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">route</span>: <span class="title class_">RouteModel</span> = getRoute.<span class="title function_">value</span>(next);</span><br><span class="line">        <span class="comment">// setActive(route);</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">addIncludeMenu</span>(route);</span><br><span class="line">        <span class="comment">// await to(route).then(() =&gt; &#123;</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清空菜单</span></span><br><span class="line">    <span class="keyword">const</span> clearMenu = <span class="keyword">function</span> (<span class="params"></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="title function_">setMenu</span>([])</span><br><span class="line">        includeMenu.<span class="property">value</span> = [];</span><br><span class="line">        <span class="title function_">setActive</span>(<span class="literal">undefined</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;getRoutes, getRoute, getMenus, getActive, getIncludeMenu,</span><br><span class="line">        setMenu, setActive, addIncludeMenu, removeIncludeMenu, needInit, initMenu, clearMenu&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一处是<code>user</code>, 用于存储用户信息</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useMenuStore&#125; <span class="keyword">from</span> <span class="string">&quot;@/store/menu.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;currentRoute&#125; <span class="keyword">from</span> <span class="string">&quot;@/router/router.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserInfo</span>, selectUser, saveUser, <span class="title class_">UserKey</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@/assets/ts/model/system/UserInfo.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RoutePathEnum</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@/assets/ts/enums/RouteEnum.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">xiaolin</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/1/18 19:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&quot;user&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> user = ref&lt;<span class="title class_">UserInfo</span>&gt;(<span class="title function_">selectUser</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否登录</span></span><br><span class="line">    <span class="keyword">const</span> isLogin = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !!(getToken.<span class="property">value</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 获取用户嘻嘻</span></span><br><span class="line">    <span class="keyword">const</span> getUser = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!user.<span class="property">value</span> || !user.<span class="property">value</span>.<span class="property">token</span>) &#123;</span><br><span class="line">            user.<span class="property">value</span> = <span class="title function_">selectUser</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user.<span class="property">value</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 获取用于token</span></span><br><span class="line">    <span class="keyword">const</span> getToken = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getUser.<span class="property">value</span>.<span class="property">token</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 获取用户</span></span><br><span class="line">    <span class="keyword">const</span> getUserInfo = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params"><span class="attr">key</span>: <span class="title class_">UserKey</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="attr">info</span>: <span class="title class_">UserInfo</span> = getUser.<span class="property">value</span> ? getUser.<span class="property">value</span> <span class="keyword">as</span> <span class="title class_">UserInfo</span> : &#123;&#125; <span class="keyword">as</span> <span class="title class_">UserInfo</span>;</span><br><span class="line">            <span class="keyword">return</span> info[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 重置用户</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">$reset</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="title function_">setUser</span>(<span class="keyword">new</span> <span class="title class_">UserInfo</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置用户</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setUser</span>(<span class="params"><span class="attr">userInfo</span>: <span class="title class_">UserInfo</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        user.<span class="property">value</span> = userInfo;</span><br><span class="line">        <span class="title function_">saveUser</span>(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置token</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setToken</span>(<span class="params"><span class="attr">tokenInfo</span>: <span class="built_in">string</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">userInfo</span>: <span class="title class_">UserInfo</span> = getUser.<span class="property">value</span></span><br><span class="line">        userInfo.<span class="property">token</span> = tokenInfo;</span><br><span class="line">        <span class="title function_">saveUser</span>(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 登录</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;login&quot;</span>)</span><br><span class="line">        <span class="comment">// 登录</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">user</span>: <span class="title class_">UserInfo</span> = <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line">        user.<span class="property">name</span> = <span class="string">&quot;xiao lin&quot;</span></span><br><span class="line">        user.<span class="property">sex</span> = <span class="number">1</span>;</span><br><span class="line">        user.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">        user.<span class="property">account</span> = <span class="string">&#x27;xiao-lin&#x27;</span></span><br><span class="line">        user.<span class="property">token</span> = <span class="string">&#x27;xiao-lin&#x27;</span></span><br><span class="line">        <span class="title function_">setUser</span>(user);</span><br><span class="line">        <span class="comment">// 初始化用户信息</span></span><br><span class="line">        <span class="keyword">const</span> menuStore = <span class="title function_">useMenuStore</span>();</span><br><span class="line">        <span class="comment">// 初始化菜单</span></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">next</span>: <span class="built_in">string</span> = <span class="title function_">currentRoute</span>().<span class="property">query</span>.<span class="property">toNext</span> <span class="keyword">as</span> <span class="built_in">string</span> || <span class="title class_">RoutePathEnum</span>.<span class="property">HOME</span></span><br><span class="line">        next = <span class="string">&#x27;/&#x27;</span> === next ? <span class="title class_">RoutePathEnum</span>.<span class="property">HOME</span> : next;</span><br><span class="line">        <span class="keyword">await</span> menuStore.<span class="title function_">initMenu</span>(next, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// const route: RouteModel = menuStore.getRoute(next);</span></span><br><span class="line">        <span class="comment">// menuStore.setActive(route);</span></span><br><span class="line">        <span class="comment">// menuStore.addIncludeMenu(route);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 退出</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">logout</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;logout&quot;</span>);</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">user</span>: <span class="title class_">UserInfo</span> = <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line">        <span class="title function_">setUser</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;getUser, isLogin, getUserInfo, getToken, $reset, setUser, setToken, login, logout&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="路由"><a class="markdownIt-Anchor" href="#路由"></a> 路由</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">xiaolin</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/1/7 16:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory, <span class="title class_">Router</span>, <span class="title class_">RouteRecordRaw</span>&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouteModel</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@/router/model.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useUserStore&#125; <span class="keyword">from</span> <span class="string">&quot;@/store/user.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useMenuStore&#125; <span class="keyword">from</span> <span class="string">&quot;@/store/menu.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouteNameEnum</span>, <span class="title class_">RoutePathEnum</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@/assets/ts/enums/RouteEnum.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">RouteRecordRaw</span>[]&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="title class_">RoutePathEnum</span>.<span class="property">INDEX</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="title class_">RouteNameEnum</span>.<span class="property">INDEX</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/system/container/Container.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="title class_">RoutePathEnum</span>.<span class="property">HOME</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="title class_">RoutePathEnum</span>.<span class="property">LOGIN</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="title class_">RouteNameEnum</span>.<span class="property">LOGIN</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/system/login/Login.vue&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">router</span>: <span class="title class_">Router</span> = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">trace</span>(<span class="string">&quot;router before guide: &quot;</span>, <span class="keyword">from</span>, to);</span><br><span class="line">    <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>();</span><br><span class="line">    <span class="keyword">const</span> menuStore = <span class="title function_">useMenuStore</span>();</span><br><span class="line">    <span class="comment">// 如果是登录页, 则直接跳转</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="title class_">RoutePathEnum</span>.<span class="property">LOGIN</span>) &#123;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!userStore.<span class="property">isLogin</span>) &#123;    <span class="comment">// 未登录则直接到登录页</span></span><br><span class="line">        <span class="title function_">next</span>(&#123;<span class="attr">path</span>: <span class="title class_">RoutePathEnum</span>.<span class="property">LOGIN</span>, <span class="attr">name</span>: <span class="title class_">RouteNameEnum</span>.<span class="property">LOGIN</span>, <span class="attr">query</span>: &#123;<span class="attr">toNext</span>: to.<span class="property">path</span>&#125;&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果需要初始化菜单</span></span><br><span class="line">        <span class="keyword">if</span> (menuStore.<span class="title function_">needInit</span>()) &#123;</span><br><span class="line">            <span class="comment">// 初始化菜单, 初始完之后</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">await</span> menuStore.<span class="title function_">initMenu</span>(to.<span class="property">path</span>)) &#123;</span><br><span class="line">                <span class="title function_">next</span>(&#123;...to, <span class="attr">replace</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">next</span>(&#123;<span class="attr">path</span>: <span class="title class_">RoutePathEnum</span>.<span class="property">LOGIN</span>, <span class="attr">name</span>: <span class="title class_">RouteNameEnum</span>.<span class="property">LOGIN</span>, <span class="attr">query</span>: &#123;<span class="attr">toNext</span>: to.<span class="property">path</span>&#125;&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addRouters</span>(<span class="params"><span class="attr">routes</span>: <span class="title class_">RouteModel</span>[], <span class="attr">parentName</span>?: <span class="built_in">string</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">trace</span>(<span class="string">&quot;router add routers: &quot;</span>, parentName, routes);</span><br><span class="line">    <span class="keyword">if</span> (!routes || routes.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    routes.<span class="title function_">forEach</span>(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parentName) &#123;</span><br><span class="line">            router.<span class="title function_">addRoute</span>(parentName, route);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            router.<span class="title function_">addRoute</span>(route)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (route.<span class="property">children</span> &amp;&amp; route.<span class="property">children</span>.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="title function_">addRouters</span>(route.<span class="property">children</span>, route.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由跳转</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">to</span>(<span class="params"><span class="attr">to</span>: <span class="title class_">RouteModel</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">trace</span>(<span class="string">&quot;router to: &quot;</span>, to);</span><br><span class="line">    <span class="keyword">return</span> router.<span class="title function_">push</span>(to).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">currentRoute</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> route = router.<span class="property">currentRoute</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">trace</span>(<span class="string">&quot;router current route: &quot;</span>, route);</span><br><span class="line">    <span class="keyword">return</span> route;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="登录组件"><a class="markdownIt-Anchor" href="#登录组件"></a> 登录组件</h4><p>登录组件中添加登录操作, 调用用户状态库中的登录函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">operation</span>(<span class="params"><span class="attr">type</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!userInfo.<span class="property">value</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">warning</span>(<span class="string">&quot;用户名不能为空!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!userInfo.<span class="property">value</span>.<span class="property">password</span>) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">warning</span>(<span class="string">&quot;密码不能为空!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="number">1</span> === <span class="keyword">type</span>.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">login</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span> === <span class="keyword">type</span>.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="title function_">register</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> info = &#123;</span><br><span class="line">    <span class="attr">username</span>: userInfo.<span class="property">value</span>.<span class="property">username</span>,</span><br><span class="line">    <span class="attr">password</span>: userInfo.<span class="property">value</span>.<span class="property">password</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> userStore.<span class="title function_">login</span>();</span><br><span class="line">  <span class="comment">// store.dispatch(&#x27;Login&#x27;, info).then(res =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(res)</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述为演示代码, 具体需要操作可根据自己的需要处理</p><h4 id="菜单组件"><a class="markdownIt-Anchor" href="#菜单组件"></a> 菜单组件</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> menuStore = <span class="title function_">useMenuStore</span>();</span><br><span class="line"><span class="keyword">const</span> menus = ref&lt;<span class="title class_">RouteModel</span>[]&gt;([]);</span><br><span class="line"><span class="keyword">const</span> active = ref&lt;<span class="built_in">string</span> | <span class="literal">undefined</span>&gt;(<span class="literal">undefined</span>);</span><br><span class="line"><span class="comment">// 获取菜单和当前路由路径</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  menus.<span class="property">value</span> = menuStore.<span class="property">getMenus</span></span><br><span class="line">  active.<span class="property">value</span> = router.<span class="property">currentRoute</span>.<span class="property">value</span>.<span class="property">path</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 监听路由路径, 修改活跃菜单</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> router.<span class="property">currentRoute</span>.<span class="property">value</span>.<span class="property">path</span>,</span><br><span class="line">    <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">      active.<span class="property">value</span> = newVal;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">// 菜单点击事件, 添加到打开菜单, 并设置新的活跃菜单</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">menuClick</span>(<span class="params"><span class="attr">menu</span>: <span class="title class_">RouteModel</span></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> menuStore.<span class="title function_">addIncludeMenu</span>(menu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单组件中做三件事: 1. 获取初始化后的菜单和活跃菜单; 2. 监听路由; 3, 菜单点击事件. 前两件事是为了获取活跃菜单, 回显菜单的样式; 菜单点击是为了切换路由</p><h4 id="标签组件"><a class="markdownIt-Anchor" href="#标签组件"></a> 标签组件</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> menuStore = <span class="title function_">useMenuStore</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"><span class="comment">// 当前活跃标签</span></span><br><span class="line"><span class="keyword">let</span> checkedName = ref&lt;<span class="built_in">string</span> | <span class="literal">undefined</span>&gt;();</span><br><span class="line"><span class="comment">// 打开的菜单标签</span></span><br><span class="line"><span class="keyword">let</span> dynamicTags = ref&lt;<span class="title class_">RouteModel</span>[]&gt;([]);</span><br><span class="line"><span class="comment">// 初始化打开的菜单标签和活跃标签</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  dynamicTags.<span class="property">value</span> = menuStore.<span class="property">getIncludeMenu</span>;</span><br><span class="line">  checkedName.<span class="property">value</span> = menuStore.<span class="property">getActive</span>?.<span class="property">name</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 监听路由, 添加新标签</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> router.<span class="property">currentRoute</span>.<span class="property">value</span>.<span class="property">path</span>,</span><br><span class="line">    <span class="title function_">async</span> (newVal, oldVal) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;route change&quot;</span>, newVal)</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">addTag</span>(newVal)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">// 标签关闭操作</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleClose</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> remove = dynamicTags.<span class="property">value</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span> === name);</span><br><span class="line">  <span class="keyword">await</span> menuStore.<span class="title function_">removeIncludeMenu</span>(remove <span class="keyword">as</span> <span class="title class_">RouteModel</span>);</span><br><span class="line">  dynamicTags.<span class="property">value</span> = menuStore.<span class="property">getIncludeMenu</span>;</span><br><span class="line">  checkedName.<span class="property">value</span> = menuStore.<span class="property">getActive</span>?.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 标签点击操作</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">onClick</span>(<span class="params"><span class="attr">tag</span>: <span class="built_in">any</span>, <span class="attr">ev</span>?: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tag: &quot;</span>, tag.<span class="property">index</span>);</span><br><span class="line">  checkedName.<span class="property">value</span> = tag.<span class="property">paneName</span>;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">to</span>(dynamicTags.<span class="property">value</span>[tag.<span class="property">index</span>] <span class="keyword">as</span> <span class="title class_">RouteModel</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加新标签</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">addTag</span>(<span class="params"><span class="attr">newValue</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> route = menuStore.<span class="title function_">getRoute</span>(newValue);</span><br><span class="line">  <span class="keyword">if</span> (!route) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> menuStore.<span class="title function_">addIncludeMenu</span>(route);</span><br><span class="line">  menuStore.<span class="title function_">setActive</span>(route);</span><br><span class="line">  checkedName.<span class="property">value</span> = menuStore.<span class="property">getActive</span>?.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标签组件主要做三件事: 1. 打开标签和活跃标签的初始化; 2. 监听路由; 3. 标签关闭操作; 4. 标签点击操作. 前两件是为了显示标签列表和活跃标签样式; 第3件是为了关闭标签, 并获取跳转到最新标签和路由; 第4件事为了切换标签和路由</p><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题😭</h3><p><i id="问题一">问题一</i></p><p>出现问题:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Store &quot;user&quot; is built using the setup syntax and does not implement $reset()</span><br></pre></td></tr></table></figure><p>问题原因:</p><p>原因一: 在使用组合式<code>API</code>时, 需要自定义<code>$reset</code>函数, 如果没有自定义, 则调用时会出现此问题</p><p>原因二: 如果定义了<code>$reset</code>函数后依然出现此问题, 可能是缓存导致的</p><p>解决方案:</p><p>方案一: 在目标<code>store</code>中定义<code>$reset</code>函数</p><p>方案二: 清空缓存并刷新浏览器</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pinia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue系列(二)---路由</title>
      <link href="/2024/01/07/web/Vue%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E8%B7%AF%E7%94%B1/"/>
      <url>/2024/01/07/web/Vue%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p><code>vue-router</code>是<code>vue</code>官方推荐的前端路由. 由于本篇的路由会实际引入项目中使用, 所以本篇中的路由不仅仅是路由, 还是菜单和页面标签. 在使用时会重新定义路由的使用</p><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><p>本篇基于前篇, 使用<code>pnpm</code>方式安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add vue-router@4</span><br></pre></td></tr></table></figure><h3 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建</h3><p>在项目中创建一个<code>router</code>目录, 在<code>router</code>目录下创建<code>index.ts</code></p><p>在<code>index.ts</code>中创建一个路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory, <span class="title class_">Router</span>, <span class="title class_">RouteRecordRaw</span>&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">RouteRecordRaw</span>[]&gt; = [</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">router</span>: <span class="title class_">Router</span> = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h3 id="引入"><a class="markdownIt-Anchor" href="#引入"></a> 引入</h3><p>在<code>main.ts</code>中导入创建的路由, 并通过<code>use</code>函数引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="简单使用"><a class="markdownIt-Anchor" href="#简单使用"></a> 简单使用</h3><ol><li><p>使用<code>router-view</code>来展示内容</p><p>在<code>App.vue</code>中添加<code>router-view</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>App.vue</code>中实际上其他事情都可以不做, 但也可以处理部分内容, 如定义部分根样式</p></li><li><p>使用<code>router-link</code>来切换路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/hello&quot;&gt;to hello&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>通常使用编程式导航代替</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>: <span class="string">`/hello`</span>&#125;);</span><br><span class="line">router.<span class="title function_">replace</span>(&#123;<span class="attr">path</span>: <span class="string">`hello`</span>&#125;);</span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">1</span>/-<span class="number">1</span>/<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li><li><p>在<code>routes</code>中添加路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">RouteRecordRaw</span>[]&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/hello&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>展示</p><p><img src="Router%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8.png" alt="Router基础使用" /></p></li><li><p>其他</p><p>在实际使用中, 路由路径的定义位置通常不是使用<code>router-link</code>, 而是使用组件来实现, 路由路径的定义位置和方式不重要, 重要的是定义路由路径和组件映射, 以及如何跳转到该路由路径上</p></li></ol><h3 id="菜单和路由"><a class="markdownIt-Anchor" href="#菜单和路由"></a> 菜单和路由</h3><p>本篇中使用<code>element</code>作为项目的开发组件库, 所以此处需要添加<code>element</code>, 然后使用<code>element</code>中的<code>menu</code>组件实现菜单和路由的控制</p><p>采用官方推荐的按需导入的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pnpm add element-plus --save</span><br><span class="line">pnpm add unplugin-vue-components unplugin-auto-import --save-dev</span><br></pre></td></tr></table></figure><p>修改<code>vite.config.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ElementPlusResolver</span>&#125; <span class="keyword">from</span> <span class="string">&quot;unplugin-vue-components/resolvers&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">vue</span>(),</span><br><span class="line">        <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">            <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title class_">Components</span>(&#123;</span><br><span class="line">            <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>需要注意的是<code>AutoImport</code>和<code>Components</code>可能无法解析到, 需要手动添加导入</p><ol><li><p>添加一个<code>login</code>路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/system/login/Index.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>/src/views/system/login</code>下创建<code>Index.vue</code>文件</p><p>网上随便扒拉一个登录页面添加到<code>Index.vue</code>中</p><p>启动项目后, 输入<code>#/login</code>跳转路由</p><p><img src="%E7%99%BB%E5%BD%95%E9%A1%B5%E8%B7%AF%E7%94%B1.png" alt="登录页路由" /></p></li><li><p>项目布局和首页</p><p>添加一个首页路由</p><p>扒拉一个项目布局</p><p>左侧添加菜单</p><p><img src="%E7%B3%BB%E7%BB%9F%E9%A6%96%E9%A1%B5.png" alt="系统首页" /></p><p>路由设置:</p><ol><li><code>App.vue</code>中有一个<code>router-view</code>标签, 用来路由网站首页和登录页</li><li><code>Show.vue</code>中有一个<code>router-view</code>用来路由网站内容页</li><li>路由配置<ul><li>顶级路由有两个: 内容根路由和登录页路由</li><li>内容路由: 内容路由作为内容根路由的子路由</li><li>项目初始时的路由: 三个, 分别是两个顶级路由和一个内容根路由下的首页路由</li><li>菜单和内容: 菜单所对应的路由从服务端获取, 依次添加到根路由中</li></ul></li></ol></li></ol><h3 id="高级使用"><a class="markdownIt-Anchor" href="#高级使用"></a> 高级使用</h3><h4 id="多个router-view"><a class="markdownIt-Anchor" href="#多个router-view"></a> 多个<code>router-view</code></h4><p>通常一个项目中会存在多个<code>router-view</code>标签, 不同的方式会有不同的展示结果</p><ol><li><p>同一个组件中有多个<code>router-view</code></p><p>即多视图</p><p>要求:</p><ul><li>不同的<code>router-view</code>需要添加不同的<code>name</code>属性</li><li>需要使用该组件展示的路由, 对应的<code>components</code>中的每个<code>component</code>的<code>key</code>必须与<code>router-view</code>中的<code>name</code>对应</li></ul><p>这种是通过路由的多组件表达的, 组件的<code>key</code>需要与对应的<code>router-view</code>的<code>name</code>一致</p><p>多<code>router-view</code>组件定义:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;router-view name=&quot;left&quot; /&gt;</span><br><span class="line">&lt;router-view name=&quot;right&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>多<code>router-view</code>的路由定义:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">components</span>: &#123;</span><br><span class="line">            <span class="attr">left</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/**/Left.vue&#x27;</span>),</span><br><span class="line">            <span class="attr">right</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/**/Right.vue&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>展示描述:</p><p>当路由到<code>path</code>为<code>/</code>的地址时, <code>Left.vue</code>和<code>Right.vue</code>将分别在<code>left</code>和<code>right</code>中显示</p></li><li><p>在有父子级关系的组件中有多个<code>router-view</code></p><p>即<strong>嵌套路由</strong></p><p>这种是通过路由的父子级关系表达的, 每更深一层的<code>router-view</code>都对应路由定义中更深一层的<code>children</code></p><p>层级<code>router-view</code>组件定义:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">        HOME</span><br><span class="line">    &lt;/h3&gt;</span><br><span class="line">&lt;router-view /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">        CONTENT</span><br><span class="line">    &lt;/h3&gt;</span><br><span class="line">&lt;router-view /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">        SO COOL</span><br><span class="line">    &lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>上述两个组件中分别有一个<code>router-view</code>, 现在想要在<code>HOME</code>的<code>router-view</code>中展示<code>CONTENT</code>, <code>CONTENT</code>的<code>router-view</code>中展示<code>SO COOL</code></p><p>层级路由定义:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/**/Content.vue&#x27;</span>)</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/so-cool&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/**/SoCool.vue&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>展示描述:</p><p>当路由到<code>path</code>为<code>/content</code>的地址时, 将展示<code>Content.vue</code>组件, 当路由到<code>path</code>为<code>/content/so-cool</code>的地址时, 将展示<code>SoCool.vue</code>组件</p></li></ol><h4 id="动态路由匹配与动态路由"><a class="markdownIt-Anchor" href="#动态路由匹配与动态路由"></a> 动态路由匹配与动态路由</h4><p>首先动态路由匹配和动态路由不是同一个概念, 动态路由匹配是一种路由的匹配规则, 动态路由是指可以动态的添加删除路由</p><p>动态路由匹配:</p><p>指将路由中的参数定义在路由路径中, 路由在解析时会将该参数以<code>name:value</code>的形式放到<code>parmas</code>中, 格式通过<code>:name</code>的方式体现, 如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这个路由会匹配具有两级, 并且以<code>user</code>开始的路径, 如:``/user/1<code>,</code>/user/xiaolin<code>, 它不会区分参数的类型等信息, 解析完成后会在</code>params<code>中有</code>id:1<code>或者</code>id:xiaolin`的内容:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/1&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:</p><p>当使用路由匹配, 其中参数发生变化时, 相同的组件实例会被复用, 即不会由于参数值的变化而重新销毁再创建, 这表示组件的声明周期钩子函数不会被调用</p><p>解决方式:</p><ol><li><p>在组件中使用<code>watch</code>监听路由参数变化</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(</span><br><span class="line"><span class="function">() =&gt;</span> router.<span class="property">currentRoute</span>.<span class="property">value</span>.<span class="property">params</span>,</span><br><span class="line">    <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>在组件中使用导航守卫监听路由参数变化</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="comment">// to.params</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123; useRouter,onBeforeRouteUpdate &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">    const router = useRouter();</span><br><span class="line">    watch(</span><br><span class="line">        () =&gt; router.currentRoute.value.params,</span><br><span class="line">        (newVal, oldVal) =&gt; &#123;</span><br><span class="line">            // ...</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">    onBeforeRouteUpdate(to, from, next) &#123;</span><br><span class="line">        // to.params</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></blockquote><ol><li><p>参数形式匹配正则</p><p>在参数后紧跟<code>()</code>, 在<code>()</code>内定义参数正则</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/user/<span class="punctuation">:</span>id&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/user/<span class="punctuation">:</span>name&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>由于路由匹配时, 实际是不知道参数的, 所以上述两个路由匹配时只是参数的<code>key</code>不一致, 但内容无限制, 所以会冲突</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/user/<span class="punctuation">:</span>id(\\d+)&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/user/<span class="punctuation">:</span>name&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>现在将第一个路由添加正则匹配, 则该路由仅匹配参数值为数字的路径, 而其他类型的参数将被第二个路由匹配</p></li><li><p>可重复参数匹配</p><p>可以认为是参数个数正则匹配</p><p>在参数后面紧跟<code>*</code>(&gt;=0个参数)或者<code>+</code>(&gt;=1个参数), 有参数形式正则匹配时, 跟在参数形式正则匹配之后</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/user/<span class="punctuation">:</span>name+&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/user/<span class="punctuation">:</span>name*&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>路由解析时会将可重复的参数在<code>params</code>中解析为一个数组, <code>key</code>为定义的参数名</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/user/<span class="punctuation">:</span>name&#x27;<span class="punctuation">,</span></span><br><span class="line">    params<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        name<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>该路由即可匹配<code>/user/1/2/3/...</code>, 需要注意的是<code>*</code>是可以匹配0个参数的, 但<code>+</code>不可以, 这是正则匹配</p></li><li><p>可选参数匹配</p><p>可以使用<code>?</code>标记一个参数为可选</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/user/<span class="punctuation">:</span>id?&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这表示参数的个数只能是0或1, 配合参数正则匹配</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/user<span class="punctuation">:</span>id(\\d+)?&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="导航守卫"><a class="markdownIt-Anchor" href="#导航守卫"></a> 导航守卫</h4><p>用来通过跳转或取消的方式守卫导航, 织入方式: 全局的, 单个路由独享的, 组件级别的</p><ol><li><p>全局</p><ul><li><p>前置守卫</p><p><code>beforeEach</code></p><p>两个参数<code>(to, from)</code>: 返回<code>boolean</code>, <code>true</code>时通过, <code>false</code>不通过</p><p>三个参数<code>(to, from, next)</code>: 返回<code>void</code>, 调用<code>next</code>回调才会跳转到<code>to</code>路由, 如果<code>next</code>回调函数在调用时添加了新路由作为参数, 则会跳转到新路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_">isAuthenticated</span>() &amp;&amp; to.<span class="property">name</span> !== <span class="string">&#x27;Login&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">next</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>, <span class="attr">query</span>: &#123;</span><br><span class="line">            to</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>解析守卫</p><p><code>beforeResolve</code></p><p>解析守卫刚好会在导航被确认之前, 所有组件内守卫和异步路由组件被解析之后调用</p><p>一个参数<code>(to)</code>: 返回<code>boolean | void</code>, <code>false</code>时取消导航</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeResole</span>(<span class="keyword">async</span> to =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">requiresCamera</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">            <span class="keyword">if</span>(err <span class="keyword">instanceof</span> <span class="title class_">NotAllowedError</span>) &#123;</span><br><span class="line">               returen <span class="literal">false</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> err</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上述是一个确保用户可以访问自定义的<code>meta</code>属性<code>requiresCamera</code>的例子</p></li><li><p>后置钩子</p><p><code>afterEach</code></p><p>后置称为钩子, 和守卫不同, 这些钩子不会接受<code>next</code>函数, 也不会改变导航本身. 可以用来处理导航故障</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, failure</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>守卫内的全局注册</p><p>在导航守卫内使用<code>inject</code>方法获取全局内容. 在<code>app.provede</code>中提供的所有内容都可以在<code>beforeEach</code>, <code>beforeResolve</code>, <code>afterEach</code>内获取到</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">provide</span>(<span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;Hello Injections&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// router.ts</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable language_">global</span> = <span class="title function_">inject</span>(<span class="string">&#x27;global&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> userStore = <span class="title function_">userAuthStore</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>路由独享守卫</p><p><code>beforeEnter</code></p><p>路由独享守卫只在进入路由时触发, 不会再<code>params</code>, <code>query</code>或<code>hash</code>改变时触发</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">        <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>beforeEnter</code>也可以是函数数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params">to</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params">to</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">        <span class="attr">beforeEnter</span>: [foo1, foo2]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>组件内的守卫</p><ul><li><p>进入</p><p><code>beforeRouteEnter</code> =&gt; <code>onBeforeRouteEnter</code></p><p>支持<code>next</code>回调, 与全局的前置守卫相似, 却别时组件内的守卫是在组件的声明周期中调用的,只针对该组件有效</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteEnter</span>(to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 通过vm访问组件实例, 可以访问组件中定义的内容</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改</p><p><code>beforeRouteUpdate</code> =&gt; <code>onBeforeRouteUpdate</code></p><p>不支持<code>next</code></p></li><li><p>离开</p><p><code>beforeRouteLeave</code> =&gt; <code>onBeforeRouteLeave</code></p><p>不支持<code>next</code>, 通常用来预防用户在还未保存修改前突然离开, 可以通过返回<code>false</code>来取消离开</p></li></ul></li><li><p>完整的导航解析流程</p><ul><li>导航被触发</li><li>失活组件里调用<code>beforeRouteLeave</code></li><li>调用全局<code>beforeEach</code></li><li>在重用的组件里调用<code>beforeRouteUpdate</code></li><li>在路由配置里调用<code>BeforeEnter</code></li><li>解析异步路由组件</li><li>在被激活的组件里调用<code>beforeRouteEnter</code></li><li>调用全局的<code>beforeResolve</code></li><li>导航被确认</li><li>调用全局的<code>afterEach</code></li><li>触发<code>DOM</code>更新</li><li>调用<code>beforeRouteEnter</code>, 创建好的组件实例会为作为回调函数<code>next</code>的参数传入</li></ul></li></ol><h4 id="数据获取"><a class="markdownIt-Anchor" href="#数据获取"></a> 数据获取</h4><p>某些情况下需要根据路由的参数来从服务中获取相关数据, 实现方式有两种:</p><ol><li><p>导航完成之后获取</p><p>通常是在组件的声明周期钩子函数中完成的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onMounted</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> id = route.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getData</span>(id);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> route.<span class="property">params</span>,</span><br><span class="line">    <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> id = router.<span class="property">currentRoute</span>.<span class="property">value</span>.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getData</span>();</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>导航完成之前获取</p><p>通常是组件内守卫中完成的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onBeforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = to.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title function_">getData</span>(id).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> vm.<span class="title function_">setData</span>(res));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> comData = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    comData.<span class="property">value</span> = data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="组合式api"><a class="markdownIt-Anchor" href="#组合式api"></a> 组合式<code>API</code></h4><p>在<code>setup</code>中使用路由的组合式<code>API</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute, useRouter, onBeforeRouteUpdate &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">onBeforeRouteUpdate</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参考文章: <a href="https://router.vuejs.org/zh/guide/advanced/composition-api.html">https://router.vuejs.org/zh/guide/advanced/composition-api.html</a></p><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题😭</h3><p><i id="问题一">问题一</i></p><p>添加<code>element-plus</code>的<code>icon</code>不生效</p><p>此处指的不生效是指: 1. 使用自动导入的方式; 2. 添加<code>element-plus</code>组件后, 组件生效; 3. 添加<code>icon</code>库后, 并进行的自动导入配置. 如下</p><blockquote><ol><li><p><code>element-plus</code>组件库自动导入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pnpm add element-plus</span><br><span class="line">$ pnpm add --save-dev unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure></li><li><p><code>element-plus</code>组件库配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>添加<code>element-plus</code>的<code>icon</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pnpm add @element-plus/icons-vue</span><br><span class="line">$ pnpm add --save-dev unplugin-icons unplugin-auto-import</span><br></pre></td></tr></table></figure></li><li><p>添加<code>element-plus</code>的<code>icon</code>配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;resolve&#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icons</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-icons/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IconsResolver</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-icons/resolver&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Inspect</span> <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-inspect&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pathSrc = <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: pathSrc,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">Vue</span>(),</span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="comment">// Auto import functions from Vue, e.g. ref, reactive, toRef...</span></span><br><span class="line">      <span class="comment">// 自动导入 Vue 相关函数，如：ref, reactive, toRef 等</span></span><br><span class="line">      <span class="attr">imports</span>: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Auto import functions from Element Plus, e.g. ElMessage, ElMessageBox... (with style)</span></span><br><span class="line">      <span class="comment">// 自动导入 Element Plus 相关函数，如：ElMessage, ElMessageBox... (带样式)</span></span><br><span class="line">      <span class="attr">resolvers</span>: [</span><br><span class="line">        <span class="title class_">ElementPlusResolver</span>(),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Auto import icon components</span></span><br><span class="line">        <span class="comment">// 自动导入图标组件</span></span><br><span class="line">        <span class="title class_">IconsResolver</span>(&#123;</span><br><span class="line">          <span class="attr">prefix</span>: <span class="string">&#x27;Icon&#x27;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      ],</span><br><span class="line"></span><br><span class="line">      <span class="attr">dts</span>: <span class="title function_">resolve</span>(pathSrc, <span class="string">&#x27;auto-imports.d.ts&#x27;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [</span><br><span class="line">        <span class="comment">// Auto register icon components</span></span><br><span class="line">        <span class="comment">// 自动注册图标组件</span></span><br><span class="line">        <span class="title class_">IconsResolver</span>(&#123;</span><br><span class="line">          <span class="attr">enabledCollections</span>: [<span class="string">&#x27;ep&#x27;</span>],</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// Auto register Element Plus components</span></span><br><span class="line">        <span class="comment">// 自动导入 Element Plus 组件</span></span><br><span class="line">        <span class="title class_">ElementPlusResolver</span>(),</span><br><span class="line">      ],</span><br><span class="line"></span><br><span class="line">      <span class="attr">dts</span>: <span class="title function_">resolve</span>(pathSrc, <span class="string">&#x27;components.d.ts&#x27;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Icons</span>(&#123;</span><br><span class="line">      <span class="attr">autoInstall</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Inspect</span>(),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>问题原因: 进行如上配置后, 仍然不生效, 大概率是标签使用方式问题. 这个在官方文档中没有写, 很***CD***</p><p>解决方案: 修改<code>icon</code>标签的命名, 比如官方文档中复制出的<code>icon</code>标签为<code>&lt;Edit/&gt;</code>, 则在使用时修改为<code>&lt;i-ep-edit/&gt;</code>或者<IconEpEdit/>, 这个可以在官方网站的参考模板中看到</p><p><img src="element-plus-icon%E5%8F%82%E8%80%83%E6%A8%A1%E6%9D%BF%E5%85%A5%E5%8F%A3.png" alt="element-plus-icon参考模板入口" /></p><p><img src="element-plus-icon%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE.png" alt="element-plus-icon参考配置" /></p><p><img src="element-plus-icon%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%9D%BF.png" alt="element-plus-icon使用模板" /></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript系列(二)---高级</title>
      <link href="/2024/01/04/ts/TypeScript%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E9%AB%98%E7%BA%A7/"/>
      <url>/2024/01/04/ts/TypeScript%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>前面介绍了<code>typescript</code>基本的数据类型和使用, 本篇介绍其高级类型和使用, 本篇结束后, 由于学习内容基本满足项目使用, 所以本系列将暂停一段时间, 着手去搞前端项目</p><h3 id="交叉类型"><a class="markdownIt-Anchor" href="#交叉类型"></a> 交叉类型</h3><p>交叉类型是将多个类型合并为一个类型</p><p>使用<code>&amp;</code>符号将多个类型合并, 合并之后表示这个类型的对象同时拥有多种类型的成员</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> extend&lt;T, U&gt;(<span class="attr">first</span>: T, <span class="attr">second</span>: U): T &amp; U &#123;</span><br><span class="line">    <span class="keyword">let</span> result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class="line">    for (let id in first) &#123;</span><br><span class="line">        (&lt;any&gt;result)[id] = (&lt;any&gt;first)[id];</span><br><span class="line">    &#125;</span><br><span class="line">    for (let id in second) &#123;</span><br><span class="line">        if (!result.hasOwnProperty(id)) &#123;</span><br><span class="line">            (&lt;any&gt;result)[id] = (&lt;any&gt;second)[id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    constructor(public name: string) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Loggable &#123;</span><br><span class="line">    log(): void;</span><br><span class="line">&#125;</span><br><span class="line">class ConsoleLogger implements Loggable &#123;</span><br><span class="line">    log() &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var jim = extend(new Person(&quot;Jim&quot;), new ConsoleLogger());</span><br><span class="line">var n = jim.name;</span><br><span class="line">jim.log();</span><br></pre></td></tr></table></figure><h3 id="联合类型"><a class="markdownIt-Anchor" href="#联合类型"></a> 联合类型</h3><p>联合类型是将多个类型联合起来, 表示一个值可以是联合的多种类型中的一种类型的实例</p><p>使用<code>|</code>符号将多个类型联合, 如果一个值时联合类型, 则只能访问此联合类型的多有类型里的共有成员</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">    <span class="title function_">fly</span>();</span><br><span class="line">    <span class="title function_">layEggs</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fish</span> &#123;</span><br><span class="line">    <span class="title function_">swim</span>();</span><br><span class="line">    <span class="title function_">layEggs</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSmallPet</span>(<span class="params"></span>): <span class="title class_">Fish</span> | <span class="title class_">Bird</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pet = <span class="title function_">getSmallPet</span>();</span><br><span class="line">pet.<span class="title function_">layEggs</span>(); <span class="comment">// okay</span></span><br><span class="line">pet.<span class="title function_">swim</span>();    <span class="comment">// errors</span></span><br></pre></td></tr></table></figure><h3 id="类型保护与区分类型"><a class="markdownIt-Anchor" href="#类型保护与区分类型"></a> 类型保护与区分类型</h3><h4 id="类型保护"><a class="markdownIt-Anchor" href="#类型保护"></a> 类型保护</h4><p>当想要确切的知道某个实例时何种类型时, 通常是通过检查成员是否存在进行区分</p><p>基于以上, 可以使用类型断言来实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pet = <span class="title function_">getSmallPet</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((&lt;<span class="title class_">Fish</span>&gt;pet).<span class="property">swim</span>) &#123;</span><br><span class="line">    (&lt;<span class="title class_">Fish</span>&gt;pet).<span class="title function_">swim</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    (&lt;<span class="title class_">Bird</span>&gt;pet).<span class="title function_">fly</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义类型保护"><a class="markdownIt-Anchor" href="#自定义类型保护"></a> 自定义类型保护</h4><p>要定义一个类型保护, 只要定义一个函数, 它的返回值是一个<em>类型谓词</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isFish</span>(<span class="params"><span class="attr">pet</span>: <span class="title class_">Fish</span> | <span class="title class_">Bird</span></span>): pet is <span class="title class_">Fish</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;<span class="title class_">Fish</span>&gt;pet).<span class="property">swim</span> !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上, <code>pet is Fish</code>就是类型谓词, 形式为: <code>paramName is Type</code>, <code>paramName</code>必须是来自于当前函数签名的一个参数名, <code>Type</code>是某个联合类型的一种类型</p><p>每当使用一些变量调用类型谓词的函数时, 就会将变量缩减为那个具体的类型, 只要这个类型与变量的原始类型兼容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#x27;swim&#x27; 和 &#x27;fly&#x27; 调用都没有问题了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isFish</span>(pet)) &#123;</span><br><span class="line">    pet.<span class="title function_">swim</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    pet.<span class="title function_">fly</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中, <code>typescript</code>不仅知道<code>if</code>分支里<code>pet</code>是<code>Fish</code>类型, 还知道在<code>else</code>里一定不是<code>Fish</code>类型</p><h4 id="typeof类型保护"><a class="markdownIt-Anchor" href="#typeof类型保护"></a> <code>typeof</code>类型保护</h4><p><code>typescript</code>可以将<code>typeof x === 'number'</code>这样的表达式识别为一个类型保护, 即是说可以直接在代码里检查类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">string</span>, <span class="attr">padding</span>: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Array</span>(padding + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>) + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> padding + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected string or number, got &#x27;<span class="subst">$&#123;padding&#125;</span>&#x27;.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是, 这些<code>typeof</code>类型保护只有两种形式能别识别:</p><p><code>typeof v === 'typename'</code>和<code>typeof v !=== 'typename'</code>; <code>typename</code>必须是<code>number</code>, <code>string</code>, <code>boolean</code>, <code>symbol</code>; 当<code>typename</code>为其它类型时, <code>typescript</code>不会阻止与其比较, 但不会将其识别为类型保护</p><h4 id="instanceof类型保护"><a class="markdownIt-Anchor" href="#instanceof类型保护"></a> <code>instanceof</code>类型保护</h4><p><code>instanceof</code>类型保护是通过构造函数来细化类型的一种方式</p><p><code>instanceof</code>的左侧要求是一个实例, 右侧要求是一个构造函数, 注意右侧要求是一个构造函数, 所以<code>instanceof</code>只能判断是否是某个类的类型, 不能判断是否是某个接口类型, 因为接口没有构造函数</p><blockquote><p><code>typescript</code>在进行<code>instanceof</code>判断时会细化构造函数为:</p><ul><li>此构造函数的<code>prototype</code>属性的类型, 如果它的类型不为<code>any</code>的话</li><li>构造签名所返回的类型的联合</li></ul></blockquote><h4 id="null和undefined"><a class="markdownIt-Anchor" href="#null和undefined"></a> <code>null</code>和<code>undefined</code></h4><p>由于<code>null</code>和<code>undefined</code>是所有类型的有效值, 所以无法阻止其赋值给其他类型的变量</p><p><code>--strictNullChecks</code>标记可以解决: 当声明一个变量时, 不会自动包含<code>null</code>和<code>undefined</code>, 但可以使用联合类型包含它们, 以此来讲<code>null</code>和<code>undefined</code>区别对待</p><blockquote><p><code>null</code>和<code>undefined</code>的类型保护:</p><ol><li>可以直接使用<code>==</code>判断, 或者使用逻辑运算判断</li><li>可以使用类型断言手动去除, 语法是变量后添加<code>!</code>后缀</li></ol></blockquote><h3 id="类型别名"><a class="markdownIt-Anchor" href="#类型别名"></a> 类型别名</h3><h4 id="基本使用"><a class="markdownIt-Anchor" href="#基本使用"></a> 基本使用</h4><p>类型别名会给一个类型起一个新名字, 此类型可以是原始值, 联合类型, 元组以及自定义类型等</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameResolver</span> = <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameOrResolver</span> = <span class="title class_">Name</span> | <span class="title class_">NameResolver</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"><span class="attr">n</span>: <span class="title class_">NameOrResolver</span></span>): <span class="title class_">Name</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">n</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型别名不会新建一个类型, 只是创建了一个新名字来引用那个类型</p><p>类型别名也可以使用泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Tree</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="attr">value</span>: T;</span><br><span class="line">    <span class="attr">left</span>: <span class="title class_">Tree</span>&lt;T&gt;;</span><br><span class="line">    <span class="attr">right</span>: <span class="title class_">Tree</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型别名不能出现在声明右侧的任何地方</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Yikes</span> = <span class="title class_">Array</span>&lt;<span class="title class_">Yikes</span>&gt;; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><blockquote><p>接口与类型别名的区别:</p><ol><li>接口创建一个新名字, 类型别名并不创建新名字</li><li>接口可以被继承实现, 类型别名不可以</li><li>如果无法通过接口来描述一个类型, 并且需要使用联合类型或元组类型, 通常会使用类型别名</li></ol></blockquote><h4 id="特殊使用"><a class="markdownIt-Anchor" href="#特殊使用"></a> 特殊使用</h4><p>字符串字面量类型允许指定字符串必须得固定值. 字符串字面量类型可以与联合类型, 类型保护和类型别名配合</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Easing</span> = <span class="string">&quot;ease-in&quot;</span> | <span class="string">&quot;ease-out&quot;</span> | <span class="string">&quot;ease-in-out&quot;</span>;</span><br></pre></td></tr></table></figure><p>当使用上述类型别名作为参数或属性的类型时, 则值必须是允许的三个字符串之一, 否则会产生错误</p><p>同字符串字面量类型一样, 数字字面量类型和枚举成员类型也可以如此使用. 这是因为类型别名本身可以用作类型定义, 而字面量类型方式不过是将字面量值本身定义为了一种自定义类型</p><h3 id="可辨识联合"><a class="markdownIt-Anchor" href="#可辨识联合"></a> 可辨识联合</h3><h4 id="基本使用-2"><a class="markdownIt-Anchor" href="#基本使用-2"></a> 基本使用</h4><p>合并单例类型, 联合类型, 类型保护和类型别名来创建可辨识联合的高级模式, 也称作标签联合或代数数据类型</p><blockquote><p>三要素:</p><ol><li>具有普通的单例类型属性-可辨识的特征</li><li>一个类型别名包含了那些类型的联合-联合</li><li>此属性上的类型保护</li></ol></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要联合的接口, kind作为可辨识特征</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&quot;square&quot;</span>;</span><br><span class="line">    <span class="attr">size</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&quot;rectangle&quot;</span>;</span><br><span class="line">    <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">    <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 联合</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Shape</span> = <span class="title class_">Square</span> | <span class="title class_">Rectangle</span> | <span class="title class_">Circle</span>;</span><br><span class="line"><span class="comment">// 可辨识联合</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">area</span>(<span class="params"><span class="attr">s</span>: <span class="title class_">Shape</span></span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (s.<span class="property">kind</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>: <span class="keyword">return</span> s.<span class="property">size</span> * s.<span class="property">size</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;rectangle&quot;</span>: <span class="keyword">return</span> s.<span class="property">height</span> * s.<span class="property">width</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>: <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * s.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述中首先声明了要联合的接口, 每个接口都有<code>kind</code>属性但有不同的字符串字面量类型. <code>kind</code>属性称作<em>可辨识的特征</em>或标签. 其他属性则特定于各个接口</p><h4 id="完整性检查"><a class="markdownIt-Anchor" href="#完整性检查"></a> 完整性检查</h4><p>当没有涵盖所有可辨识联合的变化时, 希望编译器可以通知</p><ol><li><p>启用<code>--strictNullChecks</code>并指定一个返回值类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">area</span>(<span class="params"><span class="attr">s</span>: <span class="title class_">Shape</span></span>): <span class="built_in">number</span> &#123; <span class="comment">// error: returns number | undefined</span></span><br><span class="line">    <span class="keyword">switch</span> (s.<span class="property">kind</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>: <span class="keyword">return</span> s.<span class="property">size</span> * s.<span class="property">size</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;rectangle&quot;</span>: <span class="keyword">return</span> s.<span class="property">height</span> * s.<span class="property">width</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>: <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * s.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>never</code>类型, 编译器用它进行完整性检查</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">assertNever</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">never</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unexpected object: &quot;</span> + x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">area</span>(<span class="params"><span class="attr">s</span>: <span class="title class_">Shape</span></span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (s.<span class="property">kind</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>: <span class="keyword">return</span> s.<span class="property">size</span> * s.<span class="property">size</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;rectangle&quot;</span>: <span class="keyword">return</span> s.<span class="property">height</span> * s.<span class="property">width</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>: <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * s.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">        <span class="attr">default</span>: <span class="keyword">return</span> <span class="title function_">assertNever</span>(s); <span class="comment">// error here if there are missing cases</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="多态的this类型"><a class="markdownIt-Anchor" href="#多态的this类型"></a> 多态的<code>this</code>类型</h3><p>多态的<code>this</code>类型表示的是某个包含类或接口的子类型, 这杯称作<code>F-bounded</code>多态性. 它很容易的表现连贯接口间的继承</p><p>在使用表现上即是在函数定义中, 最终将当前实例(<code>this</code>)返回, 并将函数的返回值类型定义为<code>this</code>(称为<code>this</code>类型)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BasicCalculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">constructor</span>(<span class="params"><span class="keyword">protected</span> <span class="attr">value</span>: <span class="built_in">number</span> = <span class="number">0</span></span>) &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">currentValue</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">add</span>(<span class="attr">operand</span>: <span class="built_in">number</span>): <span class="variable language_">this</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> += operand;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">multiply</span>(<span class="attr">operand</span>: <span class="built_in">number</span>): <span class="variable language_">this</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> *= operand;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... other operations go here ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> <span class="title class_">BasicCalculator</span>(<span class="number">2</span>)</span><br><span class="line">            .<span class="title function_">multiply</span>(<span class="number">5</span>)</span><br><span class="line">            .<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line">            .<span class="title function_">currentValue</span>();</span><br></pre></td></tr></table></figure><p>由于这个类使用了<code>this</code>类型，你可以继承它，新的类可以直接使用之前的方法，不需要做任何的改变。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ScientificCalculator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BasicCalculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">constructor</span>(<span class="params">value = <span class="number">0</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">sin</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = <span class="title class_">Math</span>.<span class="title function_">sin</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... other operations go here ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> <span class="title class_">ScientificCalculator</span>(<span class="number">2</span>)</span><br><span class="line">        .<span class="title function_">multiply</span>(<span class="number">5</span>)</span><br><span class="line">        .<span class="title function_">sin</span>()</span><br><span class="line">        .<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line">        .<span class="title function_">currentValue</span>();</span><br></pre></td></tr></table></figure><p>需要注意的是, 与<code>java</code>不同, 在实例调用返回<code>this</code>类型的函数时, 其结果是<code>this</code>表示的实例类型, 即实例为哪种类型, 则<code>this</code>类型即为哪种类型</p><h3 id="索引类型"><a class="markdownIt-Anchor" href="#索引类型"></a> 索引类型</h3><p>使用索引类型, 编译器就能够检查使用了动态属性名的代码</p><p>通过<em>索引类型查询操作符</em>和<em>索引访问操作符</em>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> pluck&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">o</span>: T, <span class="attr">names</span>: K[]): T[K][] &#123;</span><br><span class="line">  <span class="keyword">return</span> names.<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> o[n]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jarid&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">35</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strings</span>: <span class="built_in">string</span>[] = <span class="title function_">pluck</span>(person, [<span class="string">&#x27;name&#x27;</span>]); <span class="comment">// ok, string[]</span></span><br></pre></td></tr></table></figure><p>编译器会检查<code>name</code>是否真的是<code>Person</code>的一个属性</p><p><code>keyof T</code>，<strong>索引类型查询操作符</strong>. 对于任何类型<code>T</code>，<code>keyof T</code>的结果为<code>T</code>上已知的公共属性名的联合</p><p><code>T[K]</code>，<strong>索引访问操作符</strong>. 类型语法反应表达式语法, 类似与一种泛型, 但在获取到实际值时, 返回实际值的真实类型</p><h3 id="映射类型"><a class="markdownIt-Anchor" href="#映射类型"></a> 映射类型</h3><p>从旧类型中创建新类型的一种方式-映射类型. 新类型以相同的形式去转换旧类型里的每个属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonPartial</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Person</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyPerson</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Person</span>&gt;;</span><br></pre></td></tr></table></figure><p>通用版本</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Nullable</span>&lt;T&gt; = &#123; [P <span class="keyword">in</span> keyof T]: T[P] | <span class="literal">null</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123; [P <span class="keyword">in</span> keyof T]?: T[P] &#125;</span><br></pre></td></tr></table></figure><p>有代理</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Proxy</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="title function_">get</span>(): T;</span><br><span class="line">    <span class="title function_">set</span>(<span class="attr">value</span>: T): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Proxify</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]: <span class="title class_">Proxy</span>&lt;T[P]&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> proxify&lt;T&gt;(<span class="attr">o</span>: T): <span class="title class_">Proxify</span>&lt;T&gt; &#123;</span><br><span class="line">   <span class="comment">// ... wrap proxies ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxyProps = <span class="title function_">proxify</span>(props);</span><br></pre></td></tr></table></figure><p><code>ts</code>标准库</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> <span class="built_in">string</span>, T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由映射类型进行推断</p><p>拆包</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> unproxify&lt;T&gt;(<span class="attr">t</span>: <span class="title class_">Proxify</span>&lt;T&gt;): T &#123;</span><br><span class="line">    <span class="keyword">let</span> result = &#123;&#125; <span class="keyword">as</span> T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> t) &#123;</span><br><span class="line">        result[k] = t[k].<span class="title function_">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPM和PNPM的安装及配置</title>
      <link href="/2023/12/26/node/npm%E5%92%8Cpnpm%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/12/26/node/npm%E5%92%8Cpnpm%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="npm配置"><a class="markdownIt-Anchor" href="#npm配置"></a> <code>NPM</code>配置</h3><h4 id="修改配置"><a class="markdownIt-Anchor" href="#修改配置"></a> 修改配置</h4><p><code>npm</code>会伴随着<code>node</code>安装, 所以此处仅仅表述<code>npm</code>如何配置</p><p>使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config ls</span><br></pre></td></tr></table></figure><p>查看<code>npm</code>有哪些常用配置, 可以自己去修改配置</p><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get xxx</span><br></pre></td></tr></table></figure><p><code>xxx</code>为配置名, 可以查看某个配置的信息</p><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set xxx yyy</span><br></pre></td></tr></table></figure><p><code>xxx</code>为配置名,<code>yyy</code>为配置值</p><p>建议自配置的方式:</p><p>步骤一:</p><p>使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set globalconfig &quot;D:\software\nodejs\config\.npmrc&quot;</span><br></pre></td></tr></table></figure><p>修改全局配置的指向文件</p><p>或者直接修改<code>C:\Users\&lt;user&gt;\.npmrc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">globalconfig=D:\software\nodejs\config\.npmrc</span><br></pre></td></tr></table></figure><p>来修改全局配置的指向文件</p><p>步骤二:</p><p>创建全局配置的指向文件</p><p><img src="NPM%E4%BF%AE%E6%94%B9%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%8C%87%E5%90%91%E6%96%87%E4%BB%B6.png" alt="NPM修改全局配置指向文件" /></p><p>步骤三:</p><p>在自己创建的全局配置文件中进行配置修改</p><p><img src="NPM%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9.png" alt="NPM全局配置修改" /></p><h4 id="环境变量配置"><a class="markdownIt-Anchor" href="#环境变量配置"></a> 环境变量配置</h4><ol><li><p><code>npm</code>的环境变量在<code>node</code>安装时即可配置</p></li><li><p><code>npm</code>安装的依赖环境变量</p><p><img src="NPM%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.png" alt="NPM环境变量配置" /></p></li><li><p>检验</p><p>使用<code>npm</code>命令安装<code>typescript</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br></pre></td></tr></table></figure><ul><li>查看<code>typescript</code>的安装位置</li><li>使用<code>tsc -v</code>查看<code>tsc</code>命令是否可用</li></ul></li></ol><h3 id="pnpm安装"><a class="markdownIt-Anchor" href="#pnpm安装"></a> <code>PNPM</code>安装</h3><p>使用<code>npm</code>安装<code>pnpm</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pnpm</span><br></pre></td></tr></table></figure><p>使用<code>pnpm</code>命令查看是否安装成功</p><p>注意: 由于使用<code>npm</code>安装<code>pnpm</code>, <code>pnpm</code>相关的命令是在<code>npm</code>的全局安装位置下</p><p>也可以使用<code>pnpm.exe</code>安装<code>pnpm</code>, 这个自行<code>Bing</code>吧</p><h3 id="pnpm配置"><a class="markdownIt-Anchor" href="#pnpm配置"></a> <code>PNPM</code>配置</h3><h4 id="修改配置-2"><a class="markdownIt-Anchor" href="#修改配置-2"></a> 修改配置</h4><p>上面配置<code>npm</code>时使用了自定义的配置文件, <code>pnpm</code>也会共用<code>npm</code>的配置, 所以对<code>pnpm</code>进行配置可以直接在自定义的配置文件中进行配置, 直接按照<code>npm</code>配置中的步骤三配置一下信息</p><ul><li><strong><code>store-dir</code></strong></li><li><strong><code>cache-dir</code></strong></li><li><strong><code>global-bin-dir</code></strong></li><li><strong><code>state-dir</code></strong></li><li><strong><code>global-dir</code></strong></li></ul><p>如果使用命令行进行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm config set xxx yyy</span><br></pre></td></tr></table></figure><p>会将配置信息配置到<code>C:\Users\&lt;User&gt;\AppData\Local\pnpm\config</code>目录下的<code>rc</code>文件中</p><p><img src="PNPM%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9.png" alt="PNPM全局配置修改" /></p><p>此时可将<code>C:\Users\&lt;User&gt;\AppData\Local</code>目录下的<code>pnpm-state</code>和<code>pnpm-cache</code>以及<code>C:\Users\&lt;User&gt;\AppData\Local\pnpm</code>目录下的<code>pnpm-store</code>内容删除</p><h4 id="环境变量配置-2"><a class="markdownIt-Anchor" href="#环境变量配置-2"></a> 环境变量配置</h4><p>与<code>npm</code>的环境变量配置一样</p><ol><li><p>由于<code>pnpm</code>使用<code>npm</code>安装, 所以<code>npm</code>安装的依赖的环境变量配置好之后, <code>pnpm</code>的环境变量就配置好了</p></li><li><p><code>npm</code>安装的依赖环境变量</p><p><img src="PNPM%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.png" alt="PNPM环境变量配置" /></p></li><li><p>检验</p><p>使用<code>pnpm</code>命令安装<code>@vue/cli</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add @vue/cli</span><br></pre></td></tr></table></figure><ul><li>查看<code>@vue/cli</code>的安装位置</li><li>使用<code>vue -v</code>命令是否可用</li></ul></li></ol><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题😭</h3><p><i>问题一</i></p><p>出现问题:</p><p>在使用<code>pnpm</code>安装<code>typescript</code>的过程中, 修改配置后, 安装包始终安装在<code>C:\Users\&lt;User&gt;\node_modules</code>下</p><p>问题原因:</p><p><code>pnpm</code>没有添加<code>-g</code>和<code>-s</code>参数时, 不会自动识别为全局安装, 所以如果在任意位置使用<code>cmd</code>命令开启终端进行安装依赖的操作, <code>pnpm</code>会认为在当前目录下安装依赖(即终端中显示的目录地址), 所以安装在了用户目录下</p><p>解决方案: 全局安装时添加<code>-g</code>命令</p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
            <tag> pnpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript系列(一)---基础</title>
      <link href="/2023/12/26/ts/TypeScript%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/12/26/ts/TypeScript%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>本系列是<code>Vue</code>前端项目的前传, 由于本人没有系统学习过<code>Typescript</code>, 所以从此处下手</p><p>本系列是一个语言学习系列, 所以质量不高, 像是流水账</p><p>本篇需要使用<code>node</code>环境运行<code>ts</code>脚本, 本人使用<code>pnpm</code>安装了<code>ts</code></p><h3 id="基础类型"><a class="markdownIt-Anchor" href="#基础类型"></a> 基础类型</h3><h4 id="布尔"><a class="markdownIt-Anchor" href="#布尔"></a> 布尔</h4><p>类型为<code>boolean</code>, 值为<code>true/false</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">flag</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h4 id="数字"><a class="markdownIt-Anchor" href="#数字"></a> 数字</h4><p>类型为<code>number</code>, 不区分整数和浮点数, 所有的数都是浮点数; 支持二进制, 八进制, 十进制, 十六进制的字面量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">num1</span>: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num2</span>: <span class="built_in">number</span> = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num3</span>: <span class="built_in">number</span> = <span class="number">0x6666</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num4</span>: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num5</span>: <span class="built_in">number</span> = <span class="number">0o333</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h4><p>类型为<code>string</code>, 可以使用双引号(<strong>&quot;</strong>)和单引号(<strong>’</strong>)表示; 也可以通过反引号来使用模板字符串, 并以<code>$&#123;expr&#125;</code>的形式嵌入表达式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">hello</span>: <span class="built_in">string</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">world</span>: <span class="built_in">string</span> = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">all</span>: <span class="built_in">string</span> = <span class="string">`<span class="subst">$&#123;hello&#125;</span> <span class="subst">$&#123;world&#125;</span>`</span>; <span class="comment">// `$&#123;hello + &#x27; &#x27; + world&#125;`</span></span><br></pre></td></tr></table></figure><h4 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h4><p>定义数组有两种方式, 一种直接在元素类型后接上<code>[]</code>, 另一种是使用数组泛型<code>Array&lt;元素类型&gt;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">ar</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>];</span><br></pre></td></tr></table></figure><h4 id="元组tuple"><a class="markdownIt-Anchor" href="#元组tuple"></a> 元组(<code>Tuple</code>)</h4><p>允许表示一组元素数量和对应类型已经确定的数组, 各个元素的类型不必相同</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>当访问一个已知索引的元素, 会得到正确的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>当访问一个越界的元素, 会使用联合类型替代</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">3</span>] = <span class="string">&#x27;world&#x27;</span>; <span class="comment">// OK x[3]的定义类型为联合类型 string | number</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">4</span>] = <span class="literal">true</span>; <span class="comment">// ERROR x[4]的定义类型为联合类型 string | number, boolean类型无法赋值</span></span><br></pre></td></tr></table></figure><h4 id="枚举"><a class="markdownIt-Anchor" href="#枚举"></a> 枚举</h4><p>对<code>js</code>的补充, 默认从<code>0</code>开始为元素编号</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;<span class="title class_">Red</span>, <span class="title class_">Green</span>, <span class="title class_">Blue</span>&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Red</span></span><br></pre></td></tr></table></figure><p>上述中从首个开始, 一次编号为<code>0,1,2</code></p><p>可以也可以通过编号获取名字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="title class_">Color</span>[<span class="number">0</span>] <span class="comment">// Red</span></span><br></pre></td></tr></table></figure><p>也可以手动指定成员的值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;<span class="title class_">Black</span>, <span class="title class_">Red</span> = <span class="number">1</span>, <span class="title class_">Green</span>, <span class="title class_">Blue</span> = <span class="number">4</span>, <span class="title class_">Yellow</span>&#125;</span><br></pre></td></tr></table></figure><p>成员编号从<code>0</code>开始, 每遇到一个手动指定编号的成员, 会从该编号开始向后继续, 不能出现重复编号</p><p><img src="%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B.png" alt="枚举类型" /></p><p>发生编号重复时</p><p><img src="%E6%9E%9A%E4%B8%BE%E7%BC%96%E5%8F%B7%E9%87%8D%E5%A4%8D.png" alt="枚举编号重复" /></p><h4 id="any"><a class="markdownIt-Anchor" href="#any"></a> <code>Any</code></h4><p>任意值, 为不清楚类型的变量指定一个类型, 此类型的变量不会进行类型检查, 而是直接通过编译阶段</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">anyArr</span>: <span class="built_in">any</span>[] = [<span class="string">&#x27;xiaolin&#x27;</span>, <span class="number">18</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure><p>与<code>Object</code>类型变量的区别是, <code>Object</code>变量不能调用任意方法, 即使它真的有这些方法</p><p><img src="any%E7%B1%BB%E5%9E%8B%E4%B8%8EObject%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="any类型与Object类型的区别" /></p><p>从感官上来讲, <code>Object</code>是对象类型的超类, 而所有类型都是<code>Object</code>类型的子类或者包装类, <code>Object</code>只包含自定义的方法和函数, 子类定义的方法和函数无法感知到; 而<code>any</code>可以认为是无校验的<code>Object</code>类型, 它是对象类型的超类, 但不做任何类型相关校验</p><h4 id="void"><a class="markdownIt-Anchor" href="#void"></a> <code>Void</code></h4><p>空值, 表示没有任何类型, 函数没有返回值时, 其返回值就是<code>void</code></p><p><code>void</code>类型的变量只能赋值<code>null</code>和<code>undefined</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">v</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="null和undefined"><a class="markdownIt-Anchor" href="#null和undefined"></a> <code>Null</code>和<code>Undefined</code></h4><p><code>null</code>和<code>undefined</code>都有自己的类型, 只能赋值自身</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>默认情况下, <code>null</code>和<code>undefined</code>是所有类型的子类</p><p>当指定了<code>--strictNullChecks</code>标记, <code>null</code>和<code>undefined</code>只能显式的赋值给各自和<code>void</code>, 如果需要显式的将<code>null</code>和<code>undefined</code>赋值给一个类型变量, 则该变量类型可以使用联合类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">nil</span>: <span class="built_in">string</span> = <span class="literal">null</span>; <span class="comment">// 编译错误</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> | <span class="literal">null</span> | <span class="literal">undefined</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="never"><a class="markdownIt-Anchor" href="#never"></a> <code>Never</code></h4><p>表示用不存在的值的类型</p><p>如异常或不会有返回值的函数表达式或箭头函数表达式的返回值类型</p><p>变量也可以为<code>never</code>类型, 被永不为真的类型保护所约束时</p><p><code>never</code>类型是任何类型的子类型, 也可以赋值给任何类型; 但没有类型是<code>never</code>的子类型, 除了<code>never</code>本身没有值可以赋值给<code>never</code>类型, <code>any</code>也不行</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 推断的返回值类型为never</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fail</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">error</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">infiniteLoop</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="object"><a class="markdownIt-Anchor" href="#object"></a> <code>Object</code></h4><p>对象类型, 所有类型的父类型</p><h3 id="类型断言"><a class="markdownIt-Anchor" href="#类型断言"></a> 类型断言</h3><p>强制类型转换或者向下转型</p><p>有两种方式:</p><p>方式一: 使用尖括号</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">length</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;value).<span class="property">length</span></span><br></pre></td></tr></table></figure><p>方式二: 使用<code>as</code>语法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">length</span>: <span class="built_in">number</span> = (value <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure><h3 id="解构"><a class="markdownIt-Anchor" href="#解构"></a> 解构</h3><p>解构是<code>ES6</code>中的新特性, 并不是<code>typescript</code>定义的, 此处将此特性介绍是因为此特性与<code>typescript</code>配合会有不一样的火花</p><h4 id="数组解构"><a class="markdownIt-Anchor" href="#数组解构"></a> 数组解构</h4><p>进行数组变量赋值时, 为数组中的元素创建变量名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [first, second] = input; <span class="comment">// == let first = input[0]; let second = input[1];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [first, , third] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]; <span class="comment">// 不关心其他元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] <span class="comment">// 使用...创建剩余变量</span></span><br><span class="line"><span class="comment">// first = 1, rest = [2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>作为函数参数时</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">[first, second]: <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><h4 id="对象解构"><a class="markdownIt-Anchor" href="#对象解构"></a> 对象解构</h4><p>如果将对象视作特殊的(各个元素有名称的)数组, 则容易理解对象解构</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">nam</span>: <span class="string">&quot;xiaolin&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;nam, age&#125; = obj;</span><br></pre></td></tr></table></figure><p>同数组一样, 不需要的元素可以不声明赋值</p><p>需要注意的是, 对象解构时, 定义的变量名需要与对象中对应的属性(元素)名称一致; 可以通过属性重命名的方式来来给属性不同的名字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">nam</span>: <span class="string">&quot;xiaolin&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">nam</span>: personName, age&#125;: &#123;<span class="attr">nam</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>&#125; = obj;</span><br></pre></td></tr></table></figure><p>上述中为<code>nam</code>重命名为<code>personName</code>, 其中<code>&#123;nam: personName, age&#125;</code>中的<code>:</code>表示将<code>nam</code>重命名为<code>personName</code>, 其类型是通过定义<code>&#123;nam: personName, age&#125;</code>对象的整体类型来描述的, 在定义<code>&#123;nam: personName, age&#125;</code>对象的整体类型时, 重命名的变量进行类型定义时使用的名称是重命名之前的名字</p><p>对象解构中也可以使用<code>...</code>创建剩余变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">nam</span>: <span class="string">&quot;xiaolin&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;nam, ...person&#125; = obj;</span><br><span class="line"><span class="comment">// nam = &quot;xiaolin&quot;, person = &#123;age: 18, sex: &quot;男&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>当对象的某个属性为<code>undefined</code>时, 可以为该属性添加默认值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">nam</span>: <span class="string">&quot;xiaolin&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="attr">des</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;nam, <span class="attr">des</span>: desc = <span class="string">&quot;太帅了&quot;</span>&#125;: &#123;<span class="attr">nam</span>: <span class="built_in">string</span>, <span class="attr">des</span>: <span class="built_in">string</span>&#125; = obj;</span><br></pre></td></tr></table></figure><p>当<code>obj</code>的<code>des</code>有值时, <code>desc</code>为该值, 没有值时为默认的赋值</p><p>对象解构配合函数, 实现函数参数的多样化声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123;a, b&#125;: &#123;a: <span class="built_in">string</span>, b?: <span class="built_in">number</span>&#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整体默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fooFirst</span>(<span class="params">&#123;a, b&#125; = &#123;a: <span class="string">&#x27;&#x27;</span>, b: <span class="number">0</span>&#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fooSecond</span>(<span class="params">&#123;a, b = <span class="number">0</span>&#125; = &#123;a: <span class="string">&#x27;&#x27;</span>, b: <span class="literal">undefined</span>&#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 部分默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fooThird</span>(<span class="params">&#123;a, b = <span class="number">0</span>&#125;: &#123;a: <span class="built_in">string</span>, b: <span class="built_in">number</span>&#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于结构, 在便于理解时使用可以提高开发效率, 但是当出现类型注解和默认值时应小心使用, 语法和使用上都难以理解</p><h3 id="展开"><a class="markdownIt-Anchor" href="#展开"></a> 展开</h3><h4 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h4><p>展开也是<code>ES6</code>中添加的新特性, 展开操作与解构相反, 它将一个数组展开为另一个数组, 或将一个对象展开为另一个对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> second = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> all = [<span class="number">0</span>, ...first, ...second, <span class="number">5</span>]; <span class="comment">// 展开操作时浅拷贝, 其内容不会被展开操作改变</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">nam</span>: <span class="string">&quot;xiaolin&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> food = <span class="string">&quot;rich&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    ...obj,</span><br><span class="line">    food,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是, 对象的展开比数组的展开要复杂. 它像数组展开一样, 使用开始元素依次处理, 结果仍然为对象, 由于对象的属性唯一, 所以展开对象后面的属性会覆盖前面的属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">nam</span>: <span class="string">&quot;xiaolin&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">food</span>: <span class="string">&quot;cake&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> food = <span class="string">&quot;rich&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    ...obj,</span><br><span class="line">    food,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125; <span class="comment">// &#123;nam: &quot;xiaolin&quot;, age: 18, food: &quot;rich&quot;, sex: &quot;男&quot;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="%E5%AF%B9%E8%B1%A1%E5%B1%95%E5%BC%80.png" alt="对象展开" /></p><p>同理在展开的对象中如果有同名的属性, 则后展开的对象的该属性会覆盖先展开的对象的该属性</p><h4 id="限制"><a class="markdownIt-Anchor" href="#限制"></a> 限制</h4><p>对象的展开存在限制:</p><p>一. 仅包含对象自身的可枚举属性</p><ol><li>当展开对象实例时, 无法获取其类型的所有属性, 而是获取其实际存在的属性</li><li>当展开一个对象实例时, 会丢失其方法, 即展开只会拷贝属性, 不会拷贝方法</li></ol><p>二. <code>typescript</code>编译器不允许展开泛型函数上的类型参数</p><ol><li><p>这个描述是<code>typescript</code>手册上的描述, 当前不知道是已经实现还是我理解有误, 一下方式编译运行时是正常的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fo&lt;T&gt;(<span class="attr">arg</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> o = &#123;...arg&#125;;</span><br><span class="line">&#125;</span><br><span class="line">fo&lt;&#123;<span class="attr">nam</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>&#125;&gt;(&#123;<span class="attr">nam</span>: <span class="string">&quot;xiaolin&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3><p><code>typescript</code>中函数也是作为一种类型的, 但是函数类型必须是有定义的函数类型, 这种定义是通过接口实现的, 后续讲接口时详细讲述</p><p>所谓必须是有定义的函数类型指的是, 所定义的函数在指明类型时, 必须声明函数的参数列表和返回值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数不指明类型 -&gt; 推断类型</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">function</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;<span class="keyword">return</span> x + y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数指明类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">foo</span>: <span class="function">(<span class="params"><span class="attr">base</span>: <span class="built_in">number</span>, <span class="attr">increment</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="keyword">function</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span>&#123;<span class="keyword">return</span> x + y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选参数</span></span><br><span class="line"><span class="keyword">let</span> foo = (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>, <span class="attr">z</span>?: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="keyword">let</span> foo = (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>, <span class="attr">z</span>: <span class="built_in">number</span> = <span class="number">0</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y + z</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余参数</span></span><br><span class="line"><span class="keyword">let</span> foo = (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="attr">number</span>: ...<span class="attr">z</span>: <span class="built_in">number</span>[]): <span class="function"><span class="params">number</span> =&gt;</span> x + y</span><br></pre></td></tr></table></figure><ol><li><p>函数指明类型的定义中, 变量名之后, <code>=</code>之前就是类型定义, <code>=&gt;</code>之前是参数列表定义, 之后是返回值类型定义; 此函数类型的定义像是一个匿名类型, 只要函数定义的参数列表类型和返回值类型符合类型定义的参数列表类型和返回值类型接口, 不在乎参数名称</p><p>指明类型的定义在使用时, 使用箭头函数的方式定义函数更直观一些</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">foo</span>: <span class="function">(<span class="params"><span class="attr">base</span>: <span class="built_in">number</span>, <span class="attr">increment</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y</span><br></pre></td></tr></table></figure><p>由此可以看出, 函数是一种类型, 但函数的类型只是由参数类型和返回值组成和决定</p></li><li><p>推断类型有两个含义: 一. 在函数变量不指明函数类型时, 通过函数定义推断函数类型; 二. 在函数变量指明函数类型时, 函数定义的参数列表中参数类型和返回值类型通过函数类型推断得出</p></li><li><p>可选参数, <code>typescript</code>的函数定义中, 可以通过<code>?</code>来指明某个参数可传可不传, 没传的时候就是<code>undefined</code>. 可选参数必须定义在函数的必传参数的后面</p></li><li><p>默认参数, 为函数的参数设置一个默认值, 当用户没有传递该参数时, 可以使用默认值</p><p>默认参数如果放在所有必传参数的后面, 则与可选参数类似, 并与可选参数共享参数类型; 默认参数如果没有放在所有必须参数的后面, 则必须明确的传入<code>undefined</code>来表示使用默认值</p></li><li><p>剩余参数会被当做个数不限的可选参数, 其数量可以是<code>0</code>或者任意个, 剩余参数必须放在函数参数列表的最后</p></li><li><p>函数重载, 需要注意的是, <code>typescript</code>中单独定义的函数重载时, 是只有一个函数定义, 多个函数声明, 函数声明的参数个数不能少于函数定义参数个数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params"><span class="attr">x</span>: &#123;suit: <span class="built_in">string</span>; card: <span class="built_in">number</span>; &#125;[]</span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span></span>): &#123;<span class="attr">suit</span>: <span class="built_in">string</span>; <span class="attr">card</span>: <span class="built_in">number</span>; &#125; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params">x</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="comment">// Check to see if we&#x27;re working with an object/array</span></span><br><span class="line">    <span class="comment">// if so, they gave us the deck and we&#x27;ll pick the card</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedCard = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * x.<span class="property">length</span>);</span><br><span class="line">        <span class="keyword">return</span> pickedCard;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Otherwise just let them pick the card</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedSuit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(x / <span class="number">13</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">suit</span>: suits[pickedSuit], <span class="attr">card</span>: x % <span class="number">13</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [&#123; <span class="attr">suit</span>: <span class="string">&quot;diamonds&quot;</span>, <span class="attr">card</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">suit</span>: <span class="string">&quot;spades&quot;</span>, <span class="attr">card</span>: <span class="number">10</span> &#125;, &#123; <span class="attr">suit</span>: <span class="string">&quot;hearts&quot;</span>, <span class="attr">card</span>: <span class="number">4</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[<span class="title function_">pickCard</span>(myDeck)];</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;card: &quot;</span> + pickedCard1.<span class="property">card</span> + <span class="string">&quot; of &quot;</span> + pickedCard1.<span class="property">suit</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = <span class="title function_">pickCard</span>(<span class="number">15</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;card: &quot;</span> + pickedCard2.<span class="property">card</span> + <span class="string">&quot; of &quot;</span> + pickedCard2.<span class="property">suit</span>);</span><br></pre></td></tr></table></figure><p>上述中只有一个函数定义, 它处理了不同的参数类型的情况, 但是函数声明有两个, 分别是<code>&#123;suit: string; card: number; &#125;</code>类型参数的声明和<code>number</code>类型参数的声明, 这两个声明即是函数的重载, 而<code>any</code>类型参数的函数并不是重载列表中的一部分, 而是实际的函数定义, 在调用时编译器只会检查参数类型是否符合函数声明, 而不去检查是否符合函数定义</p><p>如果在某个函数声明上添加了额外的参数, 编译不会出现问题, 但是在调用时, 如果前面的参数符合该函数声明, 则需要将额外的参数添加上, 但是在函数定义中该额外的参数并不会被使用</p></li><li><p>函数中有个非常难以理解的地方: <code>this</code>的指向问题</p><p>在<code>java</code>中, 无论是属性还是方法, 都是在对象中定义的, 所以<code>this</code>永远指向当前属性或者方法定义的类的实例对象</p><p>但是在<code>javascript</code>和<code>typescript</code>, 可以认为所有的内容全部是在<code>window</code>对象中定义执行的, 由于我们对此无感, 认为函数可以独立于对象之外定义, 而独立于对象之外定义的函数的<code>this</code>实际是定义在<code>window</code>对象中的, 所以其<code>this</code>指向是<code>window</code>对象</p><p>在<code>js</code>和<code>ts</code>的函数中, 传统函数定义的<code>this</code>是指向调用方的, 而箭头函数定义的<code>this</code>是指向创建方的, 所以在函数的创建调用时, 需要仔细分析</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">    <span class="attr">suits</span>: [<span class="string">&quot;hearts&quot;</span>, <span class="string">&quot;spades&quot;</span>, <span class="string">&quot;clubs&quot;</span>, <span class="string">&quot;diamonds&quot;</span>],</span><br><span class="line">    <span class="comment">// deck 对象的内部函数</span></span><br><span class="line">    <span class="attr">returnHearts</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 返回一个传统定义方式的函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">suits</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// deck 对象内部函数</span></span><br><span class="line">    <span class="attr">returnSpades</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 返回一个箭头函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">suits</span>[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hearts = deck.<span class="title function_">returnHearts</span>();<span class="comment">// 本质是 let hearts = function() &#123;return this.suits[0];&#125;</span></span><br><span class="line"><span class="comment">// 传统方式定义的函数, 所以this指向调用方, 即window, 所以找不到suits</span></span><br><span class="line"><span class="keyword">let</span> spades = deck.<span class="title function_">returnSpades</span>();<span class="comment">// 本质是 let spades = () =&gt; &#123;return this.suits[1];&#125;</span></span><br><span class="line"><span class="comment">// 箭头函数方式定义的函数, 所以this指向创建方, 即deck</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hearts</span>());<span class="comment">// 运行时报错, 找不到suits</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">spades</span>());<span class="comment">// 正常, 返回spades</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="类"><a class="markdownIt-Anchor" href="#类"></a> 类</h3><h4 id="基本定义"><a class="markdownIt-Anchor" href="#基本定义"></a> 基本定义</h4><p>类通常用来描述一个对象, 其中可以定义属性和方法, 还需要有构造函数. 在类中, 引用任何一个类成员的时候都需要使用<code>this</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">    <span class="attr">greeting</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">greeting</span> = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="property">greeting</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h4><p>类可以继承类, 但只能单继承</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">move</span>(<span class="params"><span class="attr">distanceInMeters</span>: <span class="built_in">number</span> = <span class="number">0</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Animal moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Woof! Woof!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类可以继承超类中的属性和方法</p><p>子类的构造函数的首行必须调用父类的构造函数</p><h4 id="访问权限"><a class="markdownIt-Anchor" href="#访问权限"></a> 访问权限</h4><p>类中内容的访问权限受访问修饰符控制, 默认为<code>public</code>, 即公共的, 任意位置可使用; <code>private</code>表示私有的, 即只有本类中可以访问; <code>protected</code>为受保护的, 在本类和子类中可以访问</p><p>两个类的兼容性中, 两个类的<code>public</code>的属性只判断类型是否兼容, <code>private</code>和<code>protected</code>的属性必须保证访问修饰符相同且来自于同一处声明; 在<code>java</code>中称为向上转型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">theName</span>: <span class="built_in">string</span></span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rhino</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; <span class="variable language_">super</span>(<span class="string">&quot;Rhino&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">theName</span>: <span class="built_in">string</span></span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;Goat&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> rhino = <span class="keyword">new</span> <span class="title class_">Rhino</span>();</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"></span><br><span class="line">animal = rhino;</span><br><span class="line">animal = employee; <span class="comment">// 错误: Animal 与 Employee 不兼容.</span></span><br></pre></td></tr></table></figure><h4 id="静态"><a class="markdownIt-Anchor" href="#静态"></a> 静态</h4><p>类中使用<code>static</code>修饰的属性和方法, 不需要创建类即可使用, 其所属是属于类而不是类实例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Grid</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> origin = &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="title function_">calculateDistanceFromOrigin</span>(<span class="params"><span class="attr">point</span>: &#123;x: <span class="built_in">number</span>; y: <span class="built_in">number</span>;&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> xDist = (point.<span class="property">x</span> - <span class="title class_">Grid</span>.<span class="property">origin</span>.<span class="property">x</span>);</span><br><span class="line">        <span class="keyword">let</span> yDist = (point.<span class="property">y</span> - <span class="title class_">Grid</span>.<span class="property">origin</span>.<span class="property">y</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(xDist * xDist + yDist * yDist) / <span class="variable language_">this</span>.<span class="property">scale</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">constructor</span> (<span class="params"><span class="keyword">public</span> <span class="attr">scale</span>: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> <span class="title class_">Grid</span>(<span class="number">1.0</span>);  <span class="comment">// 1x scale</span></span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> <span class="title class_">Grid</span>(<span class="number">5.0</span>);  <span class="comment">// 5x scale</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grid1.<span class="title function_">calculateDistanceFromOrigin</span>(&#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">10</span>&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grid2.<span class="title function_">calculateDistanceFromOrigin</span>(&#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">10</span>&#125;));</span><br></pre></td></tr></table></figure><h4 id="抽象类"><a class="markdownIt-Anchor" href="#抽象类"></a> 抽象类</h4><p>抽象类作为基类使用, 不会直接被实例化</p><p>抽象类用<code>abstract</code>关键字定义, 抽象类内部可以有<code>abstract</code>定义的抽象方法, 不需要具体的方法实现, 在派生类中实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">makeSound</span>(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">move</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;roaming the earch...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数"><a class="markdownIt-Anchor" href="#构造函数"></a> 构造函数</h4><p>在定义一个非抽象类时, 如果类中定义有必须存在的属性, 则必须显式的声明构造函数, 并传入对应的参数数量及类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">    <span class="attr">greeting</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">greeting</span> = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="property">greeting</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h3><h4 id="接口基本定义"><a class="markdownIt-Anchor" href="#接口基本定义"></a> 接口基本定义</h4><p>最后讲接口有两个原因: 一是在<code>typescript</code>中, 接口的应用最广而多, 类反而少; 二是<code>typescript</code>中的接口有比较多的特性</p><p>使用<code>interface</code>定义接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;<span class="comment">// 必要属性</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;<span class="comment">// 必要属性</span></span><br><span class="line">    <span class="attr">sex</span>?: <span class="built_in">string</span>;<span class="comment">// 可选属性</span></span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">desc</span>: <span class="built_in">string</span>;<span class="comment">// 只读属性</span></span><br><span class="line">    [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;<span class="comment">// 字符串索引签名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>可选属性有两个好处: 一. 可以对可能存在的属性进行预定义; 二. 可以捕获引用了不存在的属性错误.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SquareConfig</span> &#123;</span><br><span class="line">    <span class="attr">color</span>?: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">width</span>?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSquare</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">SquareConfig</span></span>): &#123; <span class="attr">color</span>: <span class="built_in">string</span>; <span class="attr">area</span>: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">    <span class="keyword">let</span> newSquare = &#123;<span class="attr">color</span>: <span class="string">&quot;white&quot;</span>, <span class="attr">area</span>: <span class="number">100</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">color</span>) &#123;</span><br><span class="line">        <span class="comment">// 提示错误</span></span><br><span class="line">        <span class="comment">// Error: Property &#x27;clor&#x27; does not exist on type &#x27;SquareConfig&#x27;</span></span><br><span class="line">        <span class="comment">// 该接口中找不到clor属性</span></span><br><span class="line">        newSquare.<span class="property">color</span> = config.<span class="property">clor</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">width</span>) &#123;</span><br><span class="line">        newSquare.<span class="property">area</span> = config.<span class="property">width</span> * config.<span class="property">width</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(&#123;<span class="attr">color</span>: <span class="string">&quot;black&quot;</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>只读属性只能在对象刚刚创建的时候修改其值, 使用<code>readonly</code>来指定</p><p>接口或类中都可定义只读属性, 只读数组则需要使用数组泛型得到</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">ReadonlyArray</span>&lt;T&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>只读数组的所有可变方法都被去掉了, 其属性不可修改, 内容不可修改, 甚至不能重新赋值给普通数组</p><p>只读数组如果想要赋值类普通数组变量, 只能通过类型断言实现</p></li><li><p>字符串索引签名表示该接口可以有任意数量的名称在该接口中未定义的其他属性. 这种方式在编译时会绕过属性名的检查, 可能会引起错误.</p><p>绕过属性名检查的方式有:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(&#123;<span class="attr">colour</span>: <span class="string">&quot;black&quot;</span>, <span class="attr">width</span>: <span class="number">100</span>&#125;);<span class="comment">// ERROR: &#x27;colour&#x27; not expected in type &#x27;SquareConfig&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><p>类型断言</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(&#123;<span class="attr">colour</span>: <span class="string">&quot;black&quot;</span>, <span class="attr">width</span>: <span class="number">100</span>&#125; <span class="keyword">as</span> <span class="title class_">SquareConfig</span>);</span><br></pre></td></tr></table></figure></li><li><p>接口中添加索引签名</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface SquareConfig &#123;</span><br><span class="line">    <span class="attribute">color</span>?: string;</span><br><span class="line">    <span class="attribute">width</span>?: number;</span><br><span class="line">    <span class="selector-attr">[propName: string]</span>: any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将对象赋值给一个变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareOptions = &#123; <span class="attr">colour</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">width</span>: <span class="number">100</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(squareOptions);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="继承与实现"><a class="markdownIt-Anchor" href="#继承与实现"></a> 继承与实现</h4><p>接口可以继承接口, 且支持多继承</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="attr">sideLength</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类可以实现接口, 且支持多实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">    <span class="title function_">new</span> (<span class="attr">hour</span>: <span class="built_in">number</span>, <span class="attr">minute</span>: <span class="built_in">number</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">implements</span> <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">    <span class="attr">currentTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">h</span>: <span class="built_in">number</span>, <span class="attr">m</span>: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特殊的, 接口也可以继承类, 从而把类当做接口使用, 此继承也是单继承</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">state</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SelectableControl</span> <span class="keyword">extends</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他用法"><a class="markdownIt-Anchor" href="#其他用法"></a> 其他用法</h4><ol><li><p>函数类型</p><p>除了描述带有属性的普通对象外，接口也可以描述函数类型</p><p>给接口定义一个调用签名, 就像是一个只有参数列表和返回值类型的函数定义, 参数列表里的每个参数都需要名字和类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SearchFunc</span> &#123;</span><br><span class="line">  (<span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数类型定义的接口与<code>java</code>中的函数式接口相似, 但是<code>typescript</code>中的函数类型接口是没有方法名的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span>;</span><br><span class="line">mySearch = <span class="keyword">function</span>(<span class="params"><span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.<span class="title function_">search</span>(subString);</span><br><span class="line">  <span class="keyword">return</span> result &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数类型的接口可以定义多个函数, 但是只能有一个匿名函数, 并非语法上不允许, 而是在创建使用时, 无法解析到多个匿名函数, 具体是哪个作为函数类型的接口定义, 我还不知道…</p><p><img src="%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%8E%A5%E5%8F%A3%E4%B8%8D%E8%83%BD%E6%9C%89%E5%A4%9A%E4%B8%AA%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0.png" alt="函数类型接口不能有多个匿名函数" /></p><p>函数的参数会逐个进行检查，要求对应位置上的参数类型是兼容的</p><p>函数的返回值类型是通过其返回值推断出来的</p></li><li><p>可索引类型</p><p>描述那些能够“通过索引得到”的类型</p><p>可索引类型具有一个<em>索引签名</em>，它描述了对象索引的类型，还有相应的索引返回值类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringArray</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="title class_">StringArray</span>;</span><br><span class="line">myArray = [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Fred&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myStr</span>: <span class="built_in">string</span> = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>共有支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型</p><p>当使用<code>number</code>来索引时，<code>JavaScript</code>会将它转换成<code>string</code>然后再去索引对象, 即<code>myArray[0]</code>与<code>myArray['0']</code>是一致的</p></li><li><p>混合类型</p><p>在有了普通接口, 函数类型接口, 可索引类型接口等定义形式之后, 就可以实现混合类型接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    (<span class="attr">start</span>: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">interval</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">reset</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCounter</span>(<span class="params"></span>): <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = &lt;<span class="title class_">Counter</span>&gt;<span class="keyword">function</span> (<span class="params"><span class="attr">start</span>: <span class="built_in">number</span></span>) &#123; &#125;;</span><br><span class="line">    counter.<span class="property">interval</span> = <span class="number">123</span>;</span><br><span class="line">    counter.<span class="property">reset</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">getCounter</span>();</span><br><span class="line"><span class="title function_">c</span>(<span class="number">10</span>);</span><br><span class="line">c.<span class="title function_">reset</span>();</span><br><span class="line">c.<span class="property">interval</span> = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><p><code>getCounter()</code>函数中, 创建了一个<code>Counter</code>的函数接口实例, 然后又在这个实例中添加了<code>interval</code>属性和<code>reset</code>方法定义</p><p>在使用时, 直接作为函数调用(如:<code>c(10)</code>)则实际调用<code>Counter</code>中定义的匿名函数</p></li></ol><h3 id="泛型"><a class="markdownIt-Anchor" href="#泛型"></a> 泛型</h3><p>在定义接口, 类和函数时, 其中的某个属性或参数在定义时不确定具体类型, 但在使用时需要确定是哪种类型, 此时就用到泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在定义时不确定是哪种类型, 所以使用泛型, 但在运行时, 根据传入的参数, 推断出具体类型</p><p>需要注意的是, 当定义接口, 类和函数使用泛型时, 每个泛型定义在运行时只能识别为一种实际类型</p><p>定义的泛型可以通过继承接口或者类来实现约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);  <span class="comment">// Now we know it has a .length property, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud系列(五)---Redis使用</title>
      <link href="/2023/12/14/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E4%BA%94%E4%B9%8BRedis%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/12/14/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E4%BA%94%E4%B9%8BRedis%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>当前环境中, <code>Redis</code>在分布式系统重占有重要的位置, 其作用包括但不限于作缓存, 分布式锁, 分布式主键等, 本篇讲解<code>Spring</code>集成<code>Redis</code>, 将<code>Redis</code>引入到项目中使用.</p><h3 id="引入"><a class="markdownIt-Anchor" href="#引入"></a> 引入</h3><h4 id="引入依赖"><a class="markdownIt-Anchor" href="#引入依赖"></a> 引入依赖</h4><p>子项目中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置"><a class="markdownIt-Anchor" href="#添加配置"></a> 添加配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">172.29</span><span class="number">.241</span><span class="number">.128</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>如果没有自己注册名称为<code>redisTemplate</code>的<code>Bean</code>, 框架会在自动导入配置文件中注册一个<code>redisTemplate</code>的<code>Bean</code>和一个<code>stringRedisTemplate</code>的<code>Bean</code></p><p><img src="Redis%E7%9A%84%E9%BB%98%E8%AE%A4Bean%E6%B3%A8%E5%86%8C.png" alt="Redis的默认Bean注册" /></p><p>自己添加一个自定义的<code>RedisTemplate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">keySerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        template.setKeySerializer(keySerializer);</span><br><span class="line">        template.setHashKeySerializer(keySerializer);</span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; valueSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        template.setValueSerializer(valueSerializer);</span><br><span class="line">        template.setHashValueSerializer(valueSerializer);</span><br><span class="line"></span><br><span class="line">        template.setDefaultSerializer(valueSerializer);</span><br><span class="line"></span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加<code>Redis</code>封装工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis expire error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE.equals(redisTemplate.hasKey(key));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis has key error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(redisTemplate.delete(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> del(Arrays.asList(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(keys)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis set error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis set error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setNx</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE.equals(redisTemplate.opsForValue().setIfAbsent(key, value));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis setnx error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setNx</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE.equals(redisTemplate.opsForValue().setIfAbsent(key, value, time, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis setnx error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hGet</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hSet</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis hash set error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hSet</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> hSet(key, map) &amp;&amp; expire(key, time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis hash set error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hSet</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis hash set error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hSet</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> hSet(key, item, value) &amp;&amp; expire(key, time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis hash set error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hIncr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hDecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis set get error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE.equals(redisTemplate.opsForSet().isMember(key, value));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis set has key error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis set set error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSet</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis set set error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis set size error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sDel</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis expire error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis expire error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list size error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list index error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lPushAll</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().leftPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list left push all error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().leftPushIfPresent(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list left set error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> lSet(key, value) &amp;&amp; expire(key, time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list left set error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lPushAll</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> lPushAll(key, value) &amp;&amp; expire(key, time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list left push all error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">rSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list right push error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">rSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> rSet(key, value) &amp;&amp; expire(key, time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list right push error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">rPushAll</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list right push all error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">rPushAll</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> rPushAll(key, value) &amp;&amp; expire(key, time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list right push all error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSetIndex</span><span class="params">(String key, <span class="type">long</span> index, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list set index element error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lDel</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list delete error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rangeDel</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().trim(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;redis list range delete error:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简单应用"><a class="markdownIt-Anchor" href="#简单应用"></a> 简单应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DictTypeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DictTypeMapper, DictTypeEntity&gt; <span class="keyword">implements</span> <span class="title class_">IDictTypeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SentinelResource(&quot;dict-type-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;DictTypeEntity&gt; <span class="title function_">list</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        redisUtil.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;xiao lin&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;name: &#123;&#125;&quot;</span>, redisUtil.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Redis%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.png" alt="Redis简单使用" /></p><p><img src="Redis%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%BF%9D%E5%AD%98.png" alt="Redis简单使用保存" /></p><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><h4 id="缓存"><a class="markdownIt-Anchor" href="#缓存"></a> 缓存</h4><p>在引入<code>Redis</code>之前, 通常使用<code>Map</code>来做缓存, 引入<code>Redis</code>之后, 就可以使用<code>Redis</code>做缓存了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Objects.isNull(redisUtil.hGet(<span class="string">&quot;key&quot;</span>))) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(redisUtil.hGet(<span class="string">&quot;key&quot;</span>))) &#123;</span><br><span class="line">            redisUtil.hSet(<span class="string">&quot;key&quot;</span>, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), <span class="number">10</span> * <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在分布式系统中, 写入时需要使用分布式锁, 大多数缓存内容的修改操作次数是远小于查询操作次数的</p><h4 id="热点数据"><a class="markdownIt-Anchor" href="#热点数据"></a> 热点数据</h4><p>热点数据与缓存相似, 不同的是, 热点数据可能存在频繁地修改操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">    redisUtil.hSet(<span class="string">&quot;good&quot;</span>, <span class="string">&quot;count&quot;</span>, (Integer) redisUtil.hGet(<span class="string">&quot;good&quot;</span>, <span class="string">&quot;count&quot;</span>) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与缓存一样, 热点数据在分布式系统中也需要使用分布式锁</p><h4 id="分布式锁"><a class="markdownIt-Anchor" href="#分布式锁"></a> 分布式锁</h4><p>锁和分布式锁是一个大课题, 此处仅仅是演示一个案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"><span class="comment">// 存在则不处理, 并返回false, 不存在则添加, 并返回true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">key</span> <span class="operator">=</span> redisUtil.setNx(<span class="string">&quot;dict_type_add&quot;</span>, value, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (!key) &#123;</span><br><span class="line">    <span class="comment">// dosomething</span></span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// 或者抛出异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">r</span> <span class="operator">=</span> (String) redisUtil.get(<span class="string">&quot;dict_type_add&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (value.equalsIgnoreCase(r)) &#123;</span><br><span class="line">        redisUtil.del(<span class="string">&quot;dict_type_add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于以上会发现, 分布式锁的流程大致相似, 所以可以做一个封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处的Component是为了注入RedisUtil使用, 此工具类本身并不需要注册为bean</span></span><br><span class="line"><span class="comment">// 或者可以在RedisUtil中使用创建完成后置操作</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(name = &quot;redisUtil&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributedLockUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RedisUtil REDIS_UTIL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRedisUtil</span><span class="params">(RedisUtil redisUtil)</span> &#123;</span><br><span class="line">        REDIS_UTIL = redisUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">(<span class="meta">@NotNull</span> String key, Object value, <span class="type">long</span> time,<span class="meta">@NotNull</span> VoidSyncExecutor executor)</span> &#123;</span><br><span class="line">        lock(key, value, time);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor.exec();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;redis lock error: &quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            unlock(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">(<span class="meta">@NotNull</span> String key, <span class="type">long</span> time,<span class="meta">@NotNull</span> VoidSyncExecutor executor)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        lock(key, value, time, executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">(<span class="meta">@NotNull</span> String key,<span class="meta">@NotNull</span> VoidSyncExecutor executor)</span> &#123;</span><br><span class="line">        lock(key,<span class="number">10</span>, executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; R <span class="title function_">lock</span><span class="params">(<span class="meta">@NotNull</span> String key, Object value, <span class="type">long</span> time,<span class="meta">@NotNull</span> TypeSyncExecutor&lt;R&gt; executor)</span> &#123;</span><br><span class="line">        lock(key, value, time);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> executor.exec();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;redis lock error: &quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            unlock(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; R <span class="title function_">lock</span><span class="params">(<span class="meta">@NotNull</span> String key, <span class="type">long</span> time,<span class="meta">@NotNull</span> TypeSyncExecutor&lt;R&gt; executor)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="keyword">return</span> lock(key, value, time, executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; R <span class="title function_">lock</span><span class="params">(<span class="meta">@NotNull</span> String key,<span class="meta">@NotNull</span> TypeSyncExecutor&lt;R&gt; executor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lock(key, <span class="number">10</span>, executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">(<span class="meta">@NotNull</span> String key, Object value, <span class="type">long</span> time,<span class="meta">@NotNull</span> BooleanTypeSyncExecutor executor)</span> &#123;</span><br><span class="line">        lock(key, value, time);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE.equals(executor.exec());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;redis lock error: &quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            unlock(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">(<span class="meta">@NotNull</span> String key, <span class="type">long</span> time,<span class="meta">@NotNull</span> BooleanTypeSyncExecutor executor)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="keyword">return</span> lock(key, value, time, executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">(<span class="meta">@NotNull</span> String key,<span class="meta">@NotNull</span> BooleanTypeSyncExecutor executor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lock(key, <span class="number">10</span>, executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">(<span class="meta">@NotNull</span> String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="comment">// 需要有重试机制</span></span><br><span class="line">        <span class="comment">// 存在则不处理, 并返回false, 不存在则添加, 并返回true</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">nx</span> <span class="operator">=</span> REDIS_UTIL.setNx(key, value, time);</span><br><span class="line">        <span class="keyword">if</span> (!nx) &#123;</span><br><span class="line">            <span class="comment">// 判断是否是同一个线程加锁</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">r</span> <span class="operator">=</span> REDIS_UTIL.get(key);</span><br><span class="line">            <span class="keyword">if</span> (!(Objects.equals(value, r))) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="number">500</span>, <span class="string">&quot;系统获取不到锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(<span class="meta">@NotNull</span> String key, Object value)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">r</span> <span class="operator">=</span> REDIS_UTIL.get(key);</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(value, r)) &#123;</span><br><span class="line">            REDIS_UTIL.del(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BooleanTypeSyncExecutor</span> &#123;</span><br><span class="line">        Boolean <span class="title function_">exec</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TypeSyncExecutor</span>&lt;R&gt; &#123;</span><br><span class="line">        R <span class="title function_">exec</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">VoidSyncExecutor</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">exec</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;DictTypeEntity&gt; <span class="title function_">list</span><span class="params">(String type)</span> &#123;</span><br><span class="line"></span><br><span class="line">    DistributedLockUtil.lock(<span class="string">&quot;key&quot;</span>, () -&gt; &#123;</span><br><span class="line">        redisUtil.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;xiao lin&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;name: &#123;&#125;&quot;</span>, redisUtil.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题😭</h3><h3 id="挖坑"><a class="markdownIt-Anchor" href="#挖坑"></a> 挖坑</h3><p><code>Redis</code>详解</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列(一)---安装</title>
      <link href="/2023/12/12/redis/Redis%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%AE%89%E8%A3%85/"/>
      <url>/2023/12/12/redis/Redis%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p><code>Redis</code>作为比较火的<code>NoSQL</code>, 广泛应用与分布式系统中, 由于<code>Redis</code>是基于内存的, 极致的响应速度使其可以在分布式系统中担任众多角色, 如缓存, 分布式共享数据, 分布式锁, 分布式主键, 消息队列等</p><p>本篇先讲安装, 在<code>Ubuntu</code>系统下的安装, 分别介绍两种安装方式的过程</p><p>本人是在<code>Windows</code>下的<code>Ubuntu</code>进行的</p><ol><li><p>配置好<code>wsl</code>环境</p></li><li><p>执行<code>wsl --install</code>安装默认的<code>Ubuntu</code>系统或者从<code>Store</code>中安装</p></li><li><p>创建<code>Ubuntu</code>系统的用户和密码</p></li><li><p>更换源</p><p>清华镜像源配置获取: <a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/</a></p></li></ol><p>参考文章:</p><p><a href="https://zhuanlan.zhihu.com/p/423249278">https://zhuanlan.zhihu.com/p/423249278</a></p><p><a href="https://blog.csdn.net/chigenb/article/details/105641189">https://blog.csdn.net/chigenb/article/details/105641189</a></p><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/</a></p><h3 id="apt工具安装"><a class="markdownIt-Anchor" href="#apt工具安装"></a> <code>apt</code>工具安装</h3><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><p>安装<code>redis</code>服务, 遇到输入[Y/n]的提示时输入<code>y</code>, 或者在命令之后添加<code>-y</code></p><p><img src="Redis%E4%BD%BF%E7%94%A8apt%E5%AE%89%E8%A3%85.png" alt="Redis使用apt安装" /></p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service redis status</span><br></pre></td></tr></table></figure><p>查看<code>redis</code>的运行状态, 使用<code>apt</code>安装时, 安装完成后默认会启动</p><p><img src="Redis%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81.png" alt="Redis运行状态" /></p><p>进入<code>/etc/redis</code>目录, 执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure><p>编辑<code>redis</code>配置文件, 修改位置</p><ol><li><code>bind 127.0.0.1 ::1</code>这一行注释掉, 使其可以远程访问(注意让防火墙开放6379端口)</li><li><a href="#问题一">将<code>protected-mode</code>的值设置为<code>no</code>, 关闭保护模式</a>, 否则也无法正常进行远程访问</li></ol><p>然后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service redis restart</span><br></pre></td></tr></table></figure><p>重新启动服务</p><h4 id="连接"><a class="markdownIt-Anchor" href="#连接"></a> 连接</h4><p>测试远程连接</p><p>可以使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h ip</span><br></pre></td></tr></table></figure><p>或者使用工具</p><p><img src="Redis%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5.png" alt="Redis远程连接" /></p><p><code>redis</code>默认不是以守护进程的方式运行, 可以通过修改配置文件中的<code>daemonize</code>项为<code>yes</code>来启用守护进程</p><h4 id="卸载"><a class="markdownIt-Anchor" href="#卸载"></a> 卸载</h4><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove redis-server</span><br></pre></td></tr></table></figure><p>卸载安装的<code>redis</code>服务</p><h3 id="压缩包安装"><a class="markdownIt-Anchor" href="#压缩包安装"></a> 压缩包安装</h3><h4 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h4><p>到官网https://download.redis.io中寻找想要的版本下载, 更简单的方式是直接使用https://download.redis.io/releases/redis-x.y.z.tar.gz下载, 将<code>xyz</code>分别改为版本对应的数字即可</p><p>此处使用的是<code>7.2.3</code>版本</p><p>在<code>Ubuntu</code>系统中进入到想要放置安装包的位置</p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget url [-P path] [-o path/name]</span><br></pre></td></tr></table></figure><p>下载压缩包, 或者直接使用<code>-P</code>指定下载到哪个目录下, 或者使用<code>-o</code>指定下载到目录并将文件命名</p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-x.y.z.tar.gz</span><br></pre></td></tr></table></figure><p>将下载的压缩包解压</p><h4 id="安装-2"><a class="markdownIt-Anchor" href="#安装-2"></a> 安装</h4><ol><li><p>环境</p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install gcc &amp;&amp; apt-get install g++</span><br></pre></td></tr></table></figure><p>安装<code>c/c++</code>编译器</p><p><a href="#问题三"><code>redis</code>是使用<code>c</code>语言开发的</a></p></li><li><p>编译</p><p><a href="#问题二">进入到解压后的目录中, 并执行<code>make</code>命令</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make PREFIX=/usr/local/redis install</span><br></pre></td></tr></table></figure><p>这里使用<code>PREFIX</code>指定程序存放路径, 否则可能会将可执行文件存放到<code>/user/local/bin</code>目录下或者其他你找不到的位置, 别问我为啥知道😂</p><p><img src="Redis%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4.png" alt="Redis编译命令" /></p><p>编译成功</p><p><img src="Redis%E7%BC%96%E8%AF%91%E6%88%90%E5%8A%9F.png" alt="Redis编译成功" /></p></li><li><p>启动</p><p>进入<code>/usr/local/redis/bin</code>目录执行<code>redis-server</code>文件启动服务</p><p><img src="Redis%E5%90%AF%E5%8A%A8.png" alt="Redis启动" /></p></li><li><p>注册服务</p><ul><li><p>修改<code>/usr/local/redis-7.2.3/utils</code>目录下的<code>install-server.sh</code></p><p><img src="Redis%E8%84%9A%E6%9C%AC%E4%BF%AE%E6%94%B9.png" alt="Redis脚本修改" /></p><p>参考文档: <a href="https://blog.csdn.net/w1014074794/article/details/129367170">https://blog.csdn.net/w1014074794/article/details/129367170</a></p></li><li><p>将<code>redis</code>中的配置文件<code>redis.conf</code>复制到脚本中的目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.conf /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></li><li><p>将启动服务文件添加到环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> sudo export PATH=/usr/local/redis/bin:$PATH</span><br><span class="line">sudo source /etc/profile</span><br></pre></td></tr></table></figure><p>可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>查看环境变量情况</p></li><li><p>服务注册</p><p>运行脚本<code>install-server.sh</code></p><p><img src="Redis%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C.png" alt="Redis服务注册脚本执行" /></p><p>比如我安装在了<code>/usr/local/redis/bin</code>下, 则需要将路径修改</p><p>默认的服务名称是<code>redis_$&#123;port&#125;</code>, 若没有修改端口号就是<code>redis_6379</code>, 服务注册成功后会默认启动</p></li><li><p>服务启动和停止</p><p>服务注册后即可使用<code>service</code>相关命令启动或停止服务, 也可查看服务状态, 但是服务名称与<code>apt-get</code>的方式不太一样, 即此方式的名称是<code>redis_$&#123;port&#125;</code></p></li></ul></li><li><p>配置远程访问</p><p>参考<code>apt</code>工具安装中的远程访问配置</p></li></ol><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题😭</h3><p><i id="问题一">问题一</i></p><p>问题:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(error) DENIED Redis is running in protected mode ...</span><br></pre></td></tr></table></figure><p>问题原因: 服务使用保护模式启动, 无法进行远程访问</p><p>解决方案: 修改<code>redis.conf</code>中的<code>protected-mode</code>的值为<code>no</code></p><p><i id="问题二">问题二</i></p><p>问题: 找不到<code>make</code>命令</p><p>问题原因: 没有安装编译工具</p><p>解决方案: <code>sudo apt-get install make</code>安装编译工具</p><p><i id="问题三">问题三</i></p><p>问题: 使用<code>make</code>编译时报错</p><p>问题原因: 可能是没有安装<code>gcc-c++</code></p><p>解决方案: <code>CentOS</code>使用<code>yum install gcc-c++</code>安装, <code>Ubuntu</code>使用<code>apt-get install gcc &amp;&amp; apt-get install g++</code>安装, 在安装后使用<code>make clean &amp;&amp; make</code>重新编译, 如果仍不成功, 可以将解压的目录删除重新解压再编译</p><p><i id="问题四">问题四</i></p><p>问题: 服务注册后启动时可能失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to start redis.service: Unit redis.service failed to load properly, please adjust/correct and reload service manager: File exists See system logs and &#x27;systemctl status redis.service&#x27; for details.</span><br></pre></td></tr></table></figure><p>问题原因: 可能是被管控</p><p>解决方案: 使用<code>systemctl enable $&#123;service_name&#125;</code>允许服务运行, 但此方式只适用于被管控的情况, 如果是其他情况导致的则无法处理</p><h3 id="挖坑"><a class="markdownIt-Anchor" href="#挖坑"></a> 挖坑</h3><p><code>Redis</code>的使用详情</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud系列(六)---分布式主键</title>
      <link href="/2023/12/11/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E5%85%AD%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%BB%E9%94%AE/"/>
      <url>/2023/12/11/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E5%85%AD%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%BB%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>前面搭建<code>SpringCloud</code>项目, 主要是框架的使用, 其实对于框架而言, 一般的框架学会使用, 能解决生产和开发过程中的问题即可, 少数优秀的框架可以去深入学习一下源码, 其中学习的主要目的是其原理和思想, 而不是其实现, 其设计理念有没有可以借鉴的地方.</p><p>本篇要解决的问题是分布式应用中的主键问题, 分布式主键最好可以满足一下要求</p><ul><li>全局唯一: 这是一个基本要求, 其实在不同的实体表中, 主键相同是不存在异常的, 如用户表中的主键为<code>1</code>不会影响字典主键是否为<code>1</code>, 但此种方式识别性差, 所以要求生成的主键全局唯一</li><li>高性能: 生成响应要快, 不能成为业务响应速度的瓶颈</li><li>趋势递增: 趋势递增在添加数据和查询时可以提高效率</li></ul><p>此系列在本篇后暂停一段时间, 接下来还有登录授权, 分布式事务, 锁, 消息队列等内容, 但由于许多内容与业务相关, 本人能力有限, 无法想象各种场景, 所以准备着手创建一个相配的前端项目, 也学习前端内容, <code>VUE</code>系列, 在该系列中会学习使用总结前端内容, 并且会配合本项目开发基础功能.</p><p>前端项目暂定使用的内容有: <code>TypeScript</code>, <code>node</code>, <code>pnpm</code>, <code>vue</code>等, 革命尚未成功啊!</p><h3 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3><p>定义一个分布式主键接口, 然后定义其不同实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IdGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    Serializable <span class="title function_">id</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h3><h4 id="uuid"><a class="markdownIt-Anchor" href="#uuid"></a> <code>UUID</code></h4><p><code>UUID</code>的方式是最容易实现的方式, 但由于生成的字符串无序, 所以在一般情况下不建议使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UUIDIdGenerator</span> <span class="keyword">implements</span> <span class="title class_">IdGenerator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">id</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="雪花算法"><a class="markdownIt-Anchor" href="#雪花算法"></a> 雪花算法</h4><p>雪花算法是常用的主键生成策略, 其生成的数字是有序的, 结构将一个长整型数值分为四个部分:</p><ul><li>符号位: 占用一个<code>bit</code>位, 定义为0, 即永远为正数, 不变</li><li>时间位: 占用41个<code>bit</code>位, 时间偏移量</li><li>工作机器位: 占用10个<code>bit</code>位, 指明生成主键的机器</li><li>序列号位: 占用12个<code>bit</code>位, 轮询生成序列号</li></ul><blockquote><p>注意:</p><ol><li>如果机器发生了时间回退, 则有可能产生重复值, 但概率几乎可以忽略不计</li><li>雪花算法在分布式中也无法保证先生成的数据一定小于后生成的数据, 这与每台机器的机器时间和定义的机器号有关</li></ol></blockquote><p>实现步骤:</p><ol><li><p>定义常量: 时间戳偏移原点, 序列号位数, 序列号最大值, 机器号位数, 机器号最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列号占用位数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">SEQUENCE_BIT</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 机器占用位数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MACHINE_BIT</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间偏移的坐标原点</span></span><br><span class="line"><span class="comment"> * 此处使用2020年1月1日0时0分0秒000毫秒</span></span><br><span class="line"><span class="comment"> * 可自定义时间坐标原点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">START_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1577808000000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列号的最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">SEQUENCE_MAX</span> <span class="operator">=</span> ~ (-<span class="number">1</span> &lt;&lt; SEQUENCE_BIT); <span class="comment">// 1 &lt;&lt; SEQUENCE_BIT - 1 按位取反就是 -1 &lt;&lt; SEQUENCE_BIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 机器号最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MACHINE_MAX</span> <span class="operator">=</span> ~ (-<span class="number">1</span> &lt;&lt; MACHINE_BIT);</span><br></pre></td></tr></table></figure></li><li><p>定义变量: 机器号(初始化一次即可), 机器位(初始化一次即可), 序列号(初始是为默认值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前序列号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="variable">sequence</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前机器号</span></span><br><span class="line"><span class="comment"> * 初始化后不在改变</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> machineId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> machine;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造器, 创建时添加机器号参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> machineId 机器号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalAccessException   参数异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SnowflakeIdGenerator</span><span class="params">(<span class="type">long</span> machineId)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">    <span class="keyword">if</span> (machineId &gt; MACHINE_MAX) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(<span class="string">&quot;机器号大于要求的最大值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.machineId = machineId;</span><br><span class="line">    <span class="comment">// 机器号所占位为 机器号向左偏移SEQUENCE_BIT</span></span><br><span class="line">    machine = machineId &lt;&lt; SEQUENCE_BIT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义各个部分的实现</p><p>时间戳位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间戳位的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  时间戳位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">timestamp</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 时间戳偏移量按位左移 机器号位数+序列号位数</span></span><br><span class="line">    <span class="keyword">return</span> timestampOffset() &lt;&lt; (MACHINE_BIT + SEQUENCE_BIT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前时间戳偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  时间戳偏移量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">timestampOffset</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">return</span> l - START_TIMESTAMP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>机器位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 机器位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  机器位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">machine</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> machine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列号位</p><p>方案一: 所有时间戳使用共同的序列号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列号位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  序列号位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">sequence</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前序列号的值</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">seq</span> <span class="operator">=</span> sequence;</span><br><span class="line">    <span class="comment">// 判断是否达到最大序列值, 达到则重置</span></span><br><span class="line">    <span class="keyword">if</span> (seq == SEQUENCE_MAX) &#123;</span><br><span class="line">        seq = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    seq ++;</span><br><span class="line">    <span class="comment">// 将新的序列值赋给变量并返回</span></span><br><span class="line">    <span class="type">return</span> <span class="variable">sequence</span> <span class="operator">=</span> seq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个时间戳使用单独的序列号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列号位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  序列号位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">sequence</span><span class="params">(<span class="type">long</span> timestamp)</span> &#123;</span><br><span class="line">    <span class="comment">// 当前时间戳小于最后一次的时间戳时, 返回-1</span></span><br><span class="line">    <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果时间戳大于上次的时间戳, 则重置序列号</span></span><br><span class="line">    <span class="keyword">if</span> (timestamp &gt; lastTimestamp) &#123;</span><br><span class="line">        sequence = -<span class="number">1</span>;</span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取当前序列号的值</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">seq</span> <span class="operator">=</span> sequence;</span><br><span class="line">    <span class="comment">// 判断是否达到最大序列值, 达到则返回 -1, 这是由于同一个时间戳中生成了大于序列号最大数的主键</span></span><br><span class="line">    <span class="keyword">if</span> (seq == SEQUENCE_MAX) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    seq ++;</span><br><span class="line">    <span class="comment">// 将新的序列值赋给变量并返回</span></span><br><span class="line">    <span class="type">return</span> <span class="variable">sequence</span> <span class="operator">=</span> seq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义主键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">id</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Long.MAX_VALUE &amp; timestamp() | machine() | sequence();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优化</p><ul><li><p>分布式服务中保证唯一性</p><p>这个是通过工作机器号实现的, 不同的服务使用不同的机器号, 还可以更细分, 将机器号分为数据中心+机器号, 共占用10位即可</p></li><li><p>多线程下的序列号变量的安全问题</p><p>使用同步即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列号位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  序列号位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">sequence</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前序列号的值</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">seq</span> <span class="operator">=</span> sequence;</span><br><span class="line">    <span class="comment">// 判断是否达到最大序列值, 达到则重置</span></span><br><span class="line">    <span class="keyword">if</span> (seq == SEQUENCE_MAX) &#123;</span><br><span class="line">        seq = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    seq ++;</span><br><span class="line">    <span class="comment">// 将新的序列值赋给变量并返回</span></span><br><span class="line">    <span class="type">return</span> <span class="variable">sequence</span> <span class="operator">=</span> seq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列号位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  序列号位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">sequence</span><span class="params">(<span class="type">long</span> timestamp)</span> &#123;</span><br><span class="line">    <span class="comment">// 当前时间戳小于最后一次的时间戳时, 返回-1</span></span><br><span class="line">    <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果时间戳大于上次的时间戳, 则重置序列号</span></span><br><span class="line">    <span class="keyword">if</span> (timestamp &gt; lastTimestamp) &#123;</span><br><span class="line">        sequence = -<span class="number">1</span>;</span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取当前序列号的值</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">seq</span> <span class="operator">=</span> sequence;</span><br><span class="line">    <span class="comment">// 判断是否达到最大序列值, 达到则返回 -1, 这是由于同一个时间戳中生成了大于序列号最大数的主键</span></span><br><span class="line">    <span class="keyword">if</span> (seq == SEQUENCE_MAX) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    seq ++;</span><br><span class="line">    <span class="comment">// 将新的序列值赋给变量并返回</span></span><br><span class="line">    <span class="type">return</span> <span class="variable">sequence</span> <span class="operator">=</span> seq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>疑问</p><ul><li><p>序列号为什么可以不在每个时间戳中都重置</p><p>一: 序列号在主键生成的影响度是远小于时间戳的影响度的, 所以即使在不同的时间戳使用相同的序列号缓存也是不影响整体主键顺序的, 其影响性是在达到最大值时, 在同一个时间戳中生成主键时会产生后生成的主键小于先生成的主键的情况, 但是这种情况是可以接受的, 所以没有必要在每次生成时都判断是否是不同的时间戳然后选择是否重置序列号的操作</p><p>二: 当序列号在同一个时间戳中达到最大值后进行重置操作, 然后又在该时间戳达到了最大值, 这个问题本身不是此种序列号方式的问题, 而是生成的数据量的问题. 序列号可以产生~(-1 &lt;&lt; 12)个数值, 产生了这个问题说明要求在1毫秒之内生成大于该数量的值, 无论是哪种序列号生成方式都不可能在1毫秒内生成大于最大数量的不重复值</p></li></ul></li><li><p>全部内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnowflakeIdGenerator</span> <span class="keyword">implements</span> <span class="title class_">IdGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号占用位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">SEQUENCE_BIT</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器占用位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MACHINE_BIT</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间偏移的坐标原点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">START_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1577808000000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号的最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">SEQUENCE_MAX</span> <span class="operator">=</span> ~ (-<span class="number">1</span> &lt;&lt; SEQUENCE_BIT); <span class="comment">// 1 &lt;&lt; SEQUENCE_BIT - 1 按位取反就是 -1 &lt;&lt; SEQUENCE_BIT</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器号最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MACHINE_MAX</span> <span class="operator">=</span> ~ (-<span class="number">1</span> &lt;&lt; MACHINE_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前序列号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">sequence</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前机器号</span></span><br><span class="line"><span class="comment">     * 初始化后不在改变</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> machineId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> machine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> lastTimestamp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器, 创建时添加机器号参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> machineId 机器号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException   参数异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SnowflakeIdGenerator</span><span class="params">(<span class="type">long</span> machineId)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="keyword">if</span> (machineId &gt; MACHINE_MAX) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(<span class="string">&quot;机器号大于要求的最大值&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.machineId = machineId;</span><br><span class="line">        <span class="comment">// 机器号所占位为 机器号向左偏移SEQUENCE_BIT</span></span><br><span class="line">        machine = machineId &lt;&lt; SEQUENCE_BIT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成主键由时间戳和序列号的两种方案, 方案二更完善些, 方案一也可用</span></span><br><span class="line">    <span class="comment">// 方案一</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">id</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.MAX_VALUE &amp; timestamp() | machine() | sequence();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方案二</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">id</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> sequence;</span><br><span class="line">        <span class="type">long</span> timestamp;</span><br><span class="line">        <span class="comment">// 循环, 返回的序列值小于0时, 则重新计算</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            timestamp = timestamp();</span><br><span class="line">            sequence = sequence(timestamp);</span><br><span class="line">        &#125; <span class="keyword">while</span> (sequence &lt; <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;time: &quot;</span> + timestamp + <span class="string">&quot;; sequence: &quot;</span> + sequence);</span><br><span class="line">        <span class="keyword">return</span> Long.MAX_VALUE &amp; timestamp | machine() | sequence;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  序列号位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">sequence</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前序列号的值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">seq</span> <span class="operator">=</span> sequence;</span><br><span class="line">        <span class="comment">// 判断是否达到最大序列值, 达到则重置</span></span><br><span class="line">        <span class="keyword">if</span> (seq == SEQUENCE_MAX) &#123;</span><br><span class="line">            seq = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        seq ++;</span><br><span class="line">        <span class="comment">// 将新的序列值赋给变量并返回</span></span><br><span class="line">        <span class="type">return</span> <span class="variable">sequence</span> <span class="operator">=</span> seq;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timestamp 时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  序列号位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">sequence</span><span class="params">(<span class="type">long</span> timestamp)</span> &#123;</span><br><span class="line">        <span class="comment">// 当前时间戳小于最后一次的时间戳时, 返回-1</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果时间戳大于上次的时间戳, 则重置序列号</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &gt; lastTimestamp) &#123;</span><br><span class="line">            sequence = -<span class="number">1</span>;</span><br><span class="line">            lastTimestamp = timestamp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取当前序列号的值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">seq</span> <span class="operator">=</span> sequence;</span><br><span class="line">        <span class="comment">// 判断是否达到最大序列值, 达到则返回 -1, 这是由于同一个时间戳中生成了大于序列号最大数的主键</span></span><br><span class="line">        <span class="keyword">if</span> (seq == SEQUENCE_MAX) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        seq ++;</span><br><span class="line">        <span class="comment">// 将新的序列值赋给变量并返回</span></span><br><span class="line">        <span class="type">return</span> <span class="variable">sequence</span> <span class="operator">=</span> seq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  机器位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">machine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> machine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间戳位的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  时间戳位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">timestamp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 时间戳偏移量按位左移 机器号位数+序列号位数</span></span><br><span class="line">        <span class="keyword">return</span> timestampOffset() &lt;&lt; (MACHINE_BIT + SEQUENCE_BIT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间戳偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  时间戳偏移量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">timestampOffset</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis() - START_TIMESTAMP;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="redis"><a class="markdownIt-Anchor" href="#redis"></a> <code>Redis</code></h4><p><code>Redis</code>主键策略也是常用的分布式主键策略之一</p><p><code>Redis</code>主键策略需要注意的点有:</p><ul><li>持久化, 避免<code>Redis</code>重启导致的主键重置</li><li>设置起始值和步长, 避免多个<code>Redis</code>服务(集群)的导致的主键重复问题(<code>MySql</code>数据库也可通过这种方式获得不重复的主键)</li><li>可能还有其他问题, 我暂时没想到</li></ul><p>实现步骤</p><ol><li><p>环境</p><p>本次的<code>Redis</code>主键策略是基于上一篇中引入的<code>Redis</code>和分布式锁</p></li><li><p>实现</p><p><code>Redis</code>主键策略可以有两种模式, 一种是单个主键模式, 一种是缓存主键模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RedisUtil redisUtil;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否启用缓存模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> startValue;</span><br></pre></td></tr></table></figure></li><li><p>单个主键模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非缓存模式下启用</span></span><br><span class="line"><span class="comment"> * 步长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> step;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long <span class="title function_">singletonId</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> DistributedLockUtil.lock(<span class="string">&quot;distributed_redis_id_generator_lock&quot;</span>, () -&gt; &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">id</span> <span class="operator">=</span> redisUtil.get(<span class="string">&quot;distributed_redis_id&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!Objects.isNull(id)) &#123;</span><br><span class="line">            result = Long.parseLong(id.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        redisUtil.set(<span class="string">&quot;distributed_redis_id&quot;</span>, result + step);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>缓存主键模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存模式下启用</span></span><br><span class="line"><span class="comment"> * 缓存主键数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存模式下启用</span></span><br><span class="line"><span class="comment"> * 下一个主键值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> next;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存模式下启用</span></span><br><span class="line"><span class="comment"> * 剩余主键数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> rest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long <span class="title function_">cacheId</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> DistributedLockUtil.lock(<span class="string">&quot;distributed_redis_id_generator_lock&quot;</span>, () -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (rest &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            rest --;</span><br><span class="line">            <span class="keyword">return</span> next ++;</span><br><span class="line">        &#125;</span><br><span class="line">        next = <span class="number">0L</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">id</span> <span class="operator">=</span> redisUtil.get(<span class="string">&quot;distributed_redis_id&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!Objects.isNull(id)) &#123;</span><br><span class="line">            next = Long.parseLong(id.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        rest = size;</span><br><span class="line">        redisUtil.set(<span class="string">&quot;distributed_redis_id&quot;</span>, next + size);</span><br><span class="line">        rest --;</span><br><span class="line">        <span class="keyword">return</span> next ++;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>疑问</p><p>关于主键持久化, 请交给<code>Redis</code>的持久化处理, 在<code>Redis</code>服务停止或者宕机重启时, 需要将<code>Redis</code>持久化内容重新写入内存, 此时<code>Redis</code>中用于主键生成的内容值, 最好在原值的基础上增加一定数量的值, 避免持久化滞后带来的主键重复问题</p></li><li><p>全部内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdGenerator</span> <span class="keyword">implements</span> <span class="title class_">IdGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用缓存模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> startValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存模式下启用</span></span><br><span class="line"><span class="comment">     * 缓存主键数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存模式下启用</span></span><br><span class="line"><span class="comment">     * 下一个主键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存模式下启用</span></span><br><span class="line"><span class="comment">     * 剩余主键数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rest;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非缓存模式下启用</span></span><br><span class="line"><span class="comment">     * 步长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> step;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisIdGenerator</span><span class="params">(RedisUtil redisUtil, <span class="type">boolean</span> cache, <span class="type">long</span> startValue, <span class="type">int</span> size, <span class="type">int</span> step)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisUtil = redisUtil;</span><br><span class="line">        <span class="built_in">this</span>.cache = cache;</span><br><span class="line">        <span class="comment">// 缓存模式使用长度</span></span><br><span class="line">        <span class="keyword">if</span> (cache &amp;&amp; size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(<span class="string">&quot;缓存模式下缓存长度必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="number">0L</span>;</span><br><span class="line">        <span class="built_in">this</span>.rest = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 缓存模式不使用步长</span></span><br><span class="line">        <span class="keyword">if</span> (!cache &amp;&amp; step &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(<span class="string">&quot;非缓存模式下步长必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.step = step;</span><br><span class="line">        <span class="built_in">this</span>.startValue = startValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisIdGenerator</span><span class="params">(RedisUtil redisUtil, <span class="type">boolean</span> cache, <span class="type">long</span> startValue, <span class="type">int</span> size)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="built_in">this</span>(redisUtil, cache, startValue, size, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisIdGenerator</span><span class="params">(RedisUtil redisUtil, <span class="type">boolean</span> cache, <span class="type">long</span> startValue)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="built_in">this</span>(redisUtil, cache, startValue, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">id</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cache ? cacheId() : singletonId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long <span class="title function_">singletonId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DistributedLockUtil.lock(<span class="string">&quot;distributed_redis_id_generator_lock&quot;</span>, () -&gt; &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> startValue;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">id</span> <span class="operator">=</span> redisUtil.get(<span class="string">&quot;distributed_redis_id&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!Objects.isNull(id)) &#123;</span><br><span class="line">                result = Long.parseLong(id.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            redisUtil.set(<span class="string">&quot;distributed_redis_id&quot;</span>, result + step);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long <span class="title function_">cacheId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DistributedLockUtil.lock(<span class="string">&quot;distributed_redis_id_generator_lock&quot;</span>, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (rest &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                rest --;</span><br><span class="line">                <span class="keyword">return</span> next ++;</span><br><span class="line">            &#125;</span><br><span class="line">            next = startValue;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">id</span> <span class="operator">=</span> redisUtil.get(<span class="string">&quot;distributed_redis_id&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!Objects.isNull(id)) &#123;</span><br><span class="line">                next = Long.parseLong(id.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            rest = size;</span><br><span class="line">            redisUtil.set(<span class="string">&quot;distributed_redis_id&quot;</span>, next + size);</span><br><span class="line">            rest --;</span><br><span class="line">            <span class="keyword">return</span> next ++;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="策略选择配置"><a class="markdownIt-Anchor" href="#策略选择配置"></a> 策略选择配置</h3><h4 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">project:</span></span><br><span class="line">  <span class="attr">id:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">size:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">step:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">start-value:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">snowflake:</span></span><br><span class="line">      <span class="attr">machine-id:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="配置读取"><a class="markdownIt-Anchor" href="#配置读取"></a> 配置读取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;project.id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdGeneratorConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">IdType</span> <span class="variable">type</span> <span class="operator">=</span> IdType.UUID;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">RedisGeneratorConfig</span> <span class="variable">redis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisGeneratorConfig</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">SnowflakeGeneratorConfig</span> <span class="variable">snowflake</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SnowflakeGeneratorConfig</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(name = &quot;idGenerator&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IdGenerator <span class="title function_">idGenerator</span><span class="params">(RedisUtil redisUtil)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> SNOWFLAKE: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SnowflakeIdGenerator</span>(snowflake.getMachineId());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> REDIS: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisIdGenerator</span>(redisUtil, redis.getCache(), redis.getStartValue(), redis.getSize());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> UUID: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UUIDIdGenerator</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RedisGeneratorConfig</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">cache</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">long</span> <span class="variable">startValue</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCache</span><span class="params">(<span class="type">boolean</span> cache)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cache = cache;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.size = size &gt; <span class="number">0</span> ? size : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStep</span><span class="params">(<span class="type">int</span> step)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.step = step &gt; <span class="number">0</span> ? step : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartValue</span><span class="params">(<span class="type">int</span> startValue)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.startValue = startValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SnowflakeGeneratorConfig</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">long</span> <span class="variable">machineId</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">IdType</span> &#123;</span><br><span class="line">    UUID,</span><br><span class="line">    SNOWFLAKE,</span><br><span class="line">    REDIS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题😭</h3><p><i id="问题一">问题一</i></p><p>问题: 生成的主键长于数据库主键字段长度</p><p>问题原因: 建表时, 数据库主键使用的是<code>int</code>类型, 主键生成中使用的是字符串或者<code>long</code>型, 导致数据库主键字段无法存储</p><p>解决办法: 修改数据库字段类型, 建议为<code>bigint</code>, 生成主键使用<code>long</code>型</p><h3 id="挖坑"><a class="markdownIt-Anchor" href="#挖坑"></a> 挖坑</h3>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 分布式主键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud系列(四)---网关</title>
      <link href="/2023/12/10/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E5%9B%9B%E4%B9%8B%E7%BD%91%E5%85%B3/"/>
      <url>/2023/12/10/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E5%9B%9B%E4%B9%8B%E7%BD%91%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>为了不暴露服务器情况, 也为了实现请求的<code>host</code>统一, 添加网关作为请求的中转站, 实现请求路由.</p><p>本次项目中使用的是<code>SpringCloud</code>官方推荐的<code>Gateway</code>网关, 依然延续挖坑的思想, 本篇只介绍在项目中使用<code>Gateway</code>, 对于<code>Gateway</code>的详细使用和配置, 挖坑😅</p><h3 id="引入网关"><a class="markdownIt-Anchor" href="#引入网关"></a> 引入网关</h3><h4 id="创建网关项目"><a class="markdownIt-Anchor" href="#创建网关项目"></a> 创建网关项目</h4><p>参考创建服务的文章, 创建一个网关的<code>SpringBoot</code>子项目</p><h4 id="添加依赖"><a class="markdownIt-Anchor" href="#添加依赖"></a> 添加依赖</h4><p>网关子项目中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册中心, 寻找服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 网关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置"><a class="markdownIt-Anchor" href="#添加配置"></a> 添加配置</h4><ol><li><p>启用注册中心</p><p><code>@EnableDiscoveryClient</code>启用<code>Zookeeper</code>注册中心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayServiceApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置路由</p><p>方式一:</p><p>使用配置文件配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-service</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">root:</span> <span class="string">/services/dev</span></span><br><span class="line">        <span class="attr">instance-port:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">instance-host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">gateway-service-01</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">localhost:2181</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">structure-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://structure-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Path</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">patterns:</span> <span class="string">/structure/**</span></span><br><span class="line"><span class="comment">#          filters:</span></span><br><span class="line"><span class="comment">#            - args:</span></span><br><span class="line"><span class="comment">#              name:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">dict-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://dict-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/dict/**</span></span><br></pre></td></tr></table></figure><p>配置路由的<code>predicates</code>和<code>filters</code>有两种方式</p><ol><li>使用<code>key=value</code>的格式: 这种格式有两种类型, 一种是<code>type=key,value</code>如<code>- Query=param,name</code>; 一种是<code>type=value</code>, 如<code>- Path=/xxx/**</code>, <code>type</code>即策略类型, <code>key</code>表示<code>args</code>中的<code>key</code>, <code>value</code>表示该<code>key</code>对应的值</li><li>使用<code>map</code>的格式: 这种格式要求每一个配置项都有一个名称和一个参数列表, 名称即是每一个配置项的<code>type</code>, 如<code>Path</code>, <code>Query</code>, <code>Header</code>等, 参数是一个<code>map</code>, <code>map</code>对应的<code>key</code>值是由要求的, 可以通过<code>XxxRoutePredicateFactory</code>类中<code>shortcutFieldOrder</code>方法中定义了哪些<code>key</code>来进行查看, 如<code>PathRoutePredicateFactory</code>中的<code>shortcutFieldOrder</code>方法定义了<code>patterns</code>和<code>matchTrailingSlash</code>两个<code>key</code></li></ol><p><a href="#问题二">每种格式的每一项都需要使用<code>-</code>作为一项的开始</a></p><p>方式二:</p><p>使用<code>RouteLocator</code>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouteLocator <span class="title function_">routeLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> builder.routes()</span><br><span class="line">        .route(<span class="string">&quot;path_route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/dict/**&quot;</span>).uri(<span class="string">&quot;lb://dict-service&quot;</span>))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册一个<code>RouteLocator</code>, 在其中添加路由信息, 此方式配置的路由会覆盖配置文件中配置的相同路由, 比如上面定义的路由会覆盖配置文件中定义的<code>Path</code>类型<code>/dict/**</code>的<code>pattern</code>路由</p></li></ol><h3 id="使用网关"><a class="markdownIt-Anchor" href="#使用网关"></a> 使用网关</h3><p>访问服务资源时, 不再直接访问该资源, 而是访问网关地址, 通过网关进行路由</p><p><img src="Gateway%E7%BD%91%E5%85%B3%E6%98%AF%E7%94%B1.png" alt="Gateway网关是由" /></p><h3 id="关于项目的其他内容"><a class="markdownIt-Anchor" href="#关于项目的其他内容"></a> 关于项目的其他内容</h3><p>此处调整了一下项目的内容, 主要是将用户部门合并为了一个结构项目</p><p><img src="%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95.png" alt="项目目录" /></p><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题😭</h3><p><i id="问题一">问题一</i></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unable to find RoutePredicateFactory with name -Path</span><br></pre></td></tr></table></figure><p>问题原因: 配置<code>predicates</code>的格式不对, <code>predicates</code>的格式是由要求的, 首字母要大写, <code>-</code>和<code>Path</code>之间要有空格(<code>Query</code>, <code>Header</code>等同理)</p><p>解决方案: 修改为正确格式</p><p><i id="问题二">问题二</i></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Property: spring.cloud.gateway.routes[0].xxx</span><br><span class="line">Value: &quot;[]&quot;</span><br><span class="line">Reason: 不能为空</span><br></pre></td></tr></table></figure><p>问题原因: 一. 配置的<code>route</code>的参数名写错了, 比如<code>uri</code>写成了<code>url</code>; 二, 配置的内容的项格式错误, 比如<code>predicates</code>或者<code>filters</code>的项没有以<code>-</code>开始</p><p>解决方案: 检查名称和格式</p><p><i id="问题三">问题三</i></p><p>访问项目时路径正确但是出现<code>404</code>的问题</p><p>问题原因: 1. 路由配置问题, 查看路由的路径转发是否匹配; 2.服务注册问题, 可以实现转发, 要求服务都在注册在同一个注册中心的同一个目录下, 并且服务注册的<code>address</code>和<code>port</code>都对应该服务的访问<code>host</code>和<code>port</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">root:</span> <span class="string">/services/dev</span></span><br><span class="line">        <span class="attr">instance-port:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">instance-host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">gateway-service-01</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">localhost:2181</span></span><br></pre></td></tr></table></figure><p>如上, 该网关只能找到注册在<code>/services/dev</code>下的服务, 只有同在该目录的服务才能被该网关发现, 进而实现转发, 该网关对外展示的<code>address</code>是定义的<code>instance-host</code>对应的值, 对外展示的端口是定义的<code>instance-port</code>对应的值</p><p><i id="问题四">问题四</i></p><p>问题: 配置文件中配置路由正确, 但是访问时却访问不到, 既没有任何返回, 也没有报错信息</p><p>问题原因: 可能是配置<code>uri</code>时协议方式写错了, 比如<code>lb</code>写成了<code>bl</code></p><p>解决方案: 改, 这种问题需要仔细检查路由配置, 在没有报错信息的情况下追溯可能出错的位置</p><h3 id="挖坑"><a class="markdownIt-Anchor" href="#挖坑"></a> 挖坑</h3><p><code>Gateway</code>详解</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud系列(三)---服务熔断与降级</title>
      <link href="/2023/12/02/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E4%B8%89%E4%B9%8B%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%E4%B8%8E%E9%99%8D%E7%BA%A7/"/>
      <url>/2023/12/02/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E4%B8%89%E4%B9%8B%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%E4%B8%8E%E9%99%8D%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<!-- top --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>上篇基本完成了服务的注册与发现, 服务间的<code>API</code>调用和配置中心, 对于服务间的调用, 需要解决服务调用失败的情况以及可能带来的服务雪崩的问题.</p><p>由于<code>Hystrix</code>不再维护, 所以此处使用<code>SpringCloudAlibaba</code>的<code>Sentinel</code>作为服务熔断与降级的组件. <code>SpringCloudAlibaba</code>的<code>Sentinel</code>作为微服务的容错组件, 以流量为一切入点, 从流量控制, 熔断降级, 系统负载保护等多维度保护服务稳定性, 是真正的流量防卫兵</p><h3 id="安装部署sentinel控制端"><a class="markdownIt-Anchor" href="#安装部署sentinel控制端"></a> 安装部署<code>Sentinel</code>控制端</h3><h4 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h4><p>从https://github.com/alibaba/Sentinel/releases下载<code>jar</code>包</p><p>此处下载所使用的是<code>v1.8.6</code></p><h4 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h4><p><code>Sentinel</code>默认端口是<code>8080</code>, 如果<code>8080</code>端口被占用了需要使用其他端口</p><p>修改方式使用普通的<code>SpringBoot</code>项目的修改方式即可</p><p>此处使用项目同目录下创建<code>application.yml</code>文件的方式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><h4 id="访问测试"><a class="markdownIt-Anchor" href="#访问测试"></a> 访问测试</h4><p>浏览器中访问<code>Sentinel</code>控制端, 用户和密码都是<code>sentinel</code></p><p><img src="Sentinel%E6%8E%A7%E5%88%B6%E5%8F%B0%E9%A6%96%E9%A1%B5.png" alt="Sentinel控制台首页" /></p><h3 id="项目中引入sentinel"><a class="markdownIt-Anchor" href="#项目中引入sentinel"></a> 项目中引入<code>Sentinel</code></h3><h4 id="引入依赖"><a class="markdownIt-Anchor" href="#引入依赖"></a> 引入依赖</h4><ol><li><p>父项目中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2022.0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>子项目中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>IDEA</code>中提示<code>sentinel</code>中引用的<code>fastjson</code>版本存在漏洞, 所以在此处排除掉并引入稳定版本</p></li></ol><h4 id="添加配置"><a class="markdownIt-Anchor" href="#添加配置"></a> 添加配置</h4><p>配置文件添加监控项目配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:10000</span></span><br></pre></td></tr></table></figure><h4 id="sentinel使用"><a class="markdownIt-Anchor" href="#sentinel使用"></a> <code>Sentinel</code>使用</h4><p>使用<code>@SentinelResource</code>注解, 将资源注册为<code>Sentinel</code>监控资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DictTypeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DictTypeMapper, DictTypeEntity&gt; <span class="keyword">implements</span> <span class="title class_">IDictTypeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceClient userServiceClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// Sentinel资源配置</span></span><br><span class="line">    <span class="meta">@SentinelResource(&quot;dict-type-get-id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">get</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">DictTypeEntity</span> <span class="variable">type</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">        result.put(<span class="string">&quot;dictType&quot;</span>, type);</span><br><span class="line">        ApiResult&lt;UserEntity&gt; re = userServiceClient.getById(type.getCreator());</span><br><span class="line">        <span class="keyword">if</span> (!Objects.isNull(re)) &#123;</span><br><span class="line">            result.put(<span class="string">&quot;user&quot;</span>, re.getData());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="Sentinel%E4%B8%AD%E8%B5%84%E6%BA%90%E7%9A%84%E7%9B%91%E6%8E%A7.png" alt="Sentinel中资源的监控" /></p><p>注意事项:</p><ol><li><code>@SentinelResource</code>注解可以使用在类和方法上</li><li>项目启动后并不会立即注册到<code>Sentinel</code>中, 只有首次调用了资源后, 才会将该资源注册到<code>Sentinel</code>中</li><li>通常使用在方法上是为了进行更细粒度的流量控制</li></ol><h3 id="sentinel的流控规则"><a class="markdownIt-Anchor" href="#sentinel的流控规则"></a> <code>Sentinel</code>的流控规则</h3><h4 id="流控策略"><a class="markdownIt-Anchor" href="#流控策略"></a> 流控策略</h4><ol><li><p>快速失败: 直接拒绝</p></li><li><p>预热: 缓慢将阈值提高到指定阈值, 形成缓冲保护</p><p><img src="Sentinel%E9%A2%84%E7%83%AD%E7%AD%96%E7%95%A5.png" alt="Sentinel预热策略" /></p></li><li><p>排队等候: 先进入队列等待, 如果规定时间内没有执行则放弃执行</p><p><img src="Sentinel%E6%8E%92%E9%98%9F%E7%AD%89%E5%BE%85%E7%AD%96%E7%95%A5.png" alt="Sentinel排队等待策略" /></p></li></ol><h4 id="流控模式"><a class="markdownIt-Anchor" href="#流控模式"></a> 流控模式</h4><ol><li><p>直接: 资源的直接控制, 当前资源达到流控阈值, 当前资源限流</p></li><li><p>关联: 资源的间接控制, 关联资源达到流控阈值, 当前资源限流</p><p><img src="Sentinel%E7%9A%84%E5%85%B3%E8%81%94%E6%A8%A1%E5%BC%8F.png" alt="Sentinel的关联模式" /></p></li><li><p>链路: 更细粒度的监控; 只有指定资源链路的请求达到阈值时, 才执行限流</p><p>首先要关闭<code>context</code>收敛, 使资源进行链路隔离, 实现不同链路的单独控制</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="comment"># 关闭context收敛, 这样被监控方法可以进行不同链路的单独控制</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="Sentinel%E7%9A%84%E9%93%BE%E8%B7%AF%E6%A8%A1%E5%BC%8F.png" alt="Sentinel的链路模式" /></p></li></ol><h3 id="sentinel的异常处理"><a class="markdownIt-Anchor" href="#sentinel的异常处理"></a> <code>Sentinel</code>的异常处理</h3><h4 id="自定义异常处理请求"><a class="markdownIt-Anchor" href="#自定义异常处理请求"></a> 自定义异常处理请求</h4><p>自定义异常处理请求是定义一个异常处理的请求, 当监控的资源限流时, 会直接调用该请求返回结果, 这种方式可以放到公共项目中定义, 在引入项目中配置</p><ol><li><p>定义异常处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sentinel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelErrorController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/block&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;?&gt; block() &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.failure(<span class="number">500</span>, <span class="string">&quot;资源被限流&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加异常处理请求路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:10000</span></span><br><span class="line">      <span class="comment"># 异常请求的处理路径</span></span><br><span class="line">      <span class="attr">block-page:</span> <span class="string">/dict/sentinel/block</span></span><br></pre></td></tr></table></figure></li><li><p>添加流控配置</p><p><img src="Sentinel%E6%B5%81%E6%8E%A7%E9%85%8D%E7%BD%AE.png" alt="Sentinel流控配置" /></p></li><li><p>限流异常结果</p><p><img src="Sentinel%E9%99%90%E6%B5%81%E6%8E%A7%E5%88%B6%E8%AF%B7%E6%B1%82%E7%BB%93%E6%9E%9C.png" alt="Sentinel限流控制请求结果" /></p><p>当<code>QPS</code>大于单机阈值(每秒请求数大于单机阈值)时, 则会出现以上结果, 请求被转发到配置的异常请求处</p></li></ol><h4 id="自定义异常处理器"><a class="markdownIt-Anchor" href="#自定义异常处理器"></a> 自定义异常处理器</h4><p>自定义异常处理请求是定义一个异常处理器, 当监控的资源限流时, 会调用该处理器的返回结果, 此种方式是以中细粒度的处理方式</p><ol><li><p>自定义异常处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelBlockHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 与资源的返回值相同, 参数列表要一直, 并在最后添加一个 BlockException 类型的参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">get</span><span class="params">(Integer id, BlockException ex)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;: 资源限流&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为资源配置异常处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DictTypeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DictTypeMapper, DictTypeEntity&gt; <span class="keyword">implements</span> <span class="title class_">IDictTypeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceClient userServiceClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;dict-type-get-id&quot;, blockHandlerClass = &#123;SentinelBlockHandler.class&#125;, blockHandler = &quot;get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">get</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">DictTypeEntity</span> <span class="variable">type</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">        result.put(<span class="string">&quot;dictType&quot;</span>, type);</span><br><span class="line">        ApiResult&lt;UserEntity&gt; re = userServiceClient.getById(type.getCreator());</span><br><span class="line">        <span class="keyword">if</span> (!Objects.isNull(re)) &#123;</span><br><span class="line">            result.put(<span class="string">&quot;user&quot;</span>, re.getData());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="Sentinel%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8.png" alt="Sentinel自定义异常处理器" /></p></li><li><p>添加流控配置</p><p><img src="Sentinel%E6%B5%81%E6%8E%A7%E9%85%8D%E7%BD%AE.png" alt="Sentinel流控配置" /></p></li><li><p>限流异常结果</p><p><img src="Sentinel%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%E7%BB%93%E6%9E%9C.png" alt="Sentinel自定义异常处理器结果" /></p><p><img src="Sentinel%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%E6%97%A5%E5%BF%97.png" alt="Sentinel自定义异常处理器日志" /></p></li></ol><h3 id="服务熔断和降级"><a class="markdownIt-Anchor" href="#服务熔断和降级"></a> 服务熔断和降级</h3><h4 id="服务熔断和降级是什么"><a class="markdownIt-Anchor" href="#服务熔断和降级是什么"></a> 服务熔断和降级是什么</h4><p>网络上讲述这两者的区别的时候都非常专业化, 我看的是云里雾里, 个人浅薄的理解就是熔断是基于服务高可用的, 而降级是基于整体负载的, 保证系统正常可用的; 熔断目的是为了保证服务的高可用性, 在目标资源压力过大时采取的避险方案; 降级的目的是为了保证核心业务的可用性, 不同时间段的核心业务可能不一致, 一方面通过管控非核心业务资源, 使得核心业务可以获得更多的系统资源, 另一方面通过熔断方式保证核心业务的可用</p><h4 id="资源熔断处理"><a class="markdownIt-Anchor" href="#资源熔断处理"></a> 资源熔断处理</h4><p>在<code>Sentinel</code>中, 熔断的处理其实与流控一致, 即通过异常请求或者异常处理器来实现, 可以参考流控中的异常处理</p><p>熔断策略</p><ol><li><p>慢调用规则</p><p><img src="Sentinel%E7%9A%84%E6%85%A2%E8%B0%83%E7%94%A8%E7%86%94%E6%96%AD%E7%AD%96%E7%95%A5.png" alt="Sentinel的慢调用熔断策略" /></p><p><strong>最大请求时长</strong>: 一次请求的最大时长, 超过该时长视为一次慢调用</p><p><strong>熔断时长</strong>: 熔断器的周期时长, 每个周期即为熔断时长, 周期与周期之间会尝试请求以寻求关闭熔断器; 每经过一个熔断时长, 熔断器就会进入半开状态, 释放部分请求去尝试调用, 如果服务仍然不可用, 则继续保持开启, 进入下一个熔断周期, 如果可用则熔断器关闭</p><p><strong>最小请求数</strong>: 统计时长内最小的请求次数</p><p><strong>统计时长</strong>: 每个统计时间窗的时长, 统计该时长内的请求次数和状态, 判断是否需要熔断</p><p><strong>比例阈值</strong>: 用来判断统计时长内所有请求中慢调用请求所占的比例的最大值</p><p><strong>注意</strong>:</p><blockquote><p>慢调用比例策略要想开启熔断器需要达到两个条件:</p><ol><li>统计时长内, 请求数量大于最小请求数</li><li>统计时长内, 慢调用所占比例大于阈值</li></ol></blockquote></li><li><p>异常比例</p><p><img src="Sentinel%E7%9A%84%E5%BC%82%E5%B8%B8%E6%AF%94%E4%BE%8B%E7%86%94%E6%96%AD%E7%AD%96%E7%95%A5.png" alt="Sentinel的异常比例熔断策略" /></p><p><strong>熔断时长</strong>: 熔断器的周期时长, 每个周期即为熔断时长, 周期与周期之间会尝试请求以寻求关闭熔断器; 每经过一个熔断时长, 熔断器就会进入半开状态, 释放部分请求去尝试调用, 如果服务仍然不可用, 则继续保持开启, 进入下一个熔断周期, 如果可用则熔断器关闭</p><p><strong>最小请求数</strong>: 统计时长内最小的请求次数</p><p><strong>统计时长</strong>: 每个统计时间窗的时长, 统计该时长内的请求次数和状态, 判断是否需要熔断</p><p><strong>比例阈值</strong>: 用来判断统计时长内所有请求中异常请求所占的比例的最大值</p><p><strong>注意</strong>:</p><blockquote><p>异常比例策略要想开启熔断器需要达到两个条件:</p><ol><li>统计时长内, 请求数量大于最小请求数</li><li>统计时长内, 异常请求所占比例大于阈值</li></ol></blockquote></li><li><p>异常数</p><p><img src="Sentinel%E7%9A%84%E5%BC%82%E5%B8%B8%E6%95%B0%E7%86%94%E6%96%AD%E7%AD%96%E7%95%A5.png" alt="Sentinel的异常数熔断策略" /></p><p><strong>熔断时长</strong>: 熔断器的周期时长, 每个周期即为熔断时长, 周期与周期之间会尝试请求以寻求关闭熔断器; 每经过一个熔断时长, 熔断器就会进入半开状态, 释放部分请求去尝试调用, 如果服务仍然不可用, 则继续保持开启, 进入下一个熔断周期, 如果可用则熔断器关闭</p><p><strong>最小请求数</strong>: 统计时长内最小的请求次数</p><p><strong>统计时长</strong>: 每个统计时间窗的时长, 统计该时长内的请求次数和状态, 判断是否需要熔断</p><p><strong>异常数</strong>: 用来判断统计时长内异常请求的数量</p><p><strong>注意</strong>:</p><blockquote><p>异常比例策略要想开启熔断器需要达到两个条件:</p><ol><li>统计时长内, 请求数量大于最小请求数</li><li>统计时长内, 异常请求达到阈值</li></ol></blockquote></li></ol><h4 id="服务调用熔断处理"><a class="markdownIt-Anchor" href="#服务调用熔断处理"></a> 服务调用熔断处理</h4><p>本次项目中的服务调用使用的是<code>OpenFeign</code>, <code>Sentinel</code>整个<code>OpenFeign</code>进行熔断处理的方式与<code>Hystrix</code>一致</p><ol><li><p>配置开启<code>OpenFeign</code>支持<code>Sentinel</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>添加服务调用的熔断处理</p><ul><li><p>服务调用接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserServiceClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    ApiResult&lt;UserEntity&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建服务调用接口的实现类, 重写方法的返回值即为熔断的默认调用结果, 并将其注册为<code>Bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceClientFallback</span> <span class="keyword">implements</span> <span class="title class_">UserServiceClient</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;UserEntity&gt; <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.failure();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#问题一">如果没有注册为<code>Bean</code>, 项目启动时会报异常</a></p></li><li><p>将该实现类在服务调用接口上添加为<code>fallback</code>参数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;, fallback = UserServiceClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserServiceClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    ApiResult&lt;UserEntity&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题😭</h3><p><i id="问题一">问题一</i></p><p>出现问题:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: No fallback instance of type class com.xiaolin.commons.clients.fallback.UserServiceClientFallback found for feign client user-service</span><br></pre></td></tr></table></figure><p>问题原因: 在做服务熔断时, 服务调用接口的实现没有注册为<code>Bean</code></p><p>解决方案: 将服务调用接口的实现注册为<code>Bean</code></p><h3 id="挖坑"><a class="markdownIt-Anchor" href="#挖坑"></a> 挖坑</h3><p><code>Sentinel</code>的高级使用(系统规则, 集群等)</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Sentinel </tag>
            
            <tag> SpringCloudAlibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud系列(二)---注册中心和配置中心</title>
      <link href="/2023/11/30/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
      <url>/2023/11/30/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>前一篇搭建了分布式项目基本服务内容, 此篇开始进行分布式的架构设计. 首先从注册中心开始, 原本是想使用<code>Eureka</code>的, 但由于<code>Eureka</code>从2.x开始不再开源, 担心会发生风向偏移, 所以此处选用<code>Zookeeper</code>. 最近看的招聘信息里, <code>Zookeeper</code>出现的频率也挺高的, 当然, 自己也想学习使用新东西.</p><p>由于本系列是学习搭建<code>SpringCloud</code>的系列文章, 所以不会探讨<code>Zookeeper</code>的深度学习和使用, 本篇的目的是在项目中引入<code>Zookeeper</code>作为注册中心和配置中心</p><h3 id="启动zookeeper"><a class="markdownIt-Anchor" href="#启动zookeeper"></a> 启动<code>Zookeeper</code></h3><h4 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h4><p>从https://zookeeper.apache.org/releases.html下载对应版本的<code>Zookeeper</code>, 解压缩</p><h4 id="修改配置"><a class="markdownIt-Anchor" href="#修改配置"></a> 修改配置</h4><p>根据<code>conf</code>目录中的<code>zoo_sample.cfg</code>文件, 在<code>conf</code>目录下创建<code>zoo.cfg</code>文件, 修改其中的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line"><span class="comment"># 心跳间隔</span></span><br><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line"><span class="comment"># 数据库经</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">D:\\software\\apache-zookeeper-3.9.1\\data</span></span><br><span class="line"><span class="comment"># 日志路径</span></span><br><span class="line"><span class="attr">dataLogDir</span>=<span class="string">D:\\software\\apache-zookeeper-3.9.1\\logs</span></span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line"><span class="comment"># 客户端端口号</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"><span class="comment"># 修改占用的8080端口号</span></span><br><span class="line"><span class="attr">admin.serverPort</span>=<span class="string">8079</span></span><br><span class="line"><span class="comment"># the maximum number of client connections.</span></span><br><span class="line"><span class="comment"># increase this if you need to handle more clients</span></span><br><span class="line"><span class="comment">#maxClientCnxns=60</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Be sure to read the maintenance section of the </span></span><br><span class="line"><span class="comment"># administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></span><br><span class="line"><span class="comment">#autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="comment"># Purge task interval in hours</span></span><br><span class="line"><span class="comment"># Set to &quot;0&quot; to disable auto purge feature</span></span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## Metrics Providers</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># https://prometheus.io Metrics Exporter</span></span><br><span class="line"><span class="comment">#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider</span></span><br><span class="line"><span class="comment">#metricsProvider.httpHost=0.0.0.0</span></span><br><span class="line"><span class="comment">#metricsProvider.httpPort=7000</span></span><br><span class="line"><span class="comment">#metricsProvider.exportJvmInfo=true</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>tickTime：这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。</li><li>initLimit：LF初始通信时限，集群中的follower服务器（F）与leader服务器（L）之间初始连接时能容忍的最多心跳数（tickTime的数量）。</li><li>syncLimit：LF同步通信时限，集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数（tickTime的数量）。</li><li>dataDir：顾名思义就是 Zookeeper 保存数据的目录，默认情况下，Zookeeper 将写数据的日志文件也保存在这个目录里。</li><li>clientPort：客户端连接端口，这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求</li><li>autopurge.snapRetainCount：保留数量。</li><li>autopurge.purgeInterval：清理时间间隔，单位：小时。</li><li>server.N = YYY:A:B，其中N表示服务器编号，YYY表示服务器的IP地址，A为LF通信端口，表示该服务器与集群中的leader交换的信息的端口。B为选举端口，表示选举新leader时服务器间相互通信的端口（当leader挂掉时，其余服务器会相互通信，选择出新的leader）。一般来说，集群中每个服务器的A端口都是一样，每个服务器的B端口也是一样。但是当所采用的为伪集群时，IP地址都一样，只能时A端口和B端口不一样。</li></ul></blockquote><p>详细介绍可参考: <a href="https://blog.csdn.net/zlbdmm/article/details/109669049">https://blog.csdn.net/zlbdmm/article/details/109669049</a></p><p>需要注意的是, <code>Zookeeper</code>在<code>3.5</code>版本后会占用<code>8080</code>端口, 所以需要使用<code>8080</code>端口的要修改端口号</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改占用的8080端口号为自己想要使用的端口号</span></span><br><span class="line"><span class="attr">admin.serverPort</span>=<span class="string">8079 </span></span><br></pre></td></tr></table></figure><h4 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h4><p>进入<code>bin</code>目录, <code>Windows</code>使用<code>zkServer.cmd</code>文件启动, <code>Linux</code>使用<code>zkServer.sh</code>文件启动</p><h3 id="引入zookeeper"><a class="markdownIt-Anchor" href="#引入zookeeper"></a> 引入<code>Zookeeper</code></h3><h4 id="添加依赖"><a class="markdownIt-Anchor" href="#添加依赖"></a> 添加依赖</h4><ol><li><p>父级项目中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2022.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于下载使用的<code>Zookeeper</code>是比较新的版本, 所以此处引入的<code>spring-cloud-dependencies</code>也使用了最新版本, 尽量避免版本问题</p><p>上篇中介绍到, 在<code>&lt;dependencyManagement&gt;</code>标签中引入预定义组依赖时, 需要使用<code>&lt;scope&gt;import&lt;/scope&gt;</code>来表示导入该依赖中管理的依赖. <code>spring-cloud-dependencies</code>就是预定义依赖组, 它的<code>pom</code>文件中只是在<code>&lt;dependencyManagement&gt;</code>中定义了引入依赖及其版本, 本身并没有这些依赖, 所以项目在引入时, 需要使用<code>&lt;scope&gt;import&lt;/scope&gt;</code>来将其管理的依赖导入, 但具体导入使用哪些依赖, 需要在子项目中的<code>&lt;dependencies&gt;</code>中定义</p></li><li><p>子项目中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="添加配置"><a class="markdownIt-Anchor" href="#添加配置"></a> 添加配置</h4><ol><li><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dict-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 实例 host 对应 zookeeper 数据的 address</span></span><br><span class="line">        <span class="attr">instance-host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="comment"># 实例 port 对应 zookeeper 数据的 port</span></span><br><span class="line">        <span class="attr">instance-port:</span> <span class="number">8060</span></span><br><span class="line">        <span class="comment"># 实例 id 对应 zookeeper 数据的 id</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">dict-services-01</span></span><br><span class="line">      <span class="comment"># 配置zookeeper的服务地址, 多个使用 , 隔开</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">localhost:2181</span></span><br></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @EnableDiscoveryClient 注解开启服务注册发现功能</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZookeeperConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用zookeeper"><a class="markdownIt-Anchor" href="#使用zookeeper"></a> 使用<code>Zookeeper</code></h3><ol><li><p>启动服务</p><ul><li><p>启动<code>Zookeeper</code></p></li><li><p>启动项目</p><p><a href="#问题一">你看, 我说的会出现版本问题吧, 它提示我使用<code>3.0.x</code>或者<code>3.1.x</code>的<code>SpringBoot</code></a></p></li></ul></li><li><p>查看<code>Zookeeper</code></p><p>使用<code>ZooInspector</code>或者<code>PrettyZoo</code>工具, 查看<code>Zookeeper</code>中的内容</p><p><img src="Zookeeper%E6%B3%A8%E5%86%8C%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA.png" alt="Zookeeper注册结果展示" /></p><p><img src="Zookeeper%E4%B8%AD%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%E6%A0%BC%E5%BC%8F%E5%8C%96.png" alt="Zookeeper中服务的注册信息格式化" /></p></li><li><p>修改根节点</p><p>上述图片中, 服务注册到<code>Zookeeper</code>中的的<code>services</code>根节点中, 这是默认的根节点, 如果想要自定义根节点或者多级节点, 可以使用<code>root</code>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 配置根节点为/dev, 其下有子节点/services, 将服务注册到 /dev/services 节点下</span></span><br><span class="line">        <span class="attr">root:</span> <span class="string">/dev/services</span></span><br><span class="line">      <span class="comment"># 配置zookeeper的服务地址, 多个使用 , 隔开</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">localhost:2181</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="服务调用"><a class="markdownIt-Anchor" href="#服务调用"></a> 服务调用</h3><p>使用<code>OpenFeign</code>进行服务间的调用</p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.xiaolin.*.clients&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenFeignConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>确认被调用服务的<code>API</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意, 此项目的context-path配置是添加了 /user 的, 所以此访问路径为 ip:port/user/get/&#123;id&#125;</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;?&gt; getById(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id) &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(userService.getById(id));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>OpenFeign</code>的服务调用客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserServiceClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    ApiResult&lt;UserEntity&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/type&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DictTypeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IDictTypeService dictTypeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;?&gt; get(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id) &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(dictTypeService.get(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DictTypeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DictTypeMapper, DictTypeEntity&gt; <span class="keyword">implements</span> <span class="title class_">IDictTypeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceClient userServiceClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">get</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">DictTypeEntity</span> <span class="variable">type</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">        result.put(<span class="string">&quot;dictType&quot;</span>, type);</span><br><span class="line">        ApiResult&lt;UserEntity&gt; re = userServiceClient.getById(type.getCreator());</span><br><span class="line">        <span class="keyword">if</span> (!Objects.isNull(re)) &#123;</span><br><span class="line">            result.put(<span class="string">&quot;user&quot;</span>, re.getData());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p><p><img src="Zookeeper%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="Zookeeper注册中心服务调用测试结果" /></p></li></ol><h3 id="配置中心"><a class="markdownIt-Anchor" href="#配置中心"></a> 配置中心</h3><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用Zookeeper配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 允许使用bootstrap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="#问题二"><code>bootstrap.yml</code>的导入问题</a></p></li><li><p>修改配置</p><p>在服务项目的<code>resources</code>目录下添加<code>bootstrap.yml</code>文件, 将项目配置和<code>Zookeeper</code>配置添加到<code>bootstrap.yml</code>中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8680</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/dict</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dict-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 配置zookeeper的服务地址, 多个使用 , 隔开</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">localhost:2181</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 配置所在节点</span></span><br><span class="line">        <span class="attr">root:</span> <span class="string">/config/dev</span></span><br><span class="line">        <span class="comment"># application.name与profile的分割符, 比如要给dict-service的dev环境配置一个project.version, 则配置的节点名称为/config/dev/dict-service,dev/project.version</span></span><br><span class="line">        <span class="attr">profile-separator:</span> <span class="string">&quot;,&quot;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>文件中可以添加其他配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在application.yml文件中添加配置, 此处是为了让程序启动时, 可以读取到配置而不报错</span></span><br><span class="line"><span class="attr">project:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1</span></span><br></pre></td></tr></table></figure><p><a href="#问题四">配置文件配置</a></p></li><li><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/type&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">//开启属性更新功能，让这个bean里面的属性会根据配置中心的修改而同步</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DictTypeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;project.version&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String projectVersion;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/version&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;?&gt; version() &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(projectVersion);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Zookeeper</code>中添加配置</p><p><img src="Zookeeper%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9%E6%A0%BC%E5%BC%8F.png" alt="Zookeeper项目配置内容格式" /><br />此处使用<code>Zookeeper</code>可视化工具<code>PrettyZoo</code></p></li><li><p>结果</p><p><img src="Zookeeper%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="Zookeeper配置中心测试结果" /></p></li></ol><h3 id="建议"><a class="markdownIt-Anchor" href="#建议"></a> 建议</h3><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题😭</h3><p><i id="问题一">问题一</i></p><p>问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Your project setup is incompatible with our requirements due to following reasons:</span><br><span class="line"></span><br><span class="line">- Spring Boot [3.2.0] is not compatible with this Spring Cloud release train</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider applying the following actions:</span><br><span class="line"></span><br><span class="line">- Change Spring Boot version to one of the following versions [3.0.x, 3.1.x] .</span><br></pre></td></tr></table></figure><p>问题原因: <code>SpringCloud</code>版本更新跟不上<code>SpringBoot</code>版本更新速度</p><p>解决方案: 将<code>SpringBoot</code>版本降低到<code>3.1.5</code></p><p><i id="问题二">问题二</i></p><p>问题:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">No spring.config.import property has been defined</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Add a spring.config.import=zookeeper: property to your configuration.</span><br><span class="line">If configuration is not required add spring.config.import=optional:zookeeper: instead.</span><br><span class="line">To disable this check, set spring.cloud.zookeeper.config.enabled=false or </span><br><span class="line">spring.cloud.zookeeper.config.import-check.enabled=false.</span><br></pre></td></tr></table></figure><p>问题原因: 由于<code>bootstrap.yml</code>是系统级的资源配置文件，是用在程序引导执行时更加早期配置信息读取；而<code>application.yml</code>是用户级的资源配置文件，是用来后续的一些配置所需要的公共参数。 <code>bootstrap.yml</code>比<code>application.yml</code>的优先级要高. <code>SpringCloud</code> 版本把<code>bootstrap</code>禁用了，导致在读取文件的时候读取不到而报错.</p><p>解决方案: 添加<code>spring-cloud-starter-bootstrap</code>依赖, <code>bootstrap</code>从新导入进来</p><p><i id="问题三">问题三</i></p><p>问题:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.yaml.snakeyaml.parser.ParserException: while parsing a block node</span><br><span class="line"> in &#x27;reader&#x27;, line 22, column 28:</span><br><span class="line">            profile-separator: ,</span><br><span class="line">                               ^</span><br><span class="line">expected the node content, but found &#x27;,&#x27;</span><br><span class="line"> in &#x27;reader&#x27;, line 22, column 28:</span><br><span class="line">            profile-separator: ,</span><br></pre></td></tr></table></figure><p>问题原因: 读取配置时不符合要求</p><p>解决方案: <code>profile-separator</code>配置的值一定要用<code>&quot;&quot;</code>括起来</p><p><i id="问题四">问题四</i></p><p>问题:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not resolve placeholder &#x27;project.version&#x27; in value &quot;$&#123;project.version&#125;&quot;</span><br></pre></td></tr></table></figure><p>问题原因: 配置文件中没有添加<code>project.version</code></p><p>解决方案: 在配置文件中添加配置</p><h3 id="挖坑"><a class="markdownIt-Anchor" href="#挖坑"></a> 挖坑</h3><p><code>Zookeeper</code>详解</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 注册中心 </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL系列(一)---安装</title>
      <link href="/2023/11/27/mysql/MySQL%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%AE%89%E8%A3%85/"/>
      <url>/2023/11/27/mysql/MySQL%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>数据库是后端必须要掌握的一项内容, <code>MySQL</code>是数据库中学习和使用比较方便的, 所以本次就来学习一下<code>MySQL</code>数据库</p><p>此处学习使用的是<code>MySQL8</code>, 新版本的安装和使用总是那么的吸引人.</p><p>本次将<code>Windows</code>和<code>Linux</code>系统中安装<code>MySQL8</code>统一介绍, <code>Windows</code>使用<code>zip</code>包的格式, <code>Linux</code>使用命令下载</p><p>当前阶段<code>Docker</code>盛行, 让开发者不再需要去花费时间关注环境, 但是工具的目的是提高效率节省时间而不是使人退化, 所以依然要学会安装</p><h3 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> Windows</h3><h4 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h4><ol><li><p>下载地址: <a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p></li><li><p>使用<code>bing</code>搜索<code>mysql8 windows zip</code>.  <font color="red">不要使用百度!不要使用百度!不要使用百度!</font> 搜索结果中找<code>MySQL Community Server</code></p><p><img src="MySQL%E7%9A%84Windows%E5%8E%8B%E7%BC%A9%E5%8C%85%E6%90%9C%E7%B4%A2.png" alt="MySQL的Windows压缩包搜索" /></p></li><li><p>本次使用的是<code>mysql-8.0.35-winx64.zip</code></p></li></ol><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><h5 id="解压缩"><a class="markdownIt-Anchor" href="#解压缩"></a> 解压缩</h5><p>解压缩到想要的文件夹下, 修改下文件夹的名字, 主要是不要让它那么长: <code>mysql-8.0.35</code></p><p><mark>注意以下的<code>D:/software/mysql-8.0.35</code>是我<code>mysql8</code>的安装目录, 应根据个人安装位置查找相关内容</mark></p><h5 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h5><p><img src="MySQL%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="MySQL配置环境变量" /></p><h5 id="初始化数据库"><a class="markdownIt-Anchor" href="#初始化数据库"></a> 初始化数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure><p>使用上述命令初始化数据库, 并设置默认<code>root</code>密码为空, 这样初次登录时就不需要输入密码了</p><p><img src="MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="MySQL数据库初始化" /></p><p><mark>建议: 在整个安装过程中, 使用<code>cmd</code>执行命令时建议全部使用管理员方式打开, 避免因管理员权限导致失败或者执行成功但没有效果的情况</mark></p><p>如果使用了<code>--initialize</code>, 可以配合<code>--console</code>查看密码, 或者到<code>D:/software/mysql-8.0.35/data/计算机用户名.err</code>文件中查看密码</p><h5 id="安装服务"><a class="markdownIt-Anchor" href="#安装服务"></a> 安装服务</h5><p>在<code>mysql</code>的根目录下创建一个<code>my.ini</code>文件并添加配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#免密登录</span></span><br><span class="line"><span class="comment">#注意, 使用上面的初始化命令后, 下面的这行配置一定要注释掉, 否则会出现服务启动成功了又自己关闭了的情况</span></span><br><span class="line"><span class="comment">#skip-grant-tables</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:/software/mysql-<span class="number">8.0</span>.<span class="number">35</span></span><br><span class="line"><span class="comment"># 设置 mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:/software/mysql-<span class="number">8.0</span>.<span class="number">35</span>/data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"><span class="comment"># 修改默认的加密方式为mysql_native_password, 在mysql8中, 默认的加密方式改为了caching_sha2_password</span></span><br><span class="line"><span class="attr">default-authentication-plugin</span>=mysql_native_password </span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure><p>用<mark>管理员身份</mark>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqld install service_name(默认MySQL) --defaults-file=&quot;xxx\my.ini&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如 mysqld install MySQL8 --defaults-file=<span class="string">&quot;D:\software\mysql-8.0.35\my.ini&quot;</span></span></span><br></pre></td></tr></table></figure><p>注意: 指定配置文件时, 指令是<code>--defaults-file</code>, 注意<code>default</code>后面有个<code>s</code>, 否则启动时会出错, 在<code>D:/software/mysql-8.0.35/data/计算机用户名.err</code>文件中会有类似一下的报错信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-11-26T15:45:38.283085Z 0 [ERROR] [MY-000067] [Server] unknown variable &#x27;default-file=D:\software\mysql-8.0.35\my.ini&#x27;.</span><br></pre></td></tr></table></figure><p><img src="MySQL%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E6%88%90%E5%8A%9F.png" alt="MySQL注册服务成功" /></p><p>如果没有使用管理员权限会出现一下错误</p><p><img src="MySQL%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E6%97%B6%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90.png" alt="MySQL注册服务时没有使用管理员权限" /></p><p>如果想删除服务, 可以使用一下命令删除</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sc</span> delete service_name</span><br></pre></td></tr></table></figure><p><img src="MySQL%E5%88%A0%E9%99%A4%E6%9C%8D%E5%8A%A1.png" alt="MySQL删除服务" /></p><p>或者使用<code>mysql</code>的命令删除<code>MySQL</code>服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld <span class="literal">--remove</span> service_name</span><br></pre></td></tr></table></figure><h5 id="启动服务"><a class="markdownIt-Anchor" href="#启动服务"></a> 启动服务</h5><ul><li><p>使用命令启动</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net <span class="built_in">start</span> service_name </span><br><span class="line"><span class="comment"># 如 net start MySQL8</span></span><br></pre></td></tr></table></figure><p><img src="MySQL%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" alt="MySQL服务启动成功" /></p><p>如果出现无法正常启动的提示, 可以去查看自己上一步中<code>defaults</code>是不是少了<code>s</code>或者指向的文件路径是否正确</p><p>如果出现服务启动成功, 但是连接时连接不上, 查看服务发现自动关闭了的情况</p><ul><li><p>查看<code>ini</code>文件中<code>skip-grant-tables</code>是否注释掉, 这种情况在<code>D:/software/mysql-8.0.35/data/计算机用户名.err</code>有以下信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-11-26T15:45:38.283085Z 0 [ERROR] [MY-000067] [Server] TCP/IP, --shared-memory, or --named-pipe should be configured on NT OS.</span><br></pre></td></tr></table></figure></li><li><p>使用管理员权限启动尝试</p></li><li><p>其他原因可以通过<code>D:/software/mysql-8.0.35/data/计算机用户名.err</code>查看错误日志</p></li></ul></li><li><p>手动启动</p><p><img src="MySQL%E6%89%8B%E5%8A%A8%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1.png" alt="MySQL手动启动服务" /></p><p>失败情况</p><p><img src="MySQL%E6%89%8B%E5%8A%A8%E5%90%AF%E5%8A%A8%E5%90%8E%E5%81%9C%E6%AD%A2.png" alt="MySQL手动启动后停止" /></p><p>上述问题多半是<code>my.ini</code>文件中的配置导致的, 可以去<code>D:/software/mysql-8.0.35/data/计算机用户名.err</code>查看错误日志, 不行的话从头来过</p></li></ul><h5 id="登录"><a class="markdownIt-Anchor" href="#登录"></a> 登录</h5><p>使用数据库连接命令连接数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p><img src="MySQL%E7%99%BB%E5%BD%95.png" alt="MySQL登录" /></p><p>如果连接失败, 应该是服务启动失败或者启动后自动停止了</p><h5 id="修改密码和允许远程访问"><a class="markdownIt-Anchor" href="#修改密码和允许远程访问"></a> 修改密码和允许远程访问</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"># 修改密码</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;密码&#x27;;</span><br><span class="line"># 允许root用户远程登录访问</span><br><span class="line">UPDATE user SET host=&#x27;%&#x27; WHERE user=&#x27;root&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>注意在防火墙中开放<code>MySQL</code>服务的端口</p><p>注意修改密码的方式, 要替换一下密码加密方式, 否则可能导致<code>Navicat</code>连接不上或者远程连接失败</p><p>如果很不幸的复制<code>SQL</code>没有改动执行后退出了, 建议是使用<code>Navicat</code>去连接登录修改密码, 毕竟使用<code>CMD</code>不太方便</p><h5 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章:</h5><p><a href="https://blog.csdn.net/qq_43674360/article/details/121809469">https://blog.csdn.net/qq_43674360/article/details/121809469</a></p><p><a href="https://zhuanlan.zhihu.com/p/442759047">https://zhuanlan.zhihu.com/p/442759047</a></p><p><a href="https://blog.csdn.net/u014672466/article/details/86093534">https://blog.csdn.net/u014672466/article/details/86093534</a></p><h3 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> Linux</h3><p><code>Linux</code>系统本人是在<code>Windows</code>下的<code>Ubuntu</code>进行的</p><ol><li><p>配置好<code>wsl</code>环境</p></li><li><p>执行<code>wsl --install</code>安装默认的<code>Ubuntu</code>系统或者从<code>Store</code>中安装</p></li><li><p>创建<code>Ubuntu</code>系统的用户和密码</p></li><li><p>更换源</p><p>清华镜像源配置获取: <a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/</a></p></li></ol><p>参考文章:</p><p><a href="https://zhuanlan.zhihu.com/p/423249278">https://zhuanlan.zhihu.com/p/423249278</a></p><p><a href="https://blog.csdn.net/chigenb/article/details/105641189">https://blog.csdn.net/chigenb/article/details/105641189</a></p><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/</a></p><h4 id="下载安装"><a class="markdownIt-Anchor" href="#下载安装"></a> 下载安装</h4><p>执行命令下载安装<code>MySQL</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install mysql-server -y</span><br></pre></td></tr></table></figure><p>下载安装后, 系统已经进行了数据库初始化, 服务注册等操作, 不需要手动操作</p><p>执行命令查看<code>MySQL</code>服务状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql status</span><br></pre></td></tr></table></figure><p><img src="MySQL%E5%AE%89%E8%A3%85%E5%90%8E%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81.png" alt="MySQL安装后的运行状态" /></p><p><code>MySQL</code>安装后默认会自动启动</p><h4 id="登录-2"><a class="markdownIt-Anchor" href="#登录-2"></a> 登录</h4><p>使用数据库连接命令连接数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><h4 id="修改密码和允许远程访问-2"><a class="markdownIt-Anchor" href="#修改密码和允许远程访问-2"></a> 修改密码和允许远程访问</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"># 修改密码</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;密码&#x27;;</span><br><span class="line"># 允许root用户远程登录访问</span><br><span class="line">UPDATE user SET host=&#x27;%&#x27; WHERE user=&#x27;root&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>注意修改密码的方式, 要替换一下密码加密方式, 否则可能导致<code>Navicat</code>连接不上或者远程连接失败</p><p>使用<code>ufw</code>的<code>ufw allow 3306</code>使防火墙开放3306端口</p><p>使用<code>vim /etc/mysql/mysql.conf.d/mysqld.cnf</code>命令, 将配置文件中的<code>bind-address = 127.0.0.1</code>注释或者改为<code>0.0.0.0</code>并重启服务</p><p>安装<code>net-tools</code>, 使用<code>ifconfig</code>命令查看<code>ip</code></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud系列(一)---项目创建</title>
      <link href="/2023/11/25/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/"/>
      <url>/2023/11/25/springcloud/SpringCloud%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>最近找工作有点难受啊, 工作三年, 做了三年的<code>cruder</code>, 再回头发现, 现在技术要求都这么高, 这么广了吗? 三年下来, 杂七杂八学的不少, 但是不系统也不深入, 现在找个机会系统整理一下. 同时也给自己一点目标, 看看自己能不能坚持下来, 能坚持多久.</p><p>为什么会选择从<code>SpringCloud</code>开始?</p><ol><li>市面上有自己产品的公司(大家都想去的自研公司), 大都在思考向分布式转型或者已经开始转向分布式. 而分布式中应用最多最广的就是<code>SpringCloud</code>了, 当然也会使用<code>SpringCloudAlibaba</code></li><li><code>SpringCloud</code>是一种分布式解决方案, 其中糅合了多种技术, 便于整理学习</li></ol><p>本系列如何开展?</p><ol><li>从零开始构建一个<code>SpringCloud</code>项目, 从建表开始, 一步步搭建, 争取做到二次回首时, 根据博客即可重新搭建出一样的项目, 当然有可能会非常啰嗦</li><li>关于项目搭建过程中出现的问题, 比如报错或者无效果之类的情况, 会在每篇博客的最后写明</li><li>关于搭建过程中会出现没有学习过的技术, 会先去学习, 届时本系列可能会断更一段时间</li><li>由于搭建过程可能只是学习使用, 所以关于使用技术的深入学习, 会在每一篇博文的结尾挖坑标注, 等待后续学习</li><li>搭建过程中在使用技术时可能会想到一些面试题, 或者面试题的高发区, 可能会整理一篇相关的面试题合集</li><li>搭建过程中可能会出现后续使用时遇到前面内容的问题, 则会回到前篇博客中修改, 即不保证看到的博客是最终版</li><li>由于此系列类似一个流程系列, 所以在写博客时对于使用或者学习的内容没有深入思考, 导致博客质量低, 甚至类似于记流水账, 这种情况也会同上, 在后续的使用中维持前期博客的思考和更新</li></ol><p>本系列目标?</p><ol><li>系统学习相关技术, 学会搭建<code>SpringCloud</code>项目流程</li><li>搭建出一个基础项目, 后续需要搭建项目时可以直接拿来使用, 比如搭建完后打成压缩包或者上传到<code>gitee</code>, 便于后续使用</li><li>后续可能会分类搭建, 将<code>SpringCloud</code>版本和<code>SpringCloudAlibaba</code>版本分开, 但不保证完全隔离, 比如事务中可能都是用<code>Seata</code></li></ol><h3 id="创建父项目"><a class="markdownIt-Anchor" href="#创建父项目"></a> 创建父项目</h3><p><code>Type</code>项选择<code>Maven POM</code>, 不熟悉<code>Gradle</code>, 所以先使用<code>Maven</code></p><p>创建后可以看到<code>POM</code>文件中的<code>packaging</code>标签的值的<code>pom</code></p><p>注: 创建时选择合适的<code>SpringBoot</code>版本, 否则会有许多版本问题, 此处使用当前的最新版本<code>3.2.0</code>; <code>JDK</code>的版本选择也需要慎重, 此处创建时默认<code>JDK</code>版本在<code>IDEA</code>中已经不显示<code>jdk11</code>了; 本次是搭建和学习, 所以使用最新版本, 踩坑.</p><p><img src="%E7%88%B6%E9%A1%B9%E7%9B%AE%E4%BF%A1%E6%81%AF.png" alt="父项目信息" /></p><h3 id="管理依赖"><a class="markdownIt-Anchor" href="#管理依赖"></a> 管理依赖</h3><p>在创建的父项目中的<code>POM</code>文件中添加<code>dependencyManagement</code>标签管理项目的依赖版本</p><p>在<code>dependencyManagement</code>标签中管理的依赖:</p><ul><li><p>如果来自<code>Spring</code>预定义的版本, 则需要使用<code>&lt;type&gt;pom&lt;/type&gt;</code>标记</p></li><li><p>如果是预定义依赖组(自定义名称), 则需要使用<code>&lt;scope&gt;import&lt;/scope&gt;</code>标记, 意思是将预定义依赖组下管理的所有依赖导入</p></li><li><p>参考文章:</p><p><a href="https://www.cnblogs.com/huahua035/p/7680607.html(%E6%96%87%E7%AB%A0%E4%B8%AD%E7%9A%84%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0)">https://www.cnblogs.com/huahua035/p/7680607.html(文章中的参考文章)</a></p><p><a href="https://www.cnblogs.com/xuzimian/p/10235164.html">https://www.cnblogs.com/xuzimian/p/10235164.html</a></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建commons子项目"><a class="markdownIt-Anchor" href="#创建commons子项目"></a> 创建<code>commons</code>子项目</h3><p><img src="%E5%88%9B%E5%BB%BA%E5%AD%90%E9%A1%B9%E7%9B%AE.png" alt="创建子项目" /></p><p>注: 此处创建普通的<code>Maven</code>项目即可, 需要将<code>SDK</code>版本与父项目保持一致</p><p><img src="%E5%88%9B%E5%BB%BAcommons%E5%AD%90%E9%A1%B9%E7%9B%AE.png" alt="创建commons子项目" /></p><p>修改<code>POM</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 将公共依赖依赖添加到项目中, 则引入公共项目的子项目就不需要挨个添加依赖了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建公共包如: <code>com.xxx.util</code>, <code>com.xxx.config</code>, <code>com.xxx.entity</code></p><h3 id="创建服务子项目"><a class="markdownIt-Anchor" href="#创建服务子项目"></a> 创建服务子项目</h3><p>与<code>commons</code>项目一样, 创建一个普通<code>Maven</code>项目, 通过此种方式则不需要再操作父项目的<code>POM</code>文件添加<code>module</code></p><p>修改<code>POM</code>文件, 引入<code>commons</code>项目依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaolin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建启动类, 注意类的位置, <code>com.xxx.XXXServiceApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(UserServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动, 确认可以正常使用</p><p><a href="#%E9%97%AE%E9%A2%98%E4%BA%8C">很明显我这里出错了</a>😏</p><h3 id="在commons中依赖添加"><a class="markdownIt-Anchor" href="#在commons中依赖添加"></a> 在<code>commons</code>中依赖添加</h3><p>父项目中添加<code>web</code>依赖和<code>lombok</code>依赖, 在<code>commons</code>中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在服务子项目中请求测试"><a class="markdownIt-Anchor" href="#在服务子项目中请求测试"></a> 在服务子项目中请求测试</h3><p>在服务子项目中添加一个请求测试</p><ol><li><p>在服务子项目中添加配置文件</p></li><li><p>添加服务端口配置和应用名称等配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8180</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/user</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br></pre></td></tr></table></figure></li><li><p>添加请求测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建表"><a class="markdownIt-Anchor" href="#创建表"></a> 创建表</h3><p>创建一个用户表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `sys_user` (</span><br><span class="line">  `id` int NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `username` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT &#x27;用户名&#x27;,</span><br><span class="line">  `account` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT &#x27;账户&#x27;,</span><br><span class="line">  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `dept_id` int DEFAULT NULL COMMENT &#x27;部门主键&#x27;,</span><br><span class="line">  `stru_id` int DEFAULT NULL COMMENT &#x27;结构主键&#x27;,</span><br><span class="line">  `staff_id` int DEFAULT NULL COMMENT &#x27;人员主键&#x27;,</span><br><span class="line">  `status` int NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;账户状态(0: 正常; 1: 锁定; 2: 停用;)&#x27;,</span><br><span class="line">  `type` int NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;用户类型(0: 普通自注册用户; 1: 人员用户; 2: 系统管理用户)&#x27;,</span><br><span class="line">  `login_time` datetime DEFAULT NULL COMMENT &#x27;上次登录时间&#x27;,</span><br><span class="line">  `expired_time` datetime DEFAULT NULL COMMENT &#x27;账户过期时间&#x27;,</span><br><span class="line">  `locked_time` datetime DEFAULT NULL COMMENT &#x27;锁定时间, 记录账户解锁时间&#x27;,</span><br><span class="line">  `failure_times` int DEFAULT NULL COMMENT &#x27;失败次数,记录单次登录时的请求次数&#x27;,</span><br><span class="line">  `max_session` int DEFAULT NULL COMMENT &#x27;最大会话数(&lt;1为无限制)&#x27;,</span><br><span class="line">  `deleted` int NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;删除(0: 否; 1: 是)&#x27;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL,</span><br><span class="line">  `creator` int DEFAULT NULL,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  `update_user` int DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT=&#x27;用户表(系统用户可直接创建; 普通用户需要先创建人员)&#x27;;</span><br></pre></td></tr></table></figure><p><a href="spring_cloud.sql" download>SQL文件</a></p><h3 id="在项目中引入数据库"><a class="markdownIt-Anchor" href="#在项目中引入数据库"></a> 在项目中引入数据库</h3><ol><li><p>添加数据库连接依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql数据连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用阿里巴巴的驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加数据库连接配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 最基本的配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/spring_cloud</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个<code>Mapper</code>进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT COUNT(*) FROM sys_user&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(userMapper.count());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#%E9%97%AE%E9%A2%98%E4%B8%80">很显然我又出错了</a>😂</p></li></ol><h3 id="创建代码生成项目"><a class="markdownIt-Anchor" href="#创建代码生成项目"></a> 创建代码生成项目</h3><p>使用<code>MyBatis-Plus</code>的生成器</p><ol><li><p>创建一个普通的<code>Maven</code>项目</p></li><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模板引擎 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 需要使用其中的annotation --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 需要使用其中的转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>生成代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneratorApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/spring_cloud?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SCHEMA</span> <span class="operator">=</span> <span class="string">&quot;public&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTHOR</span> <span class="operator">=</span> <span class="string">&quot;xiaolin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PARENT_PATH</span> <span class="operator">=</span> <span class="string">&quot;com.xiaolin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROOT</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OUT_PUT_PATH</span> <span class="operator">=</span> <span class="string">&quot;/generator/src/main/java&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DataSourceConfig.<span class="type">Builder</span> <span class="variable">DATA_SOURCE_CONFIG</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span></span><br><span class="line">.Builder(URL, USERNAME, PASSWORD);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">manual();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行 run</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">manual</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">model</span> <span class="operator">=</span> scanner(<span class="string">&quot;模块名，多层目录用英文点号分隔&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> ROOT + OUT_PUT_PATH + <span class="string">&quot;/&quot;</span> + PARENT_PATH.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/&quot;</span> + model.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/mapper/mapping&quot;</span>;</span><br><span class="line">FastAutoGenerator.create(DATA_SOURCE_CONFIG)</span><br><span class="line"><span class="comment">// 数据库配置</span></span><br><span class="line">.dataSourceConfig((scanner, builder) -&gt; &#123;</span><br><span class="line">builder.schema(SCHEMA)<span class="comment">//.schema(scanner.apply(&quot;属于模式名&quot;))</span></span><br><span class="line">.dbQuery(<span class="keyword">new</span> <span class="title class_">MySqlQuery</span>())</span><br><span class="line">.typeConvert(<span class="keyword">new</span> <span class="title class_">MySqlTypeConvert</span>())</span><br><span class="line">.keyWordsHandler(<span class="keyword">new</span> <span class="title class_">MySqlKeyWordsHandler</span>());</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 全局配置</span></span><br><span class="line">.globalConfig((scanner, builder) -&gt; &#123;</span><br><span class="line">builder.author(AUTHOR)<span class="comment">//.author(scanner.apply(&quot;输入作者名&quot;))</span></span><br><span class="line">.outputDir(ROOT + OUT_PUT_PATH)</span><br><span class="line">.dateType(DateType.TIME_PACK)</span><br><span class="line">.commentDate(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 包配置</span></span><br><span class="line">.packageConfig((scanner, builder) -&gt; &#123;</span><br><span class="line">builder.moduleName(model)</span><br><span class="line">.mapper(<span class="string">&quot;mapper&quot;</span>)</span><br><span class="line">.entity(<span class="string">&quot;model.entity&quot;</span>)</span><br><span class="line">.service(<span class="string">&quot;service&quot;</span>)</span><br><span class="line">.serviceImpl(<span class="string">&quot;service.impl&quot;</span>)</span><br><span class="line">.controller(<span class="string">&quot;controller&quot;</span>)</span><br><span class="line">.pathInfo(Collections.singletonMap(OutputFile.xml, path))</span><br><span class="line">.parent(PARENT_PATH);<span class="comment">//.parent(scanner.apply(&quot;输入生成包路径&quot;));</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 策略配置</span></span><br><span class="line">.strategyConfig((scanner, builder) -&gt; &#123;</span><br><span class="line">                    <span class="comment">// builder.addInclude(scanner.apply(&quot;输入需要生成的表名&quot;));</span></span><br><span class="line">builder.addTablePrefix(<span class="string">&quot;sys_&quot;</span>, <span class="string">&quot;tb_&quot;</span>, <span class="string">&quot;biz_&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">tables</span> <span class="operator">=</span> scanner(<span class="string">&quot;表名，多个英文逗号分割&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="string">&quot;all&quot;</span>.equalsIgnoreCase(tables)) &#123;</span><br><span class="line">builder.addInclude(tables);</span><br><span class="line">&#125;</span><br><span class="line">builder.entityBuilder()</span><br><span class="line">.naming(NamingStrategy.underline_to_camel)</span><br><span class="line">.superClass(BaseEntity.class)</span><br><span class="line">.enableChainModel()</span><br><span class="line">.enableLombok()</span><br><span class="line">.enableTableFieldAnnotation()</span><br><span class="line">.addSuperEntityColumns(<span class="string">&quot;deleted&quot;</span>, <span class="string">&quot;creator&quot;</span>, <span class="string">&quot;create_time&quot;</span>, <span class="string">&quot;update_time&quot;</span>, <span class="string">&quot;update_user&quot;</span>)</span><br><span class="line">.formatFileName(<span class="string">&quot;%sEntity&quot;</span>)</span><br><span class="line">.idType(IdType.AUTO)</span><br><span class="line">.logicDeleteColumnName(<span class="string">&quot;deleted&quot;</span>)</span><br><span class="line">.build()</span><br><span class="line">.controllerBuilder()</span><br><span class="line">.enableHyphenStyle()</span><br><span class="line">.enableRestStyle()</span><br><span class="line">.formatFileName(<span class="string">&quot;%sController&quot;</span>)</span><br><span class="line">.build()</span><br><span class="line">.serviceBuilder()</span><br><span class="line">.formatServiceFileName(<span class="string">&quot;I%sService&quot;</span>)</span><br><span class="line">.formatServiceImplFileName(<span class="string">&quot;%sServiceImpl&quot;</span>)</span><br><span class="line">.build()</span><br><span class="line">.mapperBuilder()</span><br><span class="line">.enableBaseResultMap()</span><br><span class="line">.enableBaseColumnList()</span><br><span class="line">.formatMapperFileName(<span class="string">&quot;%sMapper&quot;</span>)</span><br><span class="line">.formatXmlFileName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 模板配置</span></span><br><span class="line">.templateConfig((scanner, builder) -&gt; &#123;</span><br><span class="line">builder.entity(<span class="string">&quot;/templates/entity.java&quot;</span>)</span><br><span class="line">.service(<span class="string">&quot;/templates/service.java&quot;</span>)</span><br><span class="line">.serviceImpl(<span class="string">&quot;/templates/serviceImpl.java&quot;</span>)</span><br><span class="line">.mapper(<span class="string">&quot;/templates/mapper.java&quot;</span>)</span><br><span class="line">.xml(<span class="string">&quot;/templates/mapper.xml&quot;</span>)</span><br><span class="line">.controller(<span class="string">&quot;/templates/controller.java&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.injectionConfig((scanner, builder) -&gt; &#123;</span><br><span class="line">builder.beforeOutputFile((tableInfo, objectMap) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;tableInfo: &quot;</span> + tableInfo.getEntityName() + <span class="string">&quot; objectMap: &quot;</span> + objectMap.size());</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 模板引擎配置</span></span><br><span class="line">.templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>())</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">                    模板引擎配置，默认 Velocity 可选模板引擎 Beetl 或 Freemarker 或 Enjoy</span></span><br><span class="line"><span class="comment">                   .templateEngine(new BeetlTemplateEngine())</span></span><br><span class="line"><span class="comment">                   .templateEngine(new FreemarkerTemplateEngine())</span></span><br><span class="line"><span class="comment">                   .templateEngine(new EnjoyTemplateEngine())</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">.execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">scanner</span><span class="params">(String tip)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入&quot;</span> + tip + <span class="string">&quot;：&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">ipt</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.isNullOrEmpty(ipt)) &#123;</span><br><span class="line"><span class="keyword">return</span> ipt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将生成的代码移动到对应项目中</p></li></ol><p><code>XxxMapper.xml</code>文件生成位置在<code>java</code>目录的<code>xxx.xxx.mapper.mapping</code>目录中, 需要将其移动到<code>resource</code>目录下</p><ol start="5"><li><p>配置<code>xml</code>文件路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">classpath*:/mapping/**/*.xml</span></span><br></pre></td></tr></table></figure></li><li><p>配置<code>Mapper</code>的扫描路径, 建议在<code>commons</code>中配置, 这样所有引入<code>commons</code>项目的服务项目都不需要再配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(value = &quot;com.xiaolin.**.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>参考文章</p><p><a href="https://baomidou.com/pages/779a6e/#%E4%BD%BF%E7%94%A8">https://baomidou.com/pages/779a6e/#使用</a></p><p><a href="https://github.com/baomidou/generator/blob/develop/mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/generator/samples/FastAutoGeneratorTest.java">https://github.com/baomidou/generator/blob/develop/mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/generator/samples/FastAutoGeneratorTest.java</a></p></li></ol><h3 id="创建新的服务子项目"><a class="markdownIt-Anchor" href="#创建新的服务子项目"></a> 创建新的服务子项目</h3><p>直接使用<code>Maven</code>方式创建, 并通过代码生成的方式生成相关文件</p><p>添加项目配置, 创建启动类</p><h3 id="创建公共的返回类型"><a class="markdownIt-Anchor" href="#创建公共的返回类型"></a> 创建公共的返回类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApiState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getMessage</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">ApiState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统一异常处理"><a class="markdownIt-Anchor" href="#统一异常处理"></a> 统一异常处理</h3><ol><li><p>创建统一的服务异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> <span class="keyword">implements</span> <span class="title class_">ApiState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(state, (String) <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(<span class="type">int</span> state, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(state, message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(<span class="type">int</span> state, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(<span class="type">int</span> state, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(state, <span class="literal">null</span>, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加统一的异常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = ServiceException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;?&gt; handler(ServiceException ex) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[&#123;&#125;] request failure: &#123;&#125;&quot;</span>, LocalDateTime.now(), ex);</span><br><span class="line">        <span class="keyword">return</span> ApiResult.failure(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="添加验证框架"><a class="markdownIt-Anchor" href="#添加验证框架"></a> 添加验证框架</h3><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>全局异常处理添加处理<code>BindException</code>类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(value = BindException.class)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;?&gt; handler(BindException ex) &#123;</span><br><span class="line">    log(ex);</span><br><span class="line">    List&lt;String&gt; messages = ex.getAllErrors().stream().map(ObjectError::getDefaultMessage).toList();</span><br><span class="line">    <span class="keyword">return</span> ApiResult.failure(<span class="number">500</span>, messages.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="添加springdoc框架"><a class="markdownIt-Anchor" href="#添加springdoc框架"></a> 添加<code>SpringDoc</code>框架</h3><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/swagger-ui.html</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringDocConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">springShopOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .components(<span class="keyword">new</span> <span class="title class_">Components</span>()</span><br><span class="line">                        .addParameters(<span class="string">&quot;token&quot;</span>, <span class="keyword">new</span> <span class="title class_">HeaderParameter</span>().description(<span class="string">&quot;请填写token&quot;</span>).schema(<span class="keyword">new</span> <span class="title class_">StringSchema</span>())))</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>().title(applicationName)</span><br><span class="line">                        .description(<span class="string">&quot;spring doc&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;v2.0&quot;</span>)</span><br><span class="line">                        .license(<span class="keyword">new</span> <span class="title class_">License</span>().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;https://springdoc.org&quot;</span>)))</span><br><span class="line">                .externalDocs(<span class="keyword">new</span> <span class="title class_">ExternalDocumentation</span>().description(<span class="string">&quot;框架&quot;</span>).url(<span class="string">&quot;https://gitee.com&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Tag(name = &quot;DictTypeController&quot;, description = &quot;字典类型控制器&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/type&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DictTypeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IDictTypeService dictTypeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;字典类型新增&quot;, description = &quot;新增字典类型&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;?&gt; add(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> DictTypeDTO type) &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(dictTypeService.add(type));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><p><img src="SpringDoc%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="SpringDoc测试结果" /></p></li></ol><h3 id="建议"><a class="markdownIt-Anchor" href="#建议"></a> 建议</h3><ol><li>不同类型的服务子项目使用相似的端口表示, 如<code>A</code>服务使用<code>818X</code>, <code>B</code>服务使用<code>828X</code>, 便于识别和管理</li><li>打个压缩包, 后续使用<code>SpringCloudAlibaba</code>时可以直接用</li></ol><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题😭</h3><p><i id="问题一">问题一</i></p><p>问题: <code>Invalid value type for attribute 'factoryBeanObjectType': java.lang.String</code>:</p><p>问题原因: 添加数据库时, 没有是用最新的<code>mybatis-spring-boot-starter</code>带来的问题</p><p>解决办法: 引入合适的<code>mybatis-spring-boot-starter</code>版本</p><p>参考文章: <a href="https://blog.csdn.net/weixin_46515691/article/details/134618642">https://blog.csdn.net/weixin_46515691/article/details/134618642</a></p><p><i id="问题二">问题二</i></p><p>问题: <code>Error:Cannot determine path to 'tools.jar' library for 17 (D:\Java\jdk17)</code>:</p><p>问题原因: <code>IDEA</code>版本不支持<code>JDK</code>版本, <code>JDK</code>版本过高</p><p>解决办法: 升级<code>IDEA</code>版本或者降低<code>JDK</code>版本</p><p>参考文章: <a href="https://blog.csdn.net/wangpaiblog/article/details/120407810">https://blog.csdn.net/wangpaiblog/article/details/120407810</a></p><p><i id="问题三">问题三</i></p><p>问题: 代码生成问题</p><ol><li>找不到类<code>freemarker/template/Configuration</code> -&gt; 未引入<code>freemarker</code>依赖</li><li>不符合要求的参数: <code>e != java.lang.String</code> -&gt; 配置类名时<code>%</code>后少了<code>s</code>, 如: <code>%sServiceImpl</code>写成了<code>%ServiceImpl</code></li></ol><p><i id="问题四">问题四</i></p><p>问题: 整合<code>Swagger</code>问题</p><p>项目在添加<code>@EnableOpenApi</code>注解之后, 在启动时会出现错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.TypeNotPresentException: Type javax.servlet.http.HttpServletRequest not present</span><br><span class="line">...</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: javax.servlet.http.HttpServletRequest</span><br></pre></td></tr></table></figure><p>问题原因: <code>SpringBoot3.2.0</code>版本依赖于<code>jakarta</code>依赖包，但是<code>Swagger</code>依赖底层应用的<code>javax</code>依赖包，所以只要一启动就会报错。说白了就是版本问题</p><p>解决办法:</p><ol><li>降低<code>SpringBoot</code>版本</li><li>使用<code>springdoc-openapi</code></li></ol><h3 id="挖坑"><a class="markdownIt-Anchor" href="#挖坑"></a> 挖坑</h3><ol><li><code>Spring</code>机制, 源码</li><li><code>Spring MVC</code>机制</li><li><code>SpringBoot</code>机制</li><li><code>SpringDoc</code>使用详情</li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2023/11/24/js/Promise/"/>
      <url>/2023/11/24/js/Promise/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>这是2021年11月份在<code>CSDN</code>上写的博客, 由于本人以后端为主, 前端对自己的要求是会用即可, 没有深入学习, 前几天面试时被问到<code>js</code>的异步问题, 有点懵, 所以翻出来再看一眼, 也补充点内容</p><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p><code>Promise</code>异步编程的一种解决方案.对异步操作进行封装,做链式编程<br />避免多重回调嵌套</p><h2 id="promise的三种状态"><a class="markdownIt-Anchor" href="#promise的三种状态"></a> <code>Promise</code>的三种状态</h2><h5 id="pending"><a class="markdownIt-Anchor" href="#pending"></a> <code>pending</code>:</h5><p>等待状态,异步操作没有完成,如网络请求没有结束.</p><h5 id="fulfill"><a class="markdownIt-Anchor" href="#fulfill"></a> <code>fulfill</code>:</h5><p>满足状态,运行到了主动回调<code>resolve</code>函数的位置,此时会回调<code>then()</code>.</p><h5 id="reject"><a class="markdownIt-Anchor" href="#reject"></a> <code>reject</code>:</h5><p>拒绝状态,运行到了主动回调<code>reject</code>函数的位置,此时会回调<code>catch()</code>.</p><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2><h5 id="基本使用"><a class="markdownIt-Anchor" href="#基本使用"></a> 基本使用</h5><blockquote><ol><li>使用<code>new</code>关键字创建一个<code>Promise</code></li><li><code>Promise</code>创建时需要一个函数作为参数</li><li>参数函数的参数为<code>resolve</code>函数和<code>reject</code>函数</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个Promise</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 异步函数</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 异步函数执行完的成功回调函数</span></span><br><span class="line"><span class="comment">// 回调函数的操作改为调用resolve函数</span></span><br><span class="line"><span class="comment">// 调用resolve函数后,Promise就会到then中</span></span><br><span class="line"><span class="comment">// resolve函数中的参数可以从then的回调函数中取得</span></span><br><span class="line"><span class="title function_">resolve</span>(data)</span><br><span class="line"><span class="comment">// 一步函数执行完的失败回调函数</span></span><br><span class="line"><span class="title function_">reject</span>(error)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// Promise中的异步函数的回调函数中的操作就可以写到then的对调函数中,可以获取resolve函数的参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then&quot;</span>);</span><br><span class="line"><span class="comment">// 如果还有异步操作,可以再次return一个Promise</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">resolve</span>(res)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(res).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 异常情况的回调</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="promise的链式调用"><a class="markdownIt-Anchor" href="#promise的链式调用"></a> <code>Promise</code>的链式调用</h5><ol><li></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 一步操作...</span></span><br><span class="line"><span class="title function_">resolve</span>(data);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 结果处理</span></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(data + <span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="comment">// return Promise.reject(err) || throw &quot;err message&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 结果处理</span></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(data + <span class="string">&#x27;222&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 一步操作...</span></span><br><span class="line"><span class="title function_">resolve</span>(data);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// throw &quot;err message&quot;</span></span><br><span class="line"><span class="comment">// 结果处理</span></span><br><span class="line"><span class="keyword">return</span> data + <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 结果处理</span></span><br><span class="line"><span class="keyword">return</span> data + <span class="string">&#x27;222&#x27;</span>;</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span>&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>1.<code>then</code>中期望一个函数作为参数,如果不是函数,则会发生<code>then</code>穿透,即本次<code>then</code>中的回调的参数直接给到下一个<code>then</code>中,不做任何处理.但是不会被<code>catch</code>获取<br />2.简单说,<code>then</code>中如果有<code>return</code>,则返回的内容是一个<code>Promise</code>,<code>return</code>的数据可以直接从下一个<code>then</code>中作为参数获取.如果抛出异常,则是返回一个<code>reject</code>的<code>Promise</code>,数据可以直接从<code>catch</code>中获取</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="string">&#x27;abc&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 此处的data的值是123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="同时处理多个异步操作"><a class="markdownIt-Anchor" href="#同时处理多个异步操作"></a> 同时处理多个异步操作</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;<span class="title function_">resolve</span>(data)&#125;),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;<span class="title function_">resolve</span>(data)&#125;),</span><br><span class="line">...</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只有当所有的异步操作都完成时才会执行<code>then</code>函数,其回调的参数<code>results</code>时所有异步操作的返回结果集,是一个数组</p><p><font color="#00FF00">日期：2021-11-18</font></p><h2 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h2><h5 id="promise的任务类型"><a class="markdownIt-Anchor" href="#promise的任务类型"></a> <code>Promise</code>的任务类型</h5><ol><li><p>在此之前是不了解<code>js</code>的, 通过这次才知道<code>js</code>是单线程的, 而所谓的异步实际指的是异步任务</p></li><li><p><code>Promise</code>通过<code>new</code>的方式本身并没有变为异步任务, 在执行到<code>resolve</code>或者<code>reject</code>之后才会成为异步任务等待执行<code>then</code>或者<code>catch</code>回调, 所以<code>Promise</code>本身是同步代码块</p></li><li><p>异步任务会放入任务队列中, 等待条件符合后执行(两个方面: 一是本身条件符合, 即已经放入了任务队列中; 二是线程条件符合, 即同步内容执行完成后, 被事件循环机制从队列中取出)</p></li></ol><h2 id="推荐"><a class="markdownIt-Anchor" href="#推荐"></a> 推荐</h2><p><a href="https://blog.csdn.net/qfc_128220/category_11294044.html">Promise系列</a></p><p>这位老哥关于<code>Promise</code>的博文写的很棒, 这两天比较忙, 只看了(三), 后续补上</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2023/11/22/other/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/11/22/other/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h3 id="环境"><a class="markdownIt-Anchor" href="#环境"></a> 环境</h3><ol><li><code>node</code>环境 —&gt; 安装<code>node</code></li><li><code>git</code>环境 —&gt; 若需要交给托管中心, 则需要安装<code>git</code>环境</li><li><code>hexo</code>环境 —&gt; 博客搭建使用 <code>npm install hexo-cli -g</code></li></ol><h3 id="博客搭建"><a class="markdownIt-Anchor" href="#博客搭建"></a> 博客搭建</h3><ol><li><p>创建一个空目录, 空目录, 空目录</p></li><li><p>进入空目录下打开命令行</p></li><li><p>执行<code>hexo init</code>命令, 进行初始化</p><p><img src="init.png" alt="初始化博客目录" /></p><p><img src="init-result.png" alt="初始化后目录结果" /></p></li><li><p>执行<code>hexo s</code>或者<code>hexo server</code>命令, 即可启动搭建的博客</p><p><img src="start.png" alt="启动博客" /></p><p>访问<code>http://localhost:4000/</code>即可查看当前的博客</p></li><li><p>执行<code>hexo new [layout] &quot;title&quot;</code>命令, 新建一个页面</p><p><code>layout</code>的选项:</p><p>​<code>post</code>: 博客 —&gt; <code>source/_post</code></p><p>​<code>page</code>: 路由 —&gt; <code>source</code></p><p>​<code>draft</code>: 稿件 —&gt; <code>source/_draft</code></p></li></ol><h3 id="使用gitee部署"><a class="markdownIt-Anchor" href="#使用gitee部署"></a> 使用<code>gitee</code>部署</h3><ol><li><p>在<code>gitee</code>上新建仓库, 并将仓库地址配置到博客根目录的<code>_config.yml</code>中, 如下</p><p><img src="dploy-config.png" alt="部署配置" /></p></li><li><p>安装<code>git</code>部署插件<code>npm install hexo-deployer-git --save</code>和<code>markdown</code>渲染插件<code>npm install hexo-renderer-marked --save</code></p></li><li><p>执行<code>hexo g</code>或者<code>hexo generate</code>命令生成静态文件</p><p>在<code>public</code>目录下可以看到生成的静态文件(将<code>public</code>中的内容放到<code>nginx</code>下, 做好相关配置, 也可以实现)</p></li><li><p>执行<code>hexo d</code>或者<code>hexo deploy</code>推送到<code>gitee</code></p><p>此时发现<code>gitee</code>仓库中已经添加了内容, 这些内容是<code>public</code>目录下的静态文件</p><p><img src="gitee-deploy.png" alt="码云部署" /></p><p>成功之后会生成访问地址</p></li></ol><h3 id="修改主题"><a class="markdownIt-Anchor" href="#修改主题"></a> 修改主题</h3><ol><li><p>选择主题</p><p>访问https://hexo.io/themes/可以选择自己喜欢的主题</p><p>本人选择的是<code>hexo-theme-cola</code>这一款, 这款比较符合我的期望, 还有评论功能; 最好选择带有说明的主题, 方便使用, 前人栽树后人乘凉.</p></li><li><p>从<code>github</code>上下载选择的主题, 并将整个主题目录添加到<code>themes</code>目录下</p><p><img src="%E4%B8%BB%E9%A2%98%E7%9B%AE%E5%BD%95%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE.png" alt="主题目录存放位置" /></p></li><li><p>根据主题中的说明, 进行主题初始化</p><p><code>hexo-theme-cola</code>主题的相关初始化和配置可以查看原作者<code>https://yangxiang.cc/</code>的《如何使用<code>hexo-theme-cola</code>主题》这一篇博客</p><p><img src="%E4%B8%BB%E9%A2%98%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%8E%E7%BB%93%E6%9E%9C.png" alt="主题的初始化后结果" /></p></li><li><p>根据需要, 修改配置文件<code>_config.yml</code>中的配置信息</p></li><li><p>自定义和修改配置内容</p><ul><li><p>修改内容: 根据配置搜索定义位置, 如: 我想在<code>github</code>的图标定义为动态数量的, 则去查询配置文件中<code>github_url</code>的使用位置(在<code>main-left.ejs</code>文件中), 并修改配置</p><p><img src="%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8.png" alt="主题修改配置和使用" /></p></li><li><p>修改<code>icon</code>:</p><ol><li><p>在https://www.iconfont.cn/manage/index中创建自己的项目, 添加需要的标签</p><p><img src="iconfont%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE%E5%88%B0%E9%A1%B9%E7%9B%AE.png" alt="iconfont添加标签到项目" /></p></li><li><p>项目设置</p><p><img src="iconfont%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.png" alt="iconfont项目配置" /></p></li><li><p>生成<code>icon</code>引入格式</p><p><img src="%E7%94%9F%E6%88%90%E5%BC%95%E5%85%A5%E6%A0%BC%E5%BC%8F.png" alt="生成引入格式" /></p></li><li><p><code>iconfont</code>的引入和使用</p><p><img src="iconfont%E5%BC%95%E5%85%A5%E5%92%8C%E4%BD%BF%E7%94%A8.png" alt="iconfont引入和使用" /></p></li></ol></li></ul></li></ol><h3 id="写博客"><a class="markdownIt-Anchor" href="#写博客"></a> 写博客</h3><ol><li><p>修改配置为文件<code>_config.yml</code>中的<code>post_asset_folder</code>配置项为<code>true</code>, 允许添加资源文件夹</p></li><li><p>使用<code>hexo new post &quot;blog_name&quot;</code>命令创建一篇博客, 会在<code>_posts</code>目录下生成一个<code>md</code>文件和一个同名的文件夹</p><p>如果想要将博客使用文件夹分开存放, 可以使用<code>hexo new post -p xxx/yyy.md</code>命令创建博客, <code>hexo</code>会在<code>_post</code>文件夹下创建一个<code>xxx</code>的子文件夹, 然后在子文件夹下创建<code>yyy.md</code>, 如果文件路径中含有空格, 则必须使用<code>&quot;&quot;</code>括起来</p></li><li><p>编辑<code>md</code>文件, 书写博客<code>title</code>和内容</p></li><li><p>添加<code>hexo-asset-img</code>组件, 可以使用<code>markdown</code>中的<code>![]()</code>格式添加图片</p><p>2023-11-28更新</p><p>添加图片的格式要求<code>![](filename/example.png)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regExp = <span class="title class_">RegExp</span>(<span class="string">&quot;!\\[(.*?)\\]\\(&quot;</span> + fileName + <span class="string">&#x27;/(.+?)\\)&#x27;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"><span class="comment">// hexo g</span></span><br><span class="line">data.<span class="property">content</span> = data.<span class="property">content</span>.<span class="title function_">replace</span>(regExp, <span class="string">&quot;&#123;% asset_img $2 $1 %&#125;&quot;</span>,<span class="string">&quot;g&quot;</span>);</span><br></pre></td></tr></table></figure><p>上述为<code>hexo-asset-img</code>处理图片的核心代码, 它是将<code>markdown</code>格式的图片信息替换为编译格式, 使用的图片的所在目录是与文件名同名的, 所以有图片格式要求</p><ol><li><p>图片路径必须以文章的文件名开头, 不能是<code>./</code>, 否则无法匹配, 注意是文件名, 跟文章的<code>title</code>无关</p></li><li><p>文件名中不能带有正则表达式的元字符, 如<code>.</code>, <code>()</code>, <code>*</code>, <code>?</code>, <code>+</code>, <code>\</code>等, 因为处理中的正则表达式是将文件名直接拼接的, 所以其中的包含的正则元字符是没有处理的</p><p>别问我为啥知道的, 我花了两个多小时发现的😭</p><p>最近写的两篇博客的文件名中使用了<code>()</code>元字符, 发现图片加载不出来, 之前的文章都是可以的, 然后巴拉了一堆文章看没啥用, 决定自己去翻源码看看, 别的不说<code>hexo-asset-img</code>的<code>README.md</code>写的还是不错的:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># hexo-asset-img</span></span><br></pre></td></tr></table></figure><p>以上为<code>README.md</code>的全部内容, 很简洁吧😂</p><p>没办法, 去翻看源码, 还好源码比较少, 好懂, 然后最关键的就是上面两行, 我在内容替换之前和替换之后分别打印了一下, 发现了问题</p></li></ol></li></ol><h3 id="优化博客内容"><a class="markdownIt-Anchor" href="#优化博客内容"></a> 优化博客内容</h3><h4 id="使用插件"><a class="markdownIt-Anchor" href="#使用插件"></a> 使用插件</h4><ol><li><p>将<code>hexo-renderer-marked</code>替换为<code>@upupming/hexo-renderer-markdown-it-plus</code></p></li><li><p><code>_config.yml</code>中添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Markdown config</span></span><br><span class="line"><span class="attr">markdown_it_plus:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">markdown-it-emoji</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">markdown-it-sub</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">markdown-it-sup</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">markdown-it-ins</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">markdown-it-mark</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">markdown-it-katex</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="comment"># Minimum level for ID creation. (Ex. h2 to h6)</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment"># A suffix that is prepended to the number given if the ID is repeated.</span></span><br><span class="line"><span class="comment">#    collisionSuffix: &#x27;&#x27;</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;v&#x27;</span></span><br><span class="line">    <span class="comment"># If `true`, creates an anchor tag with a permalink besides the heading.</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Class used for the permalink anchor tag.</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">header-anchor</span></span><br><span class="line">    <span class="comment"># Set to &#x27;right&#x27; to add permalink after heading</span></span><br><span class="line">    <span class="attr">permalinkSide:</span> <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    <span class="comment"># The symbol used to make the permalink</span></span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">¶</span></span><br><span class="line">    <span class="comment"># Transform anchor to (1) lower case; (2) upper case</span></span><br><span class="line">    <span class="attr">case:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># Replace space with a character</span></span><br><span class="line">    <span class="attr">separator:</span> <span class="string">&#x27;-&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>安装对应的插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install markdown-it-xxx</span><br></pre></td></tr></table></figure></li></ol><h4 id="添加目录"><a class="markdownIt-Anchor" href="#添加目录"></a> 添加目录</h4><p>在文章的开始部分添加如下内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- toc --&gt;</span></span><br></pre></td></tr></table></figure><p>该内容不会在文章中显示, 而是会生成目录, 使用<code>hexo</code>自带的<code>toc</code>函数即可渲染目录</p><p>目录标签使用:</p><p><img src="%E7%9B%AE%E5%BD%95%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8.png" alt="目录标签使用" /></p><p><code>hexo</code>自带<code>toc</code>函数渲染</p><p><img src="Hexo%E8%87%AA%E5%B8%A6toc%E5%87%BD%E6%95%B0%E6%B8%B2%E6%9F%93.png" alt="Hexo自带toc函数渲染" /></p><p><code>hexo</code>自带<code>toc</code>函数渲染结果</p><p><img src="Hexo%E8%87%AA%E5%B8%A6toc%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%9C.png" alt="Hexo自带toc渲染结果" /></p><p>此处的渲染结果指的是:</p><ol><li><p>添加锚点(其实不使用<code>toc</code>也有锚点, 标题标签会有<code>id</code>属性, 其值就是标题内容)</p></li><li><p>渲染目录标签, 大致如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;toc&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一级目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;toc-item toc-level-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;toc-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#%E7%8E%AF%E5%A2%83&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toc-number&quot;</span>&gt;</span>1.<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toc-text&quot;</span>&gt;</span> 环境<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;toc-item toc-level-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;toc-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toc-number&quot;</span>&gt;</span>2.<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toc-text&quot;</span>&gt;</span> 博客搭建<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多级目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;toc-item toc-level-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;toc-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toc-number&quot;</span>&gt;</span>6.<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toc-text&quot;</span>&gt;</span> 优化博客内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;toc-child&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;toc-item toc-level-4&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;toc-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toc-number&quot;</span>&gt;</span>6.1.<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toc-text&quot;</span>&gt;</span> 使用插件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;toc-item toc-level-4&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;toc-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toc-number&quot;</span>&gt;</span>6.2.<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toc-text&quot;</span>&gt;</span> 添加目录<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
